
SPIand25LC040.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cfc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08000e08  08000e08  00010e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e4c  08000e4c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08000e4c  08000e4c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e4c  08000e4c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e4c  08000e4c  00010e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e50  08000e50  00010e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08000e54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000068  08000ebc  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08000ebc  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000010d4  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005f7  00000000  00000000  00021165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000200  00000000  00000000  00021760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001a8  00000000  00000000  00021960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000162f2  00000000  00000000  00021b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002616  00000000  00000000  00037dfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007fffa  00000000  00000000  0003a410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ba40a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a20  00000000  00000000  000ba45c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08000df0 	.word	0x08000df0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08000df0 	.word	0x08000df0

0800014c <initTim2>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void initTim2(void)
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
    //ENABLE TIM2 CLOCK
    RCC->APB1ENR |= (1u << 0);
 8000150:	4b0e      	ldr	r3, [pc, #56]	; (800018c <initTim2+0x40>)
 8000152:	69db      	ldr	r3, [r3, #28]
 8000154:	4a0d      	ldr	r2, [pc, #52]	; (800018c <initTim2+0x40>)
 8000156:	f043 0301 	orr.w	r3, r3, #1
 800015a:	61d3      	str	r3, [r2, #28]

    //LEAVE THE COUNTER FREQUENCY UNCHANGED
    TIM2->PSC = 0;
 800015c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000160:	2200      	movs	r2, #0
 8000162:	629a      	str	r2, [r3, #40]	; 0x28

    //SET TIMER RELOAD VALUE
    TIM2->ARR = (uint32_t)4000000;
 8000164:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000168:	4a09      	ldr	r2, [pc, #36]	; (8000190 <initTim2+0x44>)
 800016a:	62da      	str	r2, [r3, #44]	; 0x2c

    //SET INITIAL COUNTER VALUE
    TIM2->CNT = 0;
 800016c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000170:	2200      	movs	r2, #0
 8000172:	625a      	str	r2, [r3, #36]	; 0x24

    //ENABLE TIM2 COUNTER
    TIM2->CR1 |= (1u << 0);
 8000174:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000178:	681b      	ldr	r3, [r3, #0]
 800017a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800017e:	f043 0301 	orr.w	r3, r3, #1
 8000182:	6013      	str	r3, [r2, #0]
}
 8000184:	bf00      	nop
 8000186:	46bd      	mov	sp, r7
 8000188:	bc80      	pop	{r7}
 800018a:	4770      	bx	lr
 800018c:	40021000 	.word	0x40021000
 8000190:	003d0900 	.word	0x003d0900

08000194 <InitClocks>:

void InitClocks(void)
{
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
  RCC->APB2ENR |= (1u << 2);     //ENABLE GPIOA CLOCK
 8000198:	4b07      	ldr	r3, [pc, #28]	; (80001b8 <InitClocks+0x24>)
 800019a:	699b      	ldr	r3, [r3, #24]
 800019c:	4a06      	ldr	r2, [pc, #24]	; (80001b8 <InitClocks+0x24>)
 800019e:	f043 0304 	orr.w	r3, r3, #4
 80001a2:	6193      	str	r3, [r2, #24]

  RCC->APB2ENR |= (1u << 12);    //ENABLE SPI1 CLOCK
 80001a4:	4b04      	ldr	r3, [pc, #16]	; (80001b8 <InitClocks+0x24>)
 80001a6:	699b      	ldr	r3, [r3, #24]
 80001a8:	4a03      	ldr	r2, [pc, #12]	; (80001b8 <InitClocks+0x24>)
 80001aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80001ae:	6193      	str	r3, [r2, #24]
}
 80001b0:	bf00      	nop
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bc80      	pop	{r7}
 80001b6:	4770      	bx	lr
 80001b8:	40021000 	.word	0x40021000

080001bc <SetPinMode>:
void SetPinMode(void)
{
 80001bc:	b480      	push	{r7}
 80001be:	af00      	add	r7, sp, #0
    //RESET PIN MODES
    GPIOA->CRL &= ~((16u << (4 * 4))       //CLEAR PA4
 80001c0:	4b09      	ldr	r3, [pc, #36]	; (80001e8 <SetPinMode+0x2c>)
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	4a08      	ldr	r2, [pc, #32]	; (80001e8 <SetPinMode+0x2c>)
 80001c6:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80001ca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80001ce:	6013      	str	r3, [r2, #0]
                     );



    //CONFIGURE PIN MODES
    GPIOA->CRL |= ((1u << (4 * 4))       //CLEAR PA4
 80001d0:	4b05      	ldr	r3, [pc, #20]	; (80001e8 <SetPinMode+0x2c>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	4a04      	ldr	r2, [pc, #16]	; (80001e8 <SetPinMode+0x2c>)
 80001d6:	f043 4324 	orr.w	r3, r3, #2751463424	; 0xa4000000
 80001da:	f443 0321 	orr.w	r3, r3, #10551296	; 0xa10000
 80001de:	6013      	str	r3, [r2, #0]
                         |(10u << (4 * 5))      //CLEAR PA5
                         |(4u << (4 * 6))      //CLEAR PA6
    					 |(10u << (4 * 7))      //CLEAR PA7
                         );
}
 80001e0:	bf00      	nop
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bc80      	pop	{r7}
 80001e6:	4770      	bx	lr
 80001e8:	40010800 	.word	0x40010800

080001ec <ConfigSpi>:
void ConfigSpi(void)
{
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
    //CONFIGURE SPI1_CR1 REGISTER
    //CLEAR BITS
    SPI1->CR1 &= ~((1u << 15)           //FULL DUPLEX MODE
 80001f0:	4b0e      	ldr	r3, [pc, #56]	; (800022c <ConfigSpi+0x40>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a0d      	ldr	r2, [pc, #52]	; (800022c <ConfigSpi+0x40>)
 80001f6:	f423 4326 	bic.w	r3, r3, #42496	; 0xa600
 80001fa:	f023 03b8 	bic.w	r3, r3, #184	; 0xb8
 80001fe:	6013      	str	r3, [r2, #0]
                  |(1u << 7)            //MSB FIRST
                  |(7u << 3)            //RESET BITS THAT DIVIDE THE FREQUENCY BEFORE SETTING THEM AGAIN
                  );

    //SET BITS
    SPI1->CR1 |= ((5u << 3)             //DIVIDE SPI FREQUENCY BY 64
 8000200:	4b0a      	ldr	r3, [pc, #40]	; (800022c <ConfigSpi+0x40>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a09      	ldr	r2, [pc, #36]	; (800022c <ConfigSpi+0x40>)
 8000206:	f043 032f 	orr.w	r3, r3, #47	; 0x2f
 800020a:	6013      	str	r3, [r2, #0]
                 );


    //CONFIGURE SPI1_CR2 REGISTER
    //CLEAR BITS
    SPI1->CR2 &= ~((7u << 5)            //CLEAR INTERRUPT RELATED BITS AS WON'T BE USING INTERRUPTS
 800020c:	4b07      	ldr	r3, [pc, #28]	; (800022c <ConfigSpi+0x40>)
 800020e:	685b      	ldr	r3, [r3, #4]
 8000210:	4a06      	ldr	r2, [pc, #24]	; (800022c <ConfigSpi+0x40>)
 8000212:	f023 03e3 	bic.w	r3, r3, #227	; 0xe3
 8000216:	6053      	str	r3, [r2, #4]
    //SET BITS
    //SPI1->CR2 |= (
    //             (1u << 2)             //SLAVE SELECT OUTPUT ENABLED
    //             );
    //ENABLE SPI1
    SPI1->CR1 |= (1u << 6);
 8000218:	4b04      	ldr	r3, [pc, #16]	; (800022c <ConfigSpi+0x40>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a03      	ldr	r2, [pc, #12]	; (800022c <ConfigSpi+0x40>)
 800021e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000222:	6013      	str	r3, [r2, #0]
}
 8000224:	bf00      	nop
 8000226:	46bd      	mov	sp, r7
 8000228:	bc80      	pop	{r7}
 800022a:	4770      	bx	lr
 800022c:	40013000 	.word	0x40013000

08000230 <SPI_READ>:

uint8_t SPI_READ(uint8_t address)    //HOLDS THE MPU9250 REGISTER ADDRESS TO REQUEST DATA FROM
{
 8000230:	b480      	push	{r7}
 8000232:	b085      	sub	sp, #20
 8000234:	af00      	add	r7, sp, #0
 8000236:	4603      	mov	r3, r0
 8000238:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data = 0;
 800023a:	2300      	movs	r3, #0
 800023c:	73fb      	strb	r3, [r7, #15]

    //INSTRUCTION OF READ FROM 25LC040
    uint8_t instruction = 3;
 800023e:	2303      	movs	r3, #3
 8000240:	73bb      	strb	r3, [r7, #14]
    //SET SLAVE SELECT LOW
    GPIOA->ODR &= ~(1u << 4);
 8000242:	4b19      	ldr	r3, [pc, #100]	; (80002a8 <SPI_READ+0x78>)
 8000244:	68db      	ldr	r3, [r3, #12]
 8000246:	4a18      	ldr	r2, [pc, #96]	; (80002a8 <SPI_READ+0x78>)
 8000248:	f023 0310 	bic.w	r3, r3, #16
 800024c:	60d3      	str	r3, [r2, #12]

    //WRITE INSTRUCTION, ADDRESS AND DUMMY BYTE TO DATA REGISTER

    SPI1->DR = (SPI1->DR & 0xFF00) | address;
 800024e:	4b17      	ldr	r3, [pc, #92]	; (80002ac <SPI_READ+0x7c>)
 8000250:	68db      	ldr	r3, [r3, #12]
 8000252:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
 8000256:	79fb      	ldrb	r3, [r7, #7]
 8000258:	4914      	ldr	r1, [pc, #80]	; (80002ac <SPI_READ+0x7c>)
 800025a:	4313      	orrs	r3, r2
 800025c:	60cb      	str	r3, [r1, #12]
    SPI1->DR = (SPI1->DR & 0x00FF) | (instruction << 8);
 800025e:	4b13      	ldr	r3, [pc, #76]	; (80002ac <SPI_READ+0x7c>)
 8000260:	68db      	ldr	r3, [r3, #12]
 8000262:	b2db      	uxtb	r3, r3
 8000264:	7bba      	ldrb	r2, [r7, #14]
 8000266:	0212      	lsls	r2, r2, #8
 8000268:	4611      	mov	r1, r2
 800026a:	4a10      	ldr	r2, [pc, #64]	; (80002ac <SPI_READ+0x7c>)
 800026c:	430b      	orrs	r3, r1
 800026e:	60d3      	str	r3, [r2, #12]

    //WAIT UNTIL SPI IS NOT BUSY AND RX BUFFER IS NOT EMPTY
    while( ((SPI1->SR)&(1u << 7)) || (!((SPI1->SR)&(1u << 0))) );
 8000270:	bf00      	nop
 8000272:	4b0e      	ldr	r3, [pc, #56]	; (80002ac <SPI_READ+0x7c>)
 8000274:	689b      	ldr	r3, [r3, #8]
 8000276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800027a:	2b00      	cmp	r3, #0
 800027c:	d1f9      	bne.n	8000272 <SPI_READ+0x42>
 800027e:	4b0b      	ldr	r3, [pc, #44]	; (80002ac <SPI_READ+0x7c>)
 8000280:	689b      	ldr	r3, [r3, #8]
 8000282:	f003 0301 	and.w	r3, r3, #1
 8000286:	2b00      	cmp	r3, #0
 8000288:	d0f3      	beq.n	8000272 <SPI_READ+0x42>

    //READ A BYTE FROM THE RX BUFFER
    rx_data = (uint8_t)SPI1->DR;
 800028a:	4b08      	ldr	r3, [pc, #32]	; (80002ac <SPI_READ+0x7c>)
 800028c:	68db      	ldr	r3, [r3, #12]
 800028e:	73fb      	strb	r3, [r7, #15]

    //SET SLAVE SELECT HIGH
    GPIOB->ODR |= (1u << 1);
 8000290:	4b07      	ldr	r3, [pc, #28]	; (80002b0 <SPI_READ+0x80>)
 8000292:	68db      	ldr	r3, [r3, #12]
 8000294:	4a06      	ldr	r2, [pc, #24]	; (80002b0 <SPI_READ+0x80>)
 8000296:	f043 0302 	orr.w	r3, r3, #2
 800029a:	60d3      	str	r3, [r2, #12]

    return rx_data;
 800029c:	7bfb      	ldrb	r3, [r7, #15]
}
 800029e:	4618      	mov	r0, r3
 80002a0:	3714      	adds	r7, #20
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bc80      	pop	{r7}
 80002a6:	4770      	bx	lr
 80002a8:	40010800 	.word	0x40010800
 80002ac:	40013000 	.word	0x40013000
 80002b0:	40010c00 	.word	0x40010c00

080002b4 <InitSPI>:

void InitSPI(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
   //INIT ALL REQUIRED CLOCKS FOR SPI1
	InitClocks();
 80002b8:	f7ff ff6c 	bl	8000194 <InitClocks>

   //CONFIGURE PINS FOR SPI1
	SetPinMode();
 80002bc:	f7ff ff7e 	bl	80001bc <SetPinMode>

   //INITIALISE SLAVE SELECT HIGH
   GPIOB->ODR |= (1u << 0);
 80002c0:	4b04      	ldr	r3, [pc, #16]	; (80002d4 <InitSPI+0x20>)
 80002c2:	68db      	ldr	r3, [r3, #12]
 80002c4:	4a03      	ldr	r2, [pc, #12]	; (80002d4 <InitSPI+0x20>)
 80002c6:	f043 0301 	orr.w	r3, r3, #1
 80002ca:	60d3      	str	r3, [r2, #12]

   //CONFIGURE SPI1
   	ConfigSpi();
 80002cc:	f7ff ff8e 	bl	80001ec <ConfigSpi>
}
 80002d0:	bf00      	nop
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	40010c00 	.word	0x40010c00

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b088      	sub	sp, #32
 80002dc:	af00      	add	r7, sp, #0





  uint8_t address =187;
 80002de:	23bb      	movs	r3, #187	; 0xbb
 80002e0:	77fb      	strb	r3, [r7, #31]
  uint8_t DataStored = 0;
 80002e2:	2300      	movs	r3, #0
 80002e4:	77bb      	strb	r3, [r7, #30]
  uint8_t MSG[30];

  //SET UP THE TIMER
  initTim2();
 80002e6:	f7ff ff31 	bl	800014c <initTim2>

  InitSPI();
 80002ea:	f7ff ffe3 	bl	80002b4 <InitSPI>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  DataStored= SPI_READ(address);
 80002ee:	7ffb      	ldrb	r3, [r7, #31]
 80002f0:	4618      	mov	r0, r3
 80002f2:	f7ff ff9d 	bl	8000230 <SPI_READ>
 80002f6:	4603      	mov	r3, r0
 80002f8:	77bb      	strb	r3, [r7, #30]

	  sprintf((char *)MSG, "\n DATA= %d Hex\r\n", DataStored);
 80002fa:	7fba      	ldrb	r2, [r7, #30]
 80002fc:	463b      	mov	r3, r7
 80002fe:	4904      	ldr	r1, [pc, #16]	; (8000310 <main+0x38>)
 8000300:	4618      	mov	r0, r3
 8000302:	f000 f8fb 	bl	80004fc <siprintf>
	  //HAL_UART_Transmit(&huart1,(uint8_t *) MSG, 30, 200);

	  HAL_Delay(100);
 8000306:	2064      	movs	r0, #100	; 0x64
 8000308:	f000 f8aa 	bl	8000460 <HAL_Delay>
	  DataStored= SPI_READ(address);
 800030c:	e7ef      	b.n	80002ee <main+0x16>
 800030e:	bf00      	nop
 8000310:	08000e08 	.word	0x08000e08

08000314 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000318:	e7fe      	b.n	8000318 <NMI_Handler+0x4>

0800031a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800031a:	b480      	push	{r7}
 800031c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800031e:	e7fe      	b.n	800031e <HardFault_Handler+0x4>

08000320 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000324:	e7fe      	b.n	8000324 <MemManage_Handler+0x4>

08000326 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000326:	b480      	push	{r7}
 8000328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800032a:	e7fe      	b.n	800032a <BusFault_Handler+0x4>

0800032c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000330:	e7fe      	b.n	8000330 <UsageFault_Handler+0x4>

08000332 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000332:	b480      	push	{r7}
 8000334:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000336:	bf00      	nop
 8000338:	46bd      	mov	sp, r7
 800033a:	bc80      	pop	{r7}
 800033c:	4770      	bx	lr

0800033e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800033e:	b480      	push	{r7}
 8000340:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000342:	bf00      	nop
 8000344:	46bd      	mov	sp, r7
 8000346:	bc80      	pop	{r7}
 8000348:	4770      	bx	lr

0800034a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800034a:	b480      	push	{r7}
 800034c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800034e:	bf00      	nop
 8000350:	46bd      	mov	sp, r7
 8000352:	bc80      	pop	{r7}
 8000354:	4770      	bx	lr

08000356 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000356:	b580      	push	{r7, lr}
 8000358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800035a:	f000 f865 	bl	8000428 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800035e:	bf00      	nop
 8000360:	bd80      	pop	{r7, pc}
	...

08000364 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b086      	sub	sp, #24
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800036c:	4a14      	ldr	r2, [pc, #80]	; (80003c0 <_sbrk+0x5c>)
 800036e:	4b15      	ldr	r3, [pc, #84]	; (80003c4 <_sbrk+0x60>)
 8000370:	1ad3      	subs	r3, r2, r3
 8000372:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000374:	697b      	ldr	r3, [r7, #20]
 8000376:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000378:	4b13      	ldr	r3, [pc, #76]	; (80003c8 <_sbrk+0x64>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	2b00      	cmp	r3, #0
 800037e:	d102      	bne.n	8000386 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000380:	4b11      	ldr	r3, [pc, #68]	; (80003c8 <_sbrk+0x64>)
 8000382:	4a12      	ldr	r2, [pc, #72]	; (80003cc <_sbrk+0x68>)
 8000384:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000386:	4b10      	ldr	r3, [pc, #64]	; (80003c8 <_sbrk+0x64>)
 8000388:	681a      	ldr	r2, [r3, #0]
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	4413      	add	r3, r2
 800038e:	693a      	ldr	r2, [r7, #16]
 8000390:	429a      	cmp	r2, r3
 8000392:	d207      	bcs.n	80003a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000394:	f000 f888 	bl	80004a8 <__errno>
 8000398:	4603      	mov	r3, r0
 800039a:	220c      	movs	r2, #12
 800039c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800039e:	f04f 33ff 	mov.w	r3, #4294967295
 80003a2:	e009      	b.n	80003b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80003a4:	4b08      	ldr	r3, [pc, #32]	; (80003c8 <_sbrk+0x64>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80003aa:	4b07      	ldr	r3, [pc, #28]	; (80003c8 <_sbrk+0x64>)
 80003ac:	681a      	ldr	r2, [r3, #0]
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	4413      	add	r3, r2
 80003b2:	4a05      	ldr	r2, [pc, #20]	; (80003c8 <_sbrk+0x64>)
 80003b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80003b6:	68fb      	ldr	r3, [r7, #12]
}
 80003b8:	4618      	mov	r0, r3
 80003ba:	3718      	adds	r7, #24
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	20002800 	.word	0x20002800
 80003c4:	00000400 	.word	0x00000400
 80003c8:	20000084 	.word	0x20000084
 80003cc:	200000a0 	.word	0x200000a0

080003d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003d4:	bf00      	nop
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bc80      	pop	{r7}
 80003da:	4770      	bx	lr

080003dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80003dc:	f7ff fff8 	bl	80003d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003e0:	480b      	ldr	r0, [pc, #44]	; (8000410 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80003e2:	490c      	ldr	r1, [pc, #48]	; (8000414 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80003e4:	4a0c      	ldr	r2, [pc, #48]	; (8000418 <LoopFillZerobss+0x16>)
  movs r3, #0
 80003e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003e8:	e002      	b.n	80003f0 <LoopCopyDataInit>

080003ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ee:	3304      	adds	r3, #4

080003f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003f4:	d3f9      	bcc.n	80003ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003f6:	4a09      	ldr	r2, [pc, #36]	; (800041c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80003f8:	4c09      	ldr	r4, [pc, #36]	; (8000420 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80003fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003fc:	e001      	b.n	8000402 <LoopFillZerobss>

080003fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000400:	3204      	adds	r2, #4

08000402 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000402:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000404:	d3fb      	bcc.n	80003fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000406:	f000 f855 	bl	80004b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800040a:	f7ff ff65 	bl	80002d8 <main>
  bx lr
 800040e:	4770      	bx	lr
  ldr r0, =_sdata
 8000410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000414:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000418:	08000e54 	.word	0x08000e54
  ldr r2, =_sbss
 800041c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000420:	2000009c 	.word	0x2000009c

08000424 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000424:	e7fe      	b.n	8000424 <ADC1_2_IRQHandler>
	...

08000428 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800042c:	4b05      	ldr	r3, [pc, #20]	; (8000444 <HAL_IncTick+0x1c>)
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	461a      	mov	r2, r3
 8000432:	4b05      	ldr	r3, [pc, #20]	; (8000448 <HAL_IncTick+0x20>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	4413      	add	r3, r2
 8000438:	4a03      	ldr	r2, [pc, #12]	; (8000448 <HAL_IncTick+0x20>)
 800043a:	6013      	str	r3, [r2, #0]
}
 800043c:	bf00      	nop
 800043e:	46bd      	mov	sp, r7
 8000440:	bc80      	pop	{r7}
 8000442:	4770      	bx	lr
 8000444:	20000000 	.word	0x20000000
 8000448:	20000088 	.word	0x20000088

0800044c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
  return uwTick;
 8000450:	4b02      	ldr	r3, [pc, #8]	; (800045c <HAL_GetTick+0x10>)
 8000452:	681b      	ldr	r3, [r3, #0]
}
 8000454:	4618      	mov	r0, r3
 8000456:	46bd      	mov	sp, r7
 8000458:	bc80      	pop	{r7}
 800045a:	4770      	bx	lr
 800045c:	20000088 	.word	0x20000088

08000460 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b084      	sub	sp, #16
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000468:	f7ff fff0 	bl	800044c <HAL_GetTick>
 800046c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000478:	d005      	beq.n	8000486 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800047a:	4b0a      	ldr	r3, [pc, #40]	; (80004a4 <HAL_Delay+0x44>)
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	461a      	mov	r2, r3
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	4413      	add	r3, r2
 8000484:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000486:	bf00      	nop
 8000488:	f7ff ffe0 	bl	800044c <HAL_GetTick>
 800048c:	4602      	mov	r2, r0
 800048e:	68bb      	ldr	r3, [r7, #8]
 8000490:	1ad3      	subs	r3, r2, r3
 8000492:	68fa      	ldr	r2, [r7, #12]
 8000494:	429a      	cmp	r2, r3
 8000496:	d8f7      	bhi.n	8000488 <HAL_Delay+0x28>
  {
  }
}
 8000498:	bf00      	nop
 800049a:	bf00      	nop
 800049c:	3710      	adds	r7, #16
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	20000000 	.word	0x20000000

080004a8 <__errno>:
 80004a8:	4b01      	ldr	r3, [pc, #4]	; (80004b0 <__errno+0x8>)
 80004aa:	6818      	ldr	r0, [r3, #0]
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	20000004 	.word	0x20000004

080004b4 <__libc_init_array>:
 80004b4:	b570      	push	{r4, r5, r6, lr}
 80004b6:	2600      	movs	r6, #0
 80004b8:	4d0c      	ldr	r5, [pc, #48]	; (80004ec <__libc_init_array+0x38>)
 80004ba:	4c0d      	ldr	r4, [pc, #52]	; (80004f0 <__libc_init_array+0x3c>)
 80004bc:	1b64      	subs	r4, r4, r5
 80004be:	10a4      	asrs	r4, r4, #2
 80004c0:	42a6      	cmp	r6, r4
 80004c2:	d109      	bne.n	80004d8 <__libc_init_array+0x24>
 80004c4:	f000 fc94 	bl	8000df0 <_init>
 80004c8:	2600      	movs	r6, #0
 80004ca:	4d0a      	ldr	r5, [pc, #40]	; (80004f4 <__libc_init_array+0x40>)
 80004cc:	4c0a      	ldr	r4, [pc, #40]	; (80004f8 <__libc_init_array+0x44>)
 80004ce:	1b64      	subs	r4, r4, r5
 80004d0:	10a4      	asrs	r4, r4, #2
 80004d2:	42a6      	cmp	r6, r4
 80004d4:	d105      	bne.n	80004e2 <__libc_init_array+0x2e>
 80004d6:	bd70      	pop	{r4, r5, r6, pc}
 80004d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80004dc:	4798      	blx	r3
 80004de:	3601      	adds	r6, #1
 80004e0:	e7ee      	b.n	80004c0 <__libc_init_array+0xc>
 80004e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80004e6:	4798      	blx	r3
 80004e8:	3601      	adds	r6, #1
 80004ea:	e7f2      	b.n	80004d2 <__libc_init_array+0x1e>
 80004ec:	08000e4c 	.word	0x08000e4c
 80004f0:	08000e4c 	.word	0x08000e4c
 80004f4:	08000e4c 	.word	0x08000e4c
 80004f8:	08000e50 	.word	0x08000e50

080004fc <siprintf>:
 80004fc:	b40e      	push	{r1, r2, r3}
 80004fe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000502:	b500      	push	{lr}
 8000504:	b09c      	sub	sp, #112	; 0x70
 8000506:	ab1d      	add	r3, sp, #116	; 0x74
 8000508:	9002      	str	r0, [sp, #8]
 800050a:	9006      	str	r0, [sp, #24]
 800050c:	9107      	str	r1, [sp, #28]
 800050e:	9104      	str	r1, [sp, #16]
 8000510:	4808      	ldr	r0, [pc, #32]	; (8000534 <siprintf+0x38>)
 8000512:	4909      	ldr	r1, [pc, #36]	; (8000538 <siprintf+0x3c>)
 8000514:	f853 2b04 	ldr.w	r2, [r3], #4
 8000518:	9105      	str	r1, [sp, #20]
 800051a:	6800      	ldr	r0, [r0, #0]
 800051c:	a902      	add	r1, sp, #8
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	f000 f868 	bl	80005f4 <_svfiprintf_r>
 8000524:	2200      	movs	r2, #0
 8000526:	9b02      	ldr	r3, [sp, #8]
 8000528:	701a      	strb	r2, [r3, #0]
 800052a:	b01c      	add	sp, #112	; 0x70
 800052c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000530:	b003      	add	sp, #12
 8000532:	4770      	bx	lr
 8000534:	20000004 	.word	0x20000004
 8000538:	ffff0208 	.word	0xffff0208

0800053c <__ssputs_r>:
 800053c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000540:	688e      	ldr	r6, [r1, #8]
 8000542:	4682      	mov	sl, r0
 8000544:	429e      	cmp	r6, r3
 8000546:	460c      	mov	r4, r1
 8000548:	4690      	mov	r8, r2
 800054a:	461f      	mov	r7, r3
 800054c:	d838      	bhi.n	80005c0 <__ssputs_r+0x84>
 800054e:	898a      	ldrh	r2, [r1, #12]
 8000550:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000554:	d032      	beq.n	80005bc <__ssputs_r+0x80>
 8000556:	6825      	ldr	r5, [r4, #0]
 8000558:	6909      	ldr	r1, [r1, #16]
 800055a:	3301      	adds	r3, #1
 800055c:	eba5 0901 	sub.w	r9, r5, r1
 8000560:	6965      	ldr	r5, [r4, #20]
 8000562:	444b      	add	r3, r9
 8000564:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000568:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800056c:	106d      	asrs	r5, r5, #1
 800056e:	429d      	cmp	r5, r3
 8000570:	bf38      	it	cc
 8000572:	461d      	movcc	r5, r3
 8000574:	0553      	lsls	r3, r2, #21
 8000576:	d531      	bpl.n	80005dc <__ssputs_r+0xa0>
 8000578:	4629      	mov	r1, r5
 800057a:	f000 fb6f 	bl	8000c5c <_malloc_r>
 800057e:	4606      	mov	r6, r0
 8000580:	b950      	cbnz	r0, 8000598 <__ssputs_r+0x5c>
 8000582:	230c      	movs	r3, #12
 8000584:	f04f 30ff 	mov.w	r0, #4294967295
 8000588:	f8ca 3000 	str.w	r3, [sl]
 800058c:	89a3      	ldrh	r3, [r4, #12]
 800058e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000592:	81a3      	strh	r3, [r4, #12]
 8000594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000598:	464a      	mov	r2, r9
 800059a:	6921      	ldr	r1, [r4, #16]
 800059c:	f000 face 	bl	8000b3c <memcpy>
 80005a0:	89a3      	ldrh	r3, [r4, #12]
 80005a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80005a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005aa:	81a3      	strh	r3, [r4, #12]
 80005ac:	6126      	str	r6, [r4, #16]
 80005ae:	444e      	add	r6, r9
 80005b0:	6026      	str	r6, [r4, #0]
 80005b2:	463e      	mov	r6, r7
 80005b4:	6165      	str	r5, [r4, #20]
 80005b6:	eba5 0509 	sub.w	r5, r5, r9
 80005ba:	60a5      	str	r5, [r4, #8]
 80005bc:	42be      	cmp	r6, r7
 80005be:	d900      	bls.n	80005c2 <__ssputs_r+0x86>
 80005c0:	463e      	mov	r6, r7
 80005c2:	4632      	mov	r2, r6
 80005c4:	4641      	mov	r1, r8
 80005c6:	6820      	ldr	r0, [r4, #0]
 80005c8:	f000 fac6 	bl	8000b58 <memmove>
 80005cc:	68a3      	ldr	r3, [r4, #8]
 80005ce:	2000      	movs	r0, #0
 80005d0:	1b9b      	subs	r3, r3, r6
 80005d2:	60a3      	str	r3, [r4, #8]
 80005d4:	6823      	ldr	r3, [r4, #0]
 80005d6:	4433      	add	r3, r6
 80005d8:	6023      	str	r3, [r4, #0]
 80005da:	e7db      	b.n	8000594 <__ssputs_r+0x58>
 80005dc:	462a      	mov	r2, r5
 80005de:	f000 fbb1 	bl	8000d44 <_realloc_r>
 80005e2:	4606      	mov	r6, r0
 80005e4:	2800      	cmp	r0, #0
 80005e6:	d1e1      	bne.n	80005ac <__ssputs_r+0x70>
 80005e8:	4650      	mov	r0, sl
 80005ea:	6921      	ldr	r1, [r4, #16]
 80005ec:	f000 face 	bl	8000b8c <_free_r>
 80005f0:	e7c7      	b.n	8000582 <__ssputs_r+0x46>
	...

080005f4 <_svfiprintf_r>:
 80005f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005f8:	4698      	mov	r8, r3
 80005fa:	898b      	ldrh	r3, [r1, #12]
 80005fc:	4607      	mov	r7, r0
 80005fe:	061b      	lsls	r3, r3, #24
 8000600:	460d      	mov	r5, r1
 8000602:	4614      	mov	r4, r2
 8000604:	b09d      	sub	sp, #116	; 0x74
 8000606:	d50e      	bpl.n	8000626 <_svfiprintf_r+0x32>
 8000608:	690b      	ldr	r3, [r1, #16]
 800060a:	b963      	cbnz	r3, 8000626 <_svfiprintf_r+0x32>
 800060c:	2140      	movs	r1, #64	; 0x40
 800060e:	f000 fb25 	bl	8000c5c <_malloc_r>
 8000612:	6028      	str	r0, [r5, #0]
 8000614:	6128      	str	r0, [r5, #16]
 8000616:	b920      	cbnz	r0, 8000622 <_svfiprintf_r+0x2e>
 8000618:	230c      	movs	r3, #12
 800061a:	603b      	str	r3, [r7, #0]
 800061c:	f04f 30ff 	mov.w	r0, #4294967295
 8000620:	e0d1      	b.n	80007c6 <_svfiprintf_r+0x1d2>
 8000622:	2340      	movs	r3, #64	; 0x40
 8000624:	616b      	str	r3, [r5, #20]
 8000626:	2300      	movs	r3, #0
 8000628:	9309      	str	r3, [sp, #36]	; 0x24
 800062a:	2320      	movs	r3, #32
 800062c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000630:	2330      	movs	r3, #48	; 0x30
 8000632:	f04f 0901 	mov.w	r9, #1
 8000636:	f8cd 800c 	str.w	r8, [sp, #12]
 800063a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80007e0 <_svfiprintf_r+0x1ec>
 800063e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000642:	4623      	mov	r3, r4
 8000644:	469a      	mov	sl, r3
 8000646:	f813 2b01 	ldrb.w	r2, [r3], #1
 800064a:	b10a      	cbz	r2, 8000650 <_svfiprintf_r+0x5c>
 800064c:	2a25      	cmp	r2, #37	; 0x25
 800064e:	d1f9      	bne.n	8000644 <_svfiprintf_r+0x50>
 8000650:	ebba 0b04 	subs.w	fp, sl, r4
 8000654:	d00b      	beq.n	800066e <_svfiprintf_r+0x7a>
 8000656:	465b      	mov	r3, fp
 8000658:	4622      	mov	r2, r4
 800065a:	4629      	mov	r1, r5
 800065c:	4638      	mov	r0, r7
 800065e:	f7ff ff6d 	bl	800053c <__ssputs_r>
 8000662:	3001      	adds	r0, #1
 8000664:	f000 80aa 	beq.w	80007bc <_svfiprintf_r+0x1c8>
 8000668:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800066a:	445a      	add	r2, fp
 800066c:	9209      	str	r2, [sp, #36]	; 0x24
 800066e:	f89a 3000 	ldrb.w	r3, [sl]
 8000672:	2b00      	cmp	r3, #0
 8000674:	f000 80a2 	beq.w	80007bc <_svfiprintf_r+0x1c8>
 8000678:	2300      	movs	r3, #0
 800067a:	f04f 32ff 	mov.w	r2, #4294967295
 800067e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000682:	f10a 0a01 	add.w	sl, sl, #1
 8000686:	9304      	str	r3, [sp, #16]
 8000688:	9307      	str	r3, [sp, #28]
 800068a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800068e:	931a      	str	r3, [sp, #104]	; 0x68
 8000690:	4654      	mov	r4, sl
 8000692:	2205      	movs	r2, #5
 8000694:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000698:	4851      	ldr	r0, [pc, #324]	; (80007e0 <_svfiprintf_r+0x1ec>)
 800069a:	f000 fa41 	bl	8000b20 <memchr>
 800069e:	9a04      	ldr	r2, [sp, #16]
 80006a0:	b9d8      	cbnz	r0, 80006da <_svfiprintf_r+0xe6>
 80006a2:	06d0      	lsls	r0, r2, #27
 80006a4:	bf44      	itt	mi
 80006a6:	2320      	movmi	r3, #32
 80006a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80006ac:	0711      	lsls	r1, r2, #28
 80006ae:	bf44      	itt	mi
 80006b0:	232b      	movmi	r3, #43	; 0x2b
 80006b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80006b6:	f89a 3000 	ldrb.w	r3, [sl]
 80006ba:	2b2a      	cmp	r3, #42	; 0x2a
 80006bc:	d015      	beq.n	80006ea <_svfiprintf_r+0xf6>
 80006be:	4654      	mov	r4, sl
 80006c0:	2000      	movs	r0, #0
 80006c2:	f04f 0c0a 	mov.w	ip, #10
 80006c6:	9a07      	ldr	r2, [sp, #28]
 80006c8:	4621      	mov	r1, r4
 80006ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80006ce:	3b30      	subs	r3, #48	; 0x30
 80006d0:	2b09      	cmp	r3, #9
 80006d2:	d94e      	bls.n	8000772 <_svfiprintf_r+0x17e>
 80006d4:	b1b0      	cbz	r0, 8000704 <_svfiprintf_r+0x110>
 80006d6:	9207      	str	r2, [sp, #28]
 80006d8:	e014      	b.n	8000704 <_svfiprintf_r+0x110>
 80006da:	eba0 0308 	sub.w	r3, r0, r8
 80006de:	fa09 f303 	lsl.w	r3, r9, r3
 80006e2:	4313      	orrs	r3, r2
 80006e4:	46a2      	mov	sl, r4
 80006e6:	9304      	str	r3, [sp, #16]
 80006e8:	e7d2      	b.n	8000690 <_svfiprintf_r+0x9c>
 80006ea:	9b03      	ldr	r3, [sp, #12]
 80006ec:	1d19      	adds	r1, r3, #4
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	9103      	str	r1, [sp, #12]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	bfbb      	ittet	lt
 80006f6:	425b      	neglt	r3, r3
 80006f8:	f042 0202 	orrlt.w	r2, r2, #2
 80006fc:	9307      	strge	r3, [sp, #28]
 80006fe:	9307      	strlt	r3, [sp, #28]
 8000700:	bfb8      	it	lt
 8000702:	9204      	strlt	r2, [sp, #16]
 8000704:	7823      	ldrb	r3, [r4, #0]
 8000706:	2b2e      	cmp	r3, #46	; 0x2e
 8000708:	d10c      	bne.n	8000724 <_svfiprintf_r+0x130>
 800070a:	7863      	ldrb	r3, [r4, #1]
 800070c:	2b2a      	cmp	r3, #42	; 0x2a
 800070e:	d135      	bne.n	800077c <_svfiprintf_r+0x188>
 8000710:	9b03      	ldr	r3, [sp, #12]
 8000712:	3402      	adds	r4, #2
 8000714:	1d1a      	adds	r2, r3, #4
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	9203      	str	r2, [sp, #12]
 800071a:	2b00      	cmp	r3, #0
 800071c:	bfb8      	it	lt
 800071e:	f04f 33ff 	movlt.w	r3, #4294967295
 8000722:	9305      	str	r3, [sp, #20]
 8000724:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80007e4 <_svfiprintf_r+0x1f0>
 8000728:	2203      	movs	r2, #3
 800072a:	4650      	mov	r0, sl
 800072c:	7821      	ldrb	r1, [r4, #0]
 800072e:	f000 f9f7 	bl	8000b20 <memchr>
 8000732:	b140      	cbz	r0, 8000746 <_svfiprintf_r+0x152>
 8000734:	2340      	movs	r3, #64	; 0x40
 8000736:	eba0 000a 	sub.w	r0, r0, sl
 800073a:	fa03 f000 	lsl.w	r0, r3, r0
 800073e:	9b04      	ldr	r3, [sp, #16]
 8000740:	3401      	adds	r4, #1
 8000742:	4303      	orrs	r3, r0
 8000744:	9304      	str	r3, [sp, #16]
 8000746:	f814 1b01 	ldrb.w	r1, [r4], #1
 800074a:	2206      	movs	r2, #6
 800074c:	4826      	ldr	r0, [pc, #152]	; (80007e8 <_svfiprintf_r+0x1f4>)
 800074e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000752:	f000 f9e5 	bl	8000b20 <memchr>
 8000756:	2800      	cmp	r0, #0
 8000758:	d038      	beq.n	80007cc <_svfiprintf_r+0x1d8>
 800075a:	4b24      	ldr	r3, [pc, #144]	; (80007ec <_svfiprintf_r+0x1f8>)
 800075c:	bb1b      	cbnz	r3, 80007a6 <_svfiprintf_r+0x1b2>
 800075e:	9b03      	ldr	r3, [sp, #12]
 8000760:	3307      	adds	r3, #7
 8000762:	f023 0307 	bic.w	r3, r3, #7
 8000766:	3308      	adds	r3, #8
 8000768:	9303      	str	r3, [sp, #12]
 800076a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800076c:	4433      	add	r3, r6
 800076e:	9309      	str	r3, [sp, #36]	; 0x24
 8000770:	e767      	b.n	8000642 <_svfiprintf_r+0x4e>
 8000772:	460c      	mov	r4, r1
 8000774:	2001      	movs	r0, #1
 8000776:	fb0c 3202 	mla	r2, ip, r2, r3
 800077a:	e7a5      	b.n	80006c8 <_svfiprintf_r+0xd4>
 800077c:	2300      	movs	r3, #0
 800077e:	f04f 0c0a 	mov.w	ip, #10
 8000782:	4619      	mov	r1, r3
 8000784:	3401      	adds	r4, #1
 8000786:	9305      	str	r3, [sp, #20]
 8000788:	4620      	mov	r0, r4
 800078a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800078e:	3a30      	subs	r2, #48	; 0x30
 8000790:	2a09      	cmp	r2, #9
 8000792:	d903      	bls.n	800079c <_svfiprintf_r+0x1a8>
 8000794:	2b00      	cmp	r3, #0
 8000796:	d0c5      	beq.n	8000724 <_svfiprintf_r+0x130>
 8000798:	9105      	str	r1, [sp, #20]
 800079a:	e7c3      	b.n	8000724 <_svfiprintf_r+0x130>
 800079c:	4604      	mov	r4, r0
 800079e:	2301      	movs	r3, #1
 80007a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80007a4:	e7f0      	b.n	8000788 <_svfiprintf_r+0x194>
 80007a6:	ab03      	add	r3, sp, #12
 80007a8:	9300      	str	r3, [sp, #0]
 80007aa:	462a      	mov	r2, r5
 80007ac:	4638      	mov	r0, r7
 80007ae:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <_svfiprintf_r+0x1fc>)
 80007b0:	a904      	add	r1, sp, #16
 80007b2:	f3af 8000 	nop.w
 80007b6:	1c42      	adds	r2, r0, #1
 80007b8:	4606      	mov	r6, r0
 80007ba:	d1d6      	bne.n	800076a <_svfiprintf_r+0x176>
 80007bc:	89ab      	ldrh	r3, [r5, #12]
 80007be:	065b      	lsls	r3, r3, #25
 80007c0:	f53f af2c 	bmi.w	800061c <_svfiprintf_r+0x28>
 80007c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80007c6:	b01d      	add	sp, #116	; 0x74
 80007c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80007cc:	ab03      	add	r3, sp, #12
 80007ce:	9300      	str	r3, [sp, #0]
 80007d0:	462a      	mov	r2, r5
 80007d2:	4638      	mov	r0, r7
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <_svfiprintf_r+0x1fc>)
 80007d6:	a904      	add	r1, sp, #16
 80007d8:	f000 f87c 	bl	80008d4 <_printf_i>
 80007dc:	e7eb      	b.n	80007b6 <_svfiprintf_r+0x1c2>
 80007de:	bf00      	nop
 80007e0:	08000e19 	.word	0x08000e19
 80007e4:	08000e1f 	.word	0x08000e1f
 80007e8:	08000e23 	.word	0x08000e23
 80007ec:	00000000 	.word	0x00000000
 80007f0:	0800053d 	.word	0x0800053d

080007f4 <_printf_common>:
 80007f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007f8:	4616      	mov	r6, r2
 80007fa:	4699      	mov	r9, r3
 80007fc:	688a      	ldr	r2, [r1, #8]
 80007fe:	690b      	ldr	r3, [r1, #16]
 8000800:	4607      	mov	r7, r0
 8000802:	4293      	cmp	r3, r2
 8000804:	bfb8      	it	lt
 8000806:	4613      	movlt	r3, r2
 8000808:	6033      	str	r3, [r6, #0]
 800080a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800080e:	460c      	mov	r4, r1
 8000810:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000814:	b10a      	cbz	r2, 800081a <_printf_common+0x26>
 8000816:	3301      	adds	r3, #1
 8000818:	6033      	str	r3, [r6, #0]
 800081a:	6823      	ldr	r3, [r4, #0]
 800081c:	0699      	lsls	r1, r3, #26
 800081e:	bf42      	ittt	mi
 8000820:	6833      	ldrmi	r3, [r6, #0]
 8000822:	3302      	addmi	r3, #2
 8000824:	6033      	strmi	r3, [r6, #0]
 8000826:	6825      	ldr	r5, [r4, #0]
 8000828:	f015 0506 	ands.w	r5, r5, #6
 800082c:	d106      	bne.n	800083c <_printf_common+0x48>
 800082e:	f104 0a19 	add.w	sl, r4, #25
 8000832:	68e3      	ldr	r3, [r4, #12]
 8000834:	6832      	ldr	r2, [r6, #0]
 8000836:	1a9b      	subs	r3, r3, r2
 8000838:	42ab      	cmp	r3, r5
 800083a:	dc28      	bgt.n	800088e <_printf_common+0x9a>
 800083c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000840:	1e13      	subs	r3, r2, #0
 8000842:	6822      	ldr	r2, [r4, #0]
 8000844:	bf18      	it	ne
 8000846:	2301      	movne	r3, #1
 8000848:	0692      	lsls	r2, r2, #26
 800084a:	d42d      	bmi.n	80008a8 <_printf_common+0xb4>
 800084c:	4649      	mov	r1, r9
 800084e:	4638      	mov	r0, r7
 8000850:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000854:	47c0      	blx	r8
 8000856:	3001      	adds	r0, #1
 8000858:	d020      	beq.n	800089c <_printf_common+0xa8>
 800085a:	6823      	ldr	r3, [r4, #0]
 800085c:	68e5      	ldr	r5, [r4, #12]
 800085e:	f003 0306 	and.w	r3, r3, #6
 8000862:	2b04      	cmp	r3, #4
 8000864:	bf18      	it	ne
 8000866:	2500      	movne	r5, #0
 8000868:	6832      	ldr	r2, [r6, #0]
 800086a:	f04f 0600 	mov.w	r6, #0
 800086e:	68a3      	ldr	r3, [r4, #8]
 8000870:	bf08      	it	eq
 8000872:	1aad      	subeq	r5, r5, r2
 8000874:	6922      	ldr	r2, [r4, #16]
 8000876:	bf08      	it	eq
 8000878:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800087c:	4293      	cmp	r3, r2
 800087e:	bfc4      	itt	gt
 8000880:	1a9b      	subgt	r3, r3, r2
 8000882:	18ed      	addgt	r5, r5, r3
 8000884:	341a      	adds	r4, #26
 8000886:	42b5      	cmp	r5, r6
 8000888:	d11a      	bne.n	80008c0 <_printf_common+0xcc>
 800088a:	2000      	movs	r0, #0
 800088c:	e008      	b.n	80008a0 <_printf_common+0xac>
 800088e:	2301      	movs	r3, #1
 8000890:	4652      	mov	r2, sl
 8000892:	4649      	mov	r1, r9
 8000894:	4638      	mov	r0, r7
 8000896:	47c0      	blx	r8
 8000898:	3001      	adds	r0, #1
 800089a:	d103      	bne.n	80008a4 <_printf_common+0xb0>
 800089c:	f04f 30ff 	mov.w	r0, #4294967295
 80008a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008a4:	3501      	adds	r5, #1
 80008a6:	e7c4      	b.n	8000832 <_printf_common+0x3e>
 80008a8:	2030      	movs	r0, #48	; 0x30
 80008aa:	18e1      	adds	r1, r4, r3
 80008ac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80008b0:	1c5a      	adds	r2, r3, #1
 80008b2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80008b6:	4422      	add	r2, r4
 80008b8:	3302      	adds	r3, #2
 80008ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80008be:	e7c5      	b.n	800084c <_printf_common+0x58>
 80008c0:	2301      	movs	r3, #1
 80008c2:	4622      	mov	r2, r4
 80008c4:	4649      	mov	r1, r9
 80008c6:	4638      	mov	r0, r7
 80008c8:	47c0      	blx	r8
 80008ca:	3001      	adds	r0, #1
 80008cc:	d0e6      	beq.n	800089c <_printf_common+0xa8>
 80008ce:	3601      	adds	r6, #1
 80008d0:	e7d9      	b.n	8000886 <_printf_common+0x92>
	...

080008d4 <_printf_i>:
 80008d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80008d8:	7e0f      	ldrb	r7, [r1, #24]
 80008da:	4691      	mov	r9, r2
 80008dc:	2f78      	cmp	r7, #120	; 0x78
 80008de:	4680      	mov	r8, r0
 80008e0:	460c      	mov	r4, r1
 80008e2:	469a      	mov	sl, r3
 80008e4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80008e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80008ea:	d807      	bhi.n	80008fc <_printf_i+0x28>
 80008ec:	2f62      	cmp	r7, #98	; 0x62
 80008ee:	d80a      	bhi.n	8000906 <_printf_i+0x32>
 80008f0:	2f00      	cmp	r7, #0
 80008f2:	f000 80d9 	beq.w	8000aa8 <_printf_i+0x1d4>
 80008f6:	2f58      	cmp	r7, #88	; 0x58
 80008f8:	f000 80a4 	beq.w	8000a44 <_printf_i+0x170>
 80008fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000900:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000904:	e03a      	b.n	800097c <_printf_i+0xa8>
 8000906:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800090a:	2b15      	cmp	r3, #21
 800090c:	d8f6      	bhi.n	80008fc <_printf_i+0x28>
 800090e:	a101      	add	r1, pc, #4	; (adr r1, 8000914 <_printf_i+0x40>)
 8000910:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000914:	0800096d 	.word	0x0800096d
 8000918:	08000981 	.word	0x08000981
 800091c:	080008fd 	.word	0x080008fd
 8000920:	080008fd 	.word	0x080008fd
 8000924:	080008fd 	.word	0x080008fd
 8000928:	080008fd 	.word	0x080008fd
 800092c:	08000981 	.word	0x08000981
 8000930:	080008fd 	.word	0x080008fd
 8000934:	080008fd 	.word	0x080008fd
 8000938:	080008fd 	.word	0x080008fd
 800093c:	080008fd 	.word	0x080008fd
 8000940:	08000a8f 	.word	0x08000a8f
 8000944:	080009b1 	.word	0x080009b1
 8000948:	08000a71 	.word	0x08000a71
 800094c:	080008fd 	.word	0x080008fd
 8000950:	080008fd 	.word	0x080008fd
 8000954:	08000ab1 	.word	0x08000ab1
 8000958:	080008fd 	.word	0x080008fd
 800095c:	080009b1 	.word	0x080009b1
 8000960:	080008fd 	.word	0x080008fd
 8000964:	080008fd 	.word	0x080008fd
 8000968:	08000a79 	.word	0x08000a79
 800096c:	682b      	ldr	r3, [r5, #0]
 800096e:	1d1a      	adds	r2, r3, #4
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	602a      	str	r2, [r5, #0]
 8000974:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000978:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800097c:	2301      	movs	r3, #1
 800097e:	e0a4      	b.n	8000aca <_printf_i+0x1f6>
 8000980:	6820      	ldr	r0, [r4, #0]
 8000982:	6829      	ldr	r1, [r5, #0]
 8000984:	0606      	lsls	r6, r0, #24
 8000986:	f101 0304 	add.w	r3, r1, #4
 800098a:	d50a      	bpl.n	80009a2 <_printf_i+0xce>
 800098c:	680e      	ldr	r6, [r1, #0]
 800098e:	602b      	str	r3, [r5, #0]
 8000990:	2e00      	cmp	r6, #0
 8000992:	da03      	bge.n	800099c <_printf_i+0xc8>
 8000994:	232d      	movs	r3, #45	; 0x2d
 8000996:	4276      	negs	r6, r6
 8000998:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800099c:	230a      	movs	r3, #10
 800099e:	485e      	ldr	r0, [pc, #376]	; (8000b18 <_printf_i+0x244>)
 80009a0:	e019      	b.n	80009d6 <_printf_i+0x102>
 80009a2:	680e      	ldr	r6, [r1, #0]
 80009a4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80009a8:	602b      	str	r3, [r5, #0]
 80009aa:	bf18      	it	ne
 80009ac:	b236      	sxthne	r6, r6
 80009ae:	e7ef      	b.n	8000990 <_printf_i+0xbc>
 80009b0:	682b      	ldr	r3, [r5, #0]
 80009b2:	6820      	ldr	r0, [r4, #0]
 80009b4:	1d19      	adds	r1, r3, #4
 80009b6:	6029      	str	r1, [r5, #0]
 80009b8:	0601      	lsls	r1, r0, #24
 80009ba:	d501      	bpl.n	80009c0 <_printf_i+0xec>
 80009bc:	681e      	ldr	r6, [r3, #0]
 80009be:	e002      	b.n	80009c6 <_printf_i+0xf2>
 80009c0:	0646      	lsls	r6, r0, #25
 80009c2:	d5fb      	bpl.n	80009bc <_printf_i+0xe8>
 80009c4:	881e      	ldrh	r6, [r3, #0]
 80009c6:	2f6f      	cmp	r7, #111	; 0x6f
 80009c8:	bf0c      	ite	eq
 80009ca:	2308      	moveq	r3, #8
 80009cc:	230a      	movne	r3, #10
 80009ce:	4852      	ldr	r0, [pc, #328]	; (8000b18 <_printf_i+0x244>)
 80009d0:	2100      	movs	r1, #0
 80009d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80009d6:	6865      	ldr	r5, [r4, #4]
 80009d8:	2d00      	cmp	r5, #0
 80009da:	bfa8      	it	ge
 80009dc:	6821      	ldrge	r1, [r4, #0]
 80009de:	60a5      	str	r5, [r4, #8]
 80009e0:	bfa4      	itt	ge
 80009e2:	f021 0104 	bicge.w	r1, r1, #4
 80009e6:	6021      	strge	r1, [r4, #0]
 80009e8:	b90e      	cbnz	r6, 80009ee <_printf_i+0x11a>
 80009ea:	2d00      	cmp	r5, #0
 80009ec:	d04d      	beq.n	8000a8a <_printf_i+0x1b6>
 80009ee:	4615      	mov	r5, r2
 80009f0:	fbb6 f1f3 	udiv	r1, r6, r3
 80009f4:	fb03 6711 	mls	r7, r3, r1, r6
 80009f8:	5dc7      	ldrb	r7, [r0, r7]
 80009fa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80009fe:	4637      	mov	r7, r6
 8000a00:	42bb      	cmp	r3, r7
 8000a02:	460e      	mov	r6, r1
 8000a04:	d9f4      	bls.n	80009f0 <_printf_i+0x11c>
 8000a06:	2b08      	cmp	r3, #8
 8000a08:	d10b      	bne.n	8000a22 <_printf_i+0x14e>
 8000a0a:	6823      	ldr	r3, [r4, #0]
 8000a0c:	07de      	lsls	r6, r3, #31
 8000a0e:	d508      	bpl.n	8000a22 <_printf_i+0x14e>
 8000a10:	6923      	ldr	r3, [r4, #16]
 8000a12:	6861      	ldr	r1, [r4, #4]
 8000a14:	4299      	cmp	r1, r3
 8000a16:	bfde      	ittt	le
 8000a18:	2330      	movle	r3, #48	; 0x30
 8000a1a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000a1e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8000a22:	1b52      	subs	r2, r2, r5
 8000a24:	6122      	str	r2, [r4, #16]
 8000a26:	464b      	mov	r3, r9
 8000a28:	4621      	mov	r1, r4
 8000a2a:	4640      	mov	r0, r8
 8000a2c:	f8cd a000 	str.w	sl, [sp]
 8000a30:	aa03      	add	r2, sp, #12
 8000a32:	f7ff fedf 	bl	80007f4 <_printf_common>
 8000a36:	3001      	adds	r0, #1
 8000a38:	d14c      	bne.n	8000ad4 <_printf_i+0x200>
 8000a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8000a3e:	b004      	add	sp, #16
 8000a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a44:	4834      	ldr	r0, [pc, #208]	; (8000b18 <_printf_i+0x244>)
 8000a46:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8000a4a:	6829      	ldr	r1, [r5, #0]
 8000a4c:	6823      	ldr	r3, [r4, #0]
 8000a4e:	f851 6b04 	ldr.w	r6, [r1], #4
 8000a52:	6029      	str	r1, [r5, #0]
 8000a54:	061d      	lsls	r5, r3, #24
 8000a56:	d514      	bpl.n	8000a82 <_printf_i+0x1ae>
 8000a58:	07df      	lsls	r7, r3, #31
 8000a5a:	bf44      	itt	mi
 8000a5c:	f043 0320 	orrmi.w	r3, r3, #32
 8000a60:	6023      	strmi	r3, [r4, #0]
 8000a62:	b91e      	cbnz	r6, 8000a6c <_printf_i+0x198>
 8000a64:	6823      	ldr	r3, [r4, #0]
 8000a66:	f023 0320 	bic.w	r3, r3, #32
 8000a6a:	6023      	str	r3, [r4, #0]
 8000a6c:	2310      	movs	r3, #16
 8000a6e:	e7af      	b.n	80009d0 <_printf_i+0xfc>
 8000a70:	6823      	ldr	r3, [r4, #0]
 8000a72:	f043 0320 	orr.w	r3, r3, #32
 8000a76:	6023      	str	r3, [r4, #0]
 8000a78:	2378      	movs	r3, #120	; 0x78
 8000a7a:	4828      	ldr	r0, [pc, #160]	; (8000b1c <_printf_i+0x248>)
 8000a7c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000a80:	e7e3      	b.n	8000a4a <_printf_i+0x176>
 8000a82:	0659      	lsls	r1, r3, #25
 8000a84:	bf48      	it	mi
 8000a86:	b2b6      	uxthmi	r6, r6
 8000a88:	e7e6      	b.n	8000a58 <_printf_i+0x184>
 8000a8a:	4615      	mov	r5, r2
 8000a8c:	e7bb      	b.n	8000a06 <_printf_i+0x132>
 8000a8e:	682b      	ldr	r3, [r5, #0]
 8000a90:	6826      	ldr	r6, [r4, #0]
 8000a92:	1d18      	adds	r0, r3, #4
 8000a94:	6961      	ldr	r1, [r4, #20]
 8000a96:	6028      	str	r0, [r5, #0]
 8000a98:	0635      	lsls	r5, r6, #24
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	d501      	bpl.n	8000aa2 <_printf_i+0x1ce>
 8000a9e:	6019      	str	r1, [r3, #0]
 8000aa0:	e002      	b.n	8000aa8 <_printf_i+0x1d4>
 8000aa2:	0670      	lsls	r0, r6, #25
 8000aa4:	d5fb      	bpl.n	8000a9e <_printf_i+0x1ca>
 8000aa6:	8019      	strh	r1, [r3, #0]
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	4615      	mov	r5, r2
 8000aac:	6123      	str	r3, [r4, #16]
 8000aae:	e7ba      	b.n	8000a26 <_printf_i+0x152>
 8000ab0:	682b      	ldr	r3, [r5, #0]
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	1d1a      	adds	r2, r3, #4
 8000ab6:	602a      	str	r2, [r5, #0]
 8000ab8:	681d      	ldr	r5, [r3, #0]
 8000aba:	6862      	ldr	r2, [r4, #4]
 8000abc:	4628      	mov	r0, r5
 8000abe:	f000 f82f 	bl	8000b20 <memchr>
 8000ac2:	b108      	cbz	r0, 8000ac8 <_printf_i+0x1f4>
 8000ac4:	1b40      	subs	r0, r0, r5
 8000ac6:	6060      	str	r0, [r4, #4]
 8000ac8:	6863      	ldr	r3, [r4, #4]
 8000aca:	6123      	str	r3, [r4, #16]
 8000acc:	2300      	movs	r3, #0
 8000ace:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000ad2:	e7a8      	b.n	8000a26 <_printf_i+0x152>
 8000ad4:	462a      	mov	r2, r5
 8000ad6:	4649      	mov	r1, r9
 8000ad8:	4640      	mov	r0, r8
 8000ada:	6923      	ldr	r3, [r4, #16]
 8000adc:	47d0      	blx	sl
 8000ade:	3001      	adds	r0, #1
 8000ae0:	d0ab      	beq.n	8000a3a <_printf_i+0x166>
 8000ae2:	6823      	ldr	r3, [r4, #0]
 8000ae4:	079b      	lsls	r3, r3, #30
 8000ae6:	d413      	bmi.n	8000b10 <_printf_i+0x23c>
 8000ae8:	68e0      	ldr	r0, [r4, #12]
 8000aea:	9b03      	ldr	r3, [sp, #12]
 8000aec:	4298      	cmp	r0, r3
 8000aee:	bfb8      	it	lt
 8000af0:	4618      	movlt	r0, r3
 8000af2:	e7a4      	b.n	8000a3e <_printf_i+0x16a>
 8000af4:	2301      	movs	r3, #1
 8000af6:	4632      	mov	r2, r6
 8000af8:	4649      	mov	r1, r9
 8000afa:	4640      	mov	r0, r8
 8000afc:	47d0      	blx	sl
 8000afe:	3001      	adds	r0, #1
 8000b00:	d09b      	beq.n	8000a3a <_printf_i+0x166>
 8000b02:	3501      	adds	r5, #1
 8000b04:	68e3      	ldr	r3, [r4, #12]
 8000b06:	9903      	ldr	r1, [sp, #12]
 8000b08:	1a5b      	subs	r3, r3, r1
 8000b0a:	42ab      	cmp	r3, r5
 8000b0c:	dcf2      	bgt.n	8000af4 <_printf_i+0x220>
 8000b0e:	e7eb      	b.n	8000ae8 <_printf_i+0x214>
 8000b10:	2500      	movs	r5, #0
 8000b12:	f104 0619 	add.w	r6, r4, #25
 8000b16:	e7f5      	b.n	8000b04 <_printf_i+0x230>
 8000b18:	08000e2a 	.word	0x08000e2a
 8000b1c:	08000e3b 	.word	0x08000e3b

08000b20 <memchr>:
 8000b20:	4603      	mov	r3, r0
 8000b22:	b510      	push	{r4, lr}
 8000b24:	b2c9      	uxtb	r1, r1
 8000b26:	4402      	add	r2, r0
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	d101      	bne.n	8000b32 <memchr+0x12>
 8000b2e:	2000      	movs	r0, #0
 8000b30:	e003      	b.n	8000b3a <memchr+0x1a>
 8000b32:	7804      	ldrb	r4, [r0, #0]
 8000b34:	3301      	adds	r3, #1
 8000b36:	428c      	cmp	r4, r1
 8000b38:	d1f6      	bne.n	8000b28 <memchr+0x8>
 8000b3a:	bd10      	pop	{r4, pc}

08000b3c <memcpy>:
 8000b3c:	440a      	add	r2, r1
 8000b3e:	4291      	cmp	r1, r2
 8000b40:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b44:	d100      	bne.n	8000b48 <memcpy+0xc>
 8000b46:	4770      	bx	lr
 8000b48:	b510      	push	{r4, lr}
 8000b4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000b4e:	4291      	cmp	r1, r2
 8000b50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000b54:	d1f9      	bne.n	8000b4a <memcpy+0xe>
 8000b56:	bd10      	pop	{r4, pc}

08000b58 <memmove>:
 8000b58:	4288      	cmp	r0, r1
 8000b5a:	b510      	push	{r4, lr}
 8000b5c:	eb01 0402 	add.w	r4, r1, r2
 8000b60:	d902      	bls.n	8000b68 <memmove+0x10>
 8000b62:	4284      	cmp	r4, r0
 8000b64:	4623      	mov	r3, r4
 8000b66:	d807      	bhi.n	8000b78 <memmove+0x20>
 8000b68:	1e43      	subs	r3, r0, #1
 8000b6a:	42a1      	cmp	r1, r4
 8000b6c:	d008      	beq.n	8000b80 <memmove+0x28>
 8000b6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000b72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000b76:	e7f8      	b.n	8000b6a <memmove+0x12>
 8000b78:	4601      	mov	r1, r0
 8000b7a:	4402      	add	r2, r0
 8000b7c:	428a      	cmp	r2, r1
 8000b7e:	d100      	bne.n	8000b82 <memmove+0x2a>
 8000b80:	bd10      	pop	{r4, pc}
 8000b82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000b86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000b8a:	e7f7      	b.n	8000b7c <memmove+0x24>

08000b8c <_free_r>:
 8000b8c:	b538      	push	{r3, r4, r5, lr}
 8000b8e:	4605      	mov	r5, r0
 8000b90:	2900      	cmp	r1, #0
 8000b92:	d040      	beq.n	8000c16 <_free_r+0x8a>
 8000b94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000b98:	1f0c      	subs	r4, r1, #4
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	bfb8      	it	lt
 8000b9e:	18e4      	addlt	r4, r4, r3
 8000ba0:	f000 f910 	bl	8000dc4 <__malloc_lock>
 8000ba4:	4a1c      	ldr	r2, [pc, #112]	; (8000c18 <_free_r+0x8c>)
 8000ba6:	6813      	ldr	r3, [r2, #0]
 8000ba8:	b933      	cbnz	r3, 8000bb8 <_free_r+0x2c>
 8000baa:	6063      	str	r3, [r4, #4]
 8000bac:	6014      	str	r4, [r2, #0]
 8000bae:	4628      	mov	r0, r5
 8000bb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000bb4:	f000 b90c 	b.w	8000dd0 <__malloc_unlock>
 8000bb8:	42a3      	cmp	r3, r4
 8000bba:	d908      	bls.n	8000bce <_free_r+0x42>
 8000bbc:	6820      	ldr	r0, [r4, #0]
 8000bbe:	1821      	adds	r1, r4, r0
 8000bc0:	428b      	cmp	r3, r1
 8000bc2:	bf01      	itttt	eq
 8000bc4:	6819      	ldreq	r1, [r3, #0]
 8000bc6:	685b      	ldreq	r3, [r3, #4]
 8000bc8:	1809      	addeq	r1, r1, r0
 8000bca:	6021      	streq	r1, [r4, #0]
 8000bcc:	e7ed      	b.n	8000baa <_free_r+0x1e>
 8000bce:	461a      	mov	r2, r3
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	b10b      	cbz	r3, 8000bd8 <_free_r+0x4c>
 8000bd4:	42a3      	cmp	r3, r4
 8000bd6:	d9fa      	bls.n	8000bce <_free_r+0x42>
 8000bd8:	6811      	ldr	r1, [r2, #0]
 8000bda:	1850      	adds	r0, r2, r1
 8000bdc:	42a0      	cmp	r0, r4
 8000bde:	d10b      	bne.n	8000bf8 <_free_r+0x6c>
 8000be0:	6820      	ldr	r0, [r4, #0]
 8000be2:	4401      	add	r1, r0
 8000be4:	1850      	adds	r0, r2, r1
 8000be6:	4283      	cmp	r3, r0
 8000be8:	6011      	str	r1, [r2, #0]
 8000bea:	d1e0      	bne.n	8000bae <_free_r+0x22>
 8000bec:	6818      	ldr	r0, [r3, #0]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	4401      	add	r1, r0
 8000bf2:	6011      	str	r1, [r2, #0]
 8000bf4:	6053      	str	r3, [r2, #4]
 8000bf6:	e7da      	b.n	8000bae <_free_r+0x22>
 8000bf8:	d902      	bls.n	8000c00 <_free_r+0x74>
 8000bfa:	230c      	movs	r3, #12
 8000bfc:	602b      	str	r3, [r5, #0]
 8000bfe:	e7d6      	b.n	8000bae <_free_r+0x22>
 8000c00:	6820      	ldr	r0, [r4, #0]
 8000c02:	1821      	adds	r1, r4, r0
 8000c04:	428b      	cmp	r3, r1
 8000c06:	bf01      	itttt	eq
 8000c08:	6819      	ldreq	r1, [r3, #0]
 8000c0a:	685b      	ldreq	r3, [r3, #4]
 8000c0c:	1809      	addeq	r1, r1, r0
 8000c0e:	6021      	streq	r1, [r4, #0]
 8000c10:	6063      	str	r3, [r4, #4]
 8000c12:	6054      	str	r4, [r2, #4]
 8000c14:	e7cb      	b.n	8000bae <_free_r+0x22>
 8000c16:	bd38      	pop	{r3, r4, r5, pc}
 8000c18:	2000008c 	.word	0x2000008c

08000c1c <sbrk_aligned>:
 8000c1c:	b570      	push	{r4, r5, r6, lr}
 8000c1e:	4e0e      	ldr	r6, [pc, #56]	; (8000c58 <sbrk_aligned+0x3c>)
 8000c20:	460c      	mov	r4, r1
 8000c22:	6831      	ldr	r1, [r6, #0]
 8000c24:	4605      	mov	r5, r0
 8000c26:	b911      	cbnz	r1, 8000c2e <sbrk_aligned+0x12>
 8000c28:	f000 f8bc 	bl	8000da4 <_sbrk_r>
 8000c2c:	6030      	str	r0, [r6, #0]
 8000c2e:	4621      	mov	r1, r4
 8000c30:	4628      	mov	r0, r5
 8000c32:	f000 f8b7 	bl	8000da4 <_sbrk_r>
 8000c36:	1c43      	adds	r3, r0, #1
 8000c38:	d00a      	beq.n	8000c50 <sbrk_aligned+0x34>
 8000c3a:	1cc4      	adds	r4, r0, #3
 8000c3c:	f024 0403 	bic.w	r4, r4, #3
 8000c40:	42a0      	cmp	r0, r4
 8000c42:	d007      	beq.n	8000c54 <sbrk_aligned+0x38>
 8000c44:	1a21      	subs	r1, r4, r0
 8000c46:	4628      	mov	r0, r5
 8000c48:	f000 f8ac 	bl	8000da4 <_sbrk_r>
 8000c4c:	3001      	adds	r0, #1
 8000c4e:	d101      	bne.n	8000c54 <sbrk_aligned+0x38>
 8000c50:	f04f 34ff 	mov.w	r4, #4294967295
 8000c54:	4620      	mov	r0, r4
 8000c56:	bd70      	pop	{r4, r5, r6, pc}
 8000c58:	20000090 	.word	0x20000090

08000c5c <_malloc_r>:
 8000c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c60:	1ccd      	adds	r5, r1, #3
 8000c62:	f025 0503 	bic.w	r5, r5, #3
 8000c66:	3508      	adds	r5, #8
 8000c68:	2d0c      	cmp	r5, #12
 8000c6a:	bf38      	it	cc
 8000c6c:	250c      	movcc	r5, #12
 8000c6e:	2d00      	cmp	r5, #0
 8000c70:	4607      	mov	r7, r0
 8000c72:	db01      	blt.n	8000c78 <_malloc_r+0x1c>
 8000c74:	42a9      	cmp	r1, r5
 8000c76:	d905      	bls.n	8000c84 <_malloc_r+0x28>
 8000c78:	230c      	movs	r3, #12
 8000c7a:	2600      	movs	r6, #0
 8000c7c:	603b      	str	r3, [r7, #0]
 8000c7e:	4630      	mov	r0, r6
 8000c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c84:	4e2e      	ldr	r6, [pc, #184]	; (8000d40 <_malloc_r+0xe4>)
 8000c86:	f000 f89d 	bl	8000dc4 <__malloc_lock>
 8000c8a:	6833      	ldr	r3, [r6, #0]
 8000c8c:	461c      	mov	r4, r3
 8000c8e:	bb34      	cbnz	r4, 8000cde <_malloc_r+0x82>
 8000c90:	4629      	mov	r1, r5
 8000c92:	4638      	mov	r0, r7
 8000c94:	f7ff ffc2 	bl	8000c1c <sbrk_aligned>
 8000c98:	1c43      	adds	r3, r0, #1
 8000c9a:	4604      	mov	r4, r0
 8000c9c:	d14d      	bne.n	8000d3a <_malloc_r+0xde>
 8000c9e:	6834      	ldr	r4, [r6, #0]
 8000ca0:	4626      	mov	r6, r4
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	d140      	bne.n	8000d28 <_malloc_r+0xcc>
 8000ca6:	6823      	ldr	r3, [r4, #0]
 8000ca8:	4631      	mov	r1, r6
 8000caa:	4638      	mov	r0, r7
 8000cac:	eb04 0803 	add.w	r8, r4, r3
 8000cb0:	f000 f878 	bl	8000da4 <_sbrk_r>
 8000cb4:	4580      	cmp	r8, r0
 8000cb6:	d13a      	bne.n	8000d2e <_malloc_r+0xd2>
 8000cb8:	6821      	ldr	r1, [r4, #0]
 8000cba:	3503      	adds	r5, #3
 8000cbc:	1a6d      	subs	r5, r5, r1
 8000cbe:	f025 0503 	bic.w	r5, r5, #3
 8000cc2:	3508      	adds	r5, #8
 8000cc4:	2d0c      	cmp	r5, #12
 8000cc6:	bf38      	it	cc
 8000cc8:	250c      	movcc	r5, #12
 8000cca:	4638      	mov	r0, r7
 8000ccc:	4629      	mov	r1, r5
 8000cce:	f7ff ffa5 	bl	8000c1c <sbrk_aligned>
 8000cd2:	3001      	adds	r0, #1
 8000cd4:	d02b      	beq.n	8000d2e <_malloc_r+0xd2>
 8000cd6:	6823      	ldr	r3, [r4, #0]
 8000cd8:	442b      	add	r3, r5
 8000cda:	6023      	str	r3, [r4, #0]
 8000cdc:	e00e      	b.n	8000cfc <_malloc_r+0xa0>
 8000cde:	6822      	ldr	r2, [r4, #0]
 8000ce0:	1b52      	subs	r2, r2, r5
 8000ce2:	d41e      	bmi.n	8000d22 <_malloc_r+0xc6>
 8000ce4:	2a0b      	cmp	r2, #11
 8000ce6:	d916      	bls.n	8000d16 <_malloc_r+0xba>
 8000ce8:	1961      	adds	r1, r4, r5
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	6025      	str	r5, [r4, #0]
 8000cee:	bf18      	it	ne
 8000cf0:	6059      	strne	r1, [r3, #4]
 8000cf2:	6863      	ldr	r3, [r4, #4]
 8000cf4:	bf08      	it	eq
 8000cf6:	6031      	streq	r1, [r6, #0]
 8000cf8:	5162      	str	r2, [r4, r5]
 8000cfa:	604b      	str	r3, [r1, #4]
 8000cfc:	4638      	mov	r0, r7
 8000cfe:	f104 060b 	add.w	r6, r4, #11
 8000d02:	f000 f865 	bl	8000dd0 <__malloc_unlock>
 8000d06:	f026 0607 	bic.w	r6, r6, #7
 8000d0a:	1d23      	adds	r3, r4, #4
 8000d0c:	1af2      	subs	r2, r6, r3
 8000d0e:	d0b6      	beq.n	8000c7e <_malloc_r+0x22>
 8000d10:	1b9b      	subs	r3, r3, r6
 8000d12:	50a3      	str	r3, [r4, r2]
 8000d14:	e7b3      	b.n	8000c7e <_malloc_r+0x22>
 8000d16:	6862      	ldr	r2, [r4, #4]
 8000d18:	42a3      	cmp	r3, r4
 8000d1a:	bf0c      	ite	eq
 8000d1c:	6032      	streq	r2, [r6, #0]
 8000d1e:	605a      	strne	r2, [r3, #4]
 8000d20:	e7ec      	b.n	8000cfc <_malloc_r+0xa0>
 8000d22:	4623      	mov	r3, r4
 8000d24:	6864      	ldr	r4, [r4, #4]
 8000d26:	e7b2      	b.n	8000c8e <_malloc_r+0x32>
 8000d28:	4634      	mov	r4, r6
 8000d2a:	6876      	ldr	r6, [r6, #4]
 8000d2c:	e7b9      	b.n	8000ca2 <_malloc_r+0x46>
 8000d2e:	230c      	movs	r3, #12
 8000d30:	4638      	mov	r0, r7
 8000d32:	603b      	str	r3, [r7, #0]
 8000d34:	f000 f84c 	bl	8000dd0 <__malloc_unlock>
 8000d38:	e7a1      	b.n	8000c7e <_malloc_r+0x22>
 8000d3a:	6025      	str	r5, [r4, #0]
 8000d3c:	e7de      	b.n	8000cfc <_malloc_r+0xa0>
 8000d3e:	bf00      	nop
 8000d40:	2000008c 	.word	0x2000008c

08000d44 <_realloc_r>:
 8000d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d48:	4680      	mov	r8, r0
 8000d4a:	4614      	mov	r4, r2
 8000d4c:	460e      	mov	r6, r1
 8000d4e:	b921      	cbnz	r1, 8000d5a <_realloc_r+0x16>
 8000d50:	4611      	mov	r1, r2
 8000d52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000d56:	f7ff bf81 	b.w	8000c5c <_malloc_r>
 8000d5a:	b92a      	cbnz	r2, 8000d68 <_realloc_r+0x24>
 8000d5c:	f7ff ff16 	bl	8000b8c <_free_r>
 8000d60:	4625      	mov	r5, r4
 8000d62:	4628      	mov	r0, r5
 8000d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d68:	f000 f838 	bl	8000ddc <_malloc_usable_size_r>
 8000d6c:	4284      	cmp	r4, r0
 8000d6e:	4607      	mov	r7, r0
 8000d70:	d802      	bhi.n	8000d78 <_realloc_r+0x34>
 8000d72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8000d76:	d812      	bhi.n	8000d9e <_realloc_r+0x5a>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	4640      	mov	r0, r8
 8000d7c:	f7ff ff6e 	bl	8000c5c <_malloc_r>
 8000d80:	4605      	mov	r5, r0
 8000d82:	2800      	cmp	r0, #0
 8000d84:	d0ed      	beq.n	8000d62 <_realloc_r+0x1e>
 8000d86:	42bc      	cmp	r4, r7
 8000d88:	4622      	mov	r2, r4
 8000d8a:	4631      	mov	r1, r6
 8000d8c:	bf28      	it	cs
 8000d8e:	463a      	movcs	r2, r7
 8000d90:	f7ff fed4 	bl	8000b3c <memcpy>
 8000d94:	4631      	mov	r1, r6
 8000d96:	4640      	mov	r0, r8
 8000d98:	f7ff fef8 	bl	8000b8c <_free_r>
 8000d9c:	e7e1      	b.n	8000d62 <_realloc_r+0x1e>
 8000d9e:	4635      	mov	r5, r6
 8000da0:	e7df      	b.n	8000d62 <_realloc_r+0x1e>
	...

08000da4 <_sbrk_r>:
 8000da4:	b538      	push	{r3, r4, r5, lr}
 8000da6:	2300      	movs	r3, #0
 8000da8:	4d05      	ldr	r5, [pc, #20]	; (8000dc0 <_sbrk_r+0x1c>)
 8000daa:	4604      	mov	r4, r0
 8000dac:	4608      	mov	r0, r1
 8000dae:	602b      	str	r3, [r5, #0]
 8000db0:	f7ff fad8 	bl	8000364 <_sbrk>
 8000db4:	1c43      	adds	r3, r0, #1
 8000db6:	d102      	bne.n	8000dbe <_sbrk_r+0x1a>
 8000db8:	682b      	ldr	r3, [r5, #0]
 8000dba:	b103      	cbz	r3, 8000dbe <_sbrk_r+0x1a>
 8000dbc:	6023      	str	r3, [r4, #0]
 8000dbe:	bd38      	pop	{r3, r4, r5, pc}
 8000dc0:	20000094 	.word	0x20000094

08000dc4 <__malloc_lock>:
 8000dc4:	4801      	ldr	r0, [pc, #4]	; (8000dcc <__malloc_lock+0x8>)
 8000dc6:	f000 b811 	b.w	8000dec <__retarget_lock_acquire_recursive>
 8000dca:	bf00      	nop
 8000dcc:	20000098 	.word	0x20000098

08000dd0 <__malloc_unlock>:
 8000dd0:	4801      	ldr	r0, [pc, #4]	; (8000dd8 <__malloc_unlock+0x8>)
 8000dd2:	f000 b80c 	b.w	8000dee <__retarget_lock_release_recursive>
 8000dd6:	bf00      	nop
 8000dd8:	20000098 	.word	0x20000098

08000ddc <_malloc_usable_size_r>:
 8000ddc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000de0:	1f18      	subs	r0, r3, #4
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	bfbc      	itt	lt
 8000de6:	580b      	ldrlt	r3, [r1, r0]
 8000de8:	18c0      	addlt	r0, r0, r3
 8000dea:	4770      	bx	lr

08000dec <__retarget_lock_acquire_recursive>:
 8000dec:	4770      	bx	lr

08000dee <__retarget_lock_release_recursive>:
 8000dee:	4770      	bx	lr

08000df0 <_init>:
 8000df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000df2:	bf00      	nop
 8000df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000df6:	bc08      	pop	{r3}
 8000df8:	469e      	mov	lr, r3
 8000dfa:	4770      	bx	lr

08000dfc <_fini>:
 8000dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dfe:	bf00      	nop
 8000e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e02:	bc08      	pop	{r3}
 8000e04:	469e      	mov	lr, r3
 8000e06:	4770      	bx	lr
