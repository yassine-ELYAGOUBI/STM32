
ADC_with_Polling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005604  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  08005718  08005718  00006718  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ad8  08005ad8  000071d4  2**0
                  CONTENTS
  4 .ARM          00000008  08005ad8  08005ad8  00006ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ae0  08005ae0  000071d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ae0  08005ae0  00006ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ae4  08005ae4  00006ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08005ae8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  200001d4  08005cbc  000071d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e0  08005cbc  000073e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000071d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000651d  00000000  00000000  000071fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000181a  00000000  00000000  0000d71a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e8  00000000  00000000  0000ef38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005fb  00000000  00000000  0000f720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e22  00000000  00000000  0000fd1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009073  00000000  00000000  00027b3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086520  00000000  00000000  00030bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b70d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003038  00000000  00000000  000b7114  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000ba14c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	080056fc 	.word	0x080056fc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	080056fc 	.word	0x080056fc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b28:	b5b0      	push	{r4, r5, r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b2e:	f000 faff 	bl	8001130 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b32:	f000 f865 	bl	8000c00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b36:	f000 f91b 	bl	8000d70 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000b3a:	f000 f8b1 	bl	8000ca0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000b3e:	f000 f8ed 	bl	8000d1c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 8000b42:	4827      	ldr	r0, [pc, #156]	@ (8000be0 <main+0xb8>)
 8000b44:	f000 fc52 	bl	80013ec <HAL_ADC_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
	  ADC_Result = HAL_ADC_GetValue(&hadc1);
 8000b48:	4825      	ldr	r0, [pc, #148]	@ (8000be0 <main+0xb8>)
 8000b4a:	f000 fcfd 	bl	8001548 <HAL_ADC_GetValue>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	4a24      	ldr	r2, [pc, #144]	@ (8000be4 <main+0xbc>)
 8000b52:	6013      	str	r3, [r2, #0]
	  HAL_Delay(100);
 8000b54:	2064      	movs	r0, #100	@ 0x64
 8000b56:	f000 fb4d 	bl	80011f4 <HAL_Delay>
	  TempVar = ADC_Result *5.0/4095;
 8000b5a:	4b22      	ldr	r3, [pc, #136]	@ (8000be4 <main+0xbc>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff fc40 	bl	80003e4 <__aeabi_ui2d>
 8000b64:	f04f 0200 	mov.w	r2, #0
 8000b68:	4b1f      	ldr	r3, [pc, #124]	@ (8000be8 <main+0xc0>)
 8000b6a:	f7ff fcb5 	bl	80004d8 <__aeabi_dmul>
 8000b6e:	4602      	mov	r2, r0
 8000b70:	460b      	mov	r3, r1
 8000b72:	4610      	mov	r0, r2
 8000b74:	4619      	mov	r1, r3
 8000b76:	a318      	add	r3, pc, #96	@ (adr r3, 8000bd8 <main+0xb0>)
 8000b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b7c:	f7ff fdd6 	bl	800072c <__aeabi_ddiv>
 8000b80:	4602      	mov	r2, r0
 8000b82:	460b      	mov	r3, r1
 8000b84:	4610      	mov	r0, r2
 8000b86:	4619      	mov	r1, r3
 8000b88:	f7ff ff7e 	bl	8000a88 <__aeabi_d2f>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	4a17      	ldr	r2, [pc, #92]	@ (8000bec <main+0xc4>)
 8000b90:	6013      	str	r3, [r2, #0]
	  sprintf((char *)MSG, "T= %0.2f V\r\n", TempVar); // @suppress("Float formatting support")
 8000b92:	4b16      	ldr	r3, [pc, #88]	@ (8000bec <main+0xc4>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff fc46 	bl	8000428 <__aeabi_f2d>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	460b      	mov	r3, r1
 8000ba0:	4913      	ldr	r1, [pc, #76]	@ (8000bf0 <main+0xc8>)
 8000ba2:	4814      	ldr	r0, [pc, #80]	@ (8000bf4 <main+0xcc>)
 8000ba4:	f002 fc76 	bl	8003494 <siprintf>
	  //Voltage = sprint((char *)MSG, "Voltage= %.2f V\r\n", TempVar); // @suppress("Float formatting support")
	  char MSG121[] = " test for transmission";
 8000ba8:	4b13      	ldr	r3, [pc, #76]	@ (8000bf8 <main+0xd0>)
 8000baa:	463c      	mov	r4, r7
 8000bac:	461d      	mov	r5, r3
 8000bae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000bb6:	6020      	str	r0, [r4, #0]
 8000bb8:	3404      	adds	r4, #4
 8000bba:	8021      	strh	r1, [r4, #0]
 8000bbc:	3402      	adds	r4, #2
 8000bbe:	0c0b      	lsrs	r3, r1, #16
 8000bc0:	7023      	strb	r3, [r4, #0]
	  HAL_UART_Transmit(&huart1,(uint8_t *) MSG121, 30, 100);
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	2364      	movs	r3, #100	@ 0x64
 8000bc6:	221e      	movs	r2, #30
 8000bc8:	480c      	ldr	r0, [pc, #48]	@ (8000bfc <main+0xd4>)
 8000bca:	f001 fdda 	bl	8002782 <HAL_UART_Transmit>
	  //HAL_UART_Transmit(&huart1,Voltage,Voltage, 100);
	  HAL_Delay(100);
 8000bce:	2064      	movs	r0, #100	@ 0x64
 8000bd0:	f000 fb10 	bl	80011f4 <HAL_Delay>
  {
 8000bd4:	bf00      	nop
 8000bd6:	e7b7      	b.n	8000b48 <main+0x20>
 8000bd8:	00000000 	.word	0x00000000
 8000bdc:	40affe00 	.word	0x40affe00
 8000be0:	200001f0 	.word	0x200001f0
 8000be4:	20000288 	.word	0x20000288
 8000be8:	40140000 	.word	0x40140000
 8000bec:	20000264 	.word	0x20000264
 8000bf0:	08005718 	.word	0x08005718
 8000bf4:	20000268 	.word	0x20000268
 8000bf8:	08005728 	.word	0x08005728
 8000bfc:	20000220 	.word	0x20000220

08000c00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b094      	sub	sp, #80	@ 0x50
 8000c04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c06:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c0a:	2228      	movs	r2, #40	@ 0x28
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f002 fca3 	bl	800355a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c24:	1d3b      	adds	r3, r7, #4
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c30:	2302      	movs	r3, #2
 8000c32:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c34:	2301      	movs	r3, #1
 8000c36:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c38:	2310      	movs	r3, #16
 8000c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c40:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c44:	4618      	mov	r0, r3
 8000c46:	f001 f87f 	bl	8001d48 <HAL_RCC_OscConfig>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000c50:	f000 f8a4 	bl	8000d9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c54:	230f      	movs	r3, #15
 8000c56:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c60:	2300      	movs	r3, #0
 8000c62:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c64:	2300      	movs	r3, #0
 8000c66:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f001 faec 	bl	800224c <HAL_RCC_ClockConfig>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000c7a:	f000 f88f 	bl	8000d9c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f001 fc77 	bl	800257c <HAL_RCCEx_PeriphCLKConfig>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c94:	f000 f882 	bl	8000d9c <Error_Handler>
  }
}
 8000c98:	bf00      	nop
 8000c9a:	3750      	adds	r7, #80	@ 0x50
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ca6:	1d3b      	adds	r3, r7, #4
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000cb0:	4b18      	ldr	r3, [pc, #96]	@ (8000d14 <MX_ADC1_Init+0x74>)
 8000cb2:	4a19      	ldr	r2, [pc, #100]	@ (8000d18 <MX_ADC1_Init+0x78>)
 8000cb4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cb6:	4b17      	ldr	r3, [pc, #92]	@ (8000d14 <MX_ADC1_Init+0x74>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000cbc:	4b15      	ldr	r3, [pc, #84]	@ (8000d14 <MX_ADC1_Init+0x74>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cc2:	4b14      	ldr	r3, [pc, #80]	@ (8000d14 <MX_ADC1_Init+0x74>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cc8:	4b12      	ldr	r3, [pc, #72]	@ (8000d14 <MX_ADC1_Init+0x74>)
 8000cca:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000cce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cd0:	4b10      	ldr	r3, [pc, #64]	@ (8000d14 <MX_ADC1_Init+0x74>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000cd6:	4b0f      	ldr	r3, [pc, #60]	@ (8000d14 <MX_ADC1_Init+0x74>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cdc:	480d      	ldr	r0, [pc, #52]	@ (8000d14 <MX_ADC1_Init+0x74>)
 8000cde:	f000 faad 	bl	800123c <HAL_ADC_Init>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000ce8:	f000 f858 	bl	8000d9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000cec:	2301      	movs	r3, #1
 8000cee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cf8:	1d3b      	adds	r3, r7, #4
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4805      	ldr	r0, [pc, #20]	@ (8000d14 <MX_ADC1_Init+0x74>)
 8000cfe:	f000 fc2f 	bl	8001560 <HAL_ADC_ConfigChannel>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000d08:	f000 f848 	bl	8000d9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d0c:	bf00      	nop
 8000d0e:	3710      	adds	r7, #16
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	200001f0 	.word	0x200001f0
 8000d18:	40012400 	.word	0x40012400

08000d1c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d20:	4b11      	ldr	r3, [pc, #68]	@ (8000d68 <MX_USART1_UART_Init+0x4c>)
 8000d22:	4a12      	ldr	r2, [pc, #72]	@ (8000d6c <MX_USART1_UART_Init+0x50>)
 8000d24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d26:	4b10      	ldr	r3, [pc, #64]	@ (8000d68 <MX_USART1_UART_Init+0x4c>)
 8000d28:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d68 <MX_USART1_UART_Init+0x4c>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d34:	4b0c      	ldr	r3, [pc, #48]	@ (8000d68 <MX_USART1_UART_Init+0x4c>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d68 <MX_USART1_UART_Init+0x4c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d40:	4b09      	ldr	r3, [pc, #36]	@ (8000d68 <MX_USART1_UART_Init+0x4c>)
 8000d42:	220c      	movs	r2, #12
 8000d44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d46:	4b08      	ldr	r3, [pc, #32]	@ (8000d68 <MX_USART1_UART_Init+0x4c>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d4c:	4b06      	ldr	r3, [pc, #24]	@ (8000d68 <MX_USART1_UART_Init+0x4c>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d52:	4805      	ldr	r0, [pc, #20]	@ (8000d68 <MX_USART1_UART_Init+0x4c>)
 8000d54:	f001 fcc8 	bl	80026e8 <HAL_UART_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d5e:	f000 f81d 	bl	8000d9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000220 	.word	0x20000220
 8000d6c:	40013800 	.word	0x40013800

08000d70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d76:	4b08      	ldr	r3, [pc, #32]	@ (8000d98 <MX_GPIO_Init+0x28>)
 8000d78:	699b      	ldr	r3, [r3, #24]
 8000d7a:	4a07      	ldr	r2, [pc, #28]	@ (8000d98 <MX_GPIO_Init+0x28>)
 8000d7c:	f043 0304 	orr.w	r3, r3, #4
 8000d80:	6193      	str	r3, [r2, #24]
 8000d82:	4b05      	ldr	r3, [pc, #20]	@ (8000d98 <MX_GPIO_Init+0x28>)
 8000d84:	699b      	ldr	r3, [r3, #24]
 8000d86:	f003 0304 	and.w	r3, r3, #4
 8000d8a:	607b      	str	r3, [r7, #4]
 8000d8c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d8e:	bf00      	nop
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr
 8000d98:	40021000 	.word	0x40021000

08000d9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da0:	b672      	cpsid	i
}
 8000da2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000da4:	bf00      	nop
 8000da6:	e7fd      	b.n	8000da4 <Error_Handler+0x8>

08000da8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000dae:	4b0e      	ldr	r3, [pc, #56]	@ (8000de8 <HAL_MspInit+0x40>)
 8000db0:	699b      	ldr	r3, [r3, #24]
 8000db2:	4a0d      	ldr	r2, [pc, #52]	@ (8000de8 <HAL_MspInit+0x40>)
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	6193      	str	r3, [r2, #24]
 8000dba:	4b0b      	ldr	r3, [pc, #44]	@ (8000de8 <HAL_MspInit+0x40>)
 8000dbc:	699b      	ldr	r3, [r3, #24]
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc6:	4b08      	ldr	r3, [pc, #32]	@ (8000de8 <HAL_MspInit+0x40>)
 8000dc8:	69db      	ldr	r3, [r3, #28]
 8000dca:	4a07      	ldr	r2, [pc, #28]	@ (8000de8 <HAL_MspInit+0x40>)
 8000dcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dd0:	61d3      	str	r3, [r2, #28]
 8000dd2:	4b05      	ldr	r3, [pc, #20]	@ (8000de8 <HAL_MspInit+0x40>)
 8000dd4:	69db      	ldr	r3, [r3, #28]
 8000dd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dda:	603b      	str	r3, [r7, #0]
 8000ddc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bc80      	pop	{r7}
 8000de6:	4770      	bx	lr
 8000de8:	40021000 	.word	0x40021000

08000dec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b088      	sub	sp, #32
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 0310 	add.w	r3, r7, #16
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a14      	ldr	r2, [pc, #80]	@ (8000e58 <HAL_ADC_MspInit+0x6c>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d121      	bne.n	8000e50 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e0c:	4b13      	ldr	r3, [pc, #76]	@ (8000e5c <HAL_ADC_MspInit+0x70>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	4a12      	ldr	r2, [pc, #72]	@ (8000e5c <HAL_ADC_MspInit+0x70>)
 8000e12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e16:	6193      	str	r3, [r2, #24]
 8000e18:	4b10      	ldr	r3, [pc, #64]	@ (8000e5c <HAL_ADC_MspInit+0x70>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e24:	4b0d      	ldr	r3, [pc, #52]	@ (8000e5c <HAL_ADC_MspInit+0x70>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	4a0c      	ldr	r2, [pc, #48]	@ (8000e5c <HAL_ADC_MspInit+0x70>)
 8000e2a:	f043 0304 	orr.w	r3, r3, #4
 8000e2e:	6193      	str	r3, [r2, #24]
 8000e30:	4b0a      	ldr	r3, [pc, #40]	@ (8000e5c <HAL_ADC_MspInit+0x70>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	f003 0304 	and.w	r3, r3, #4
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e40:	2303      	movs	r3, #3
 8000e42:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e44:	f107 0310 	add.w	r3, r7, #16
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4805      	ldr	r0, [pc, #20]	@ (8000e60 <HAL_ADC_MspInit+0x74>)
 8000e4c:	f000 fe00 	bl	8001a50 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e50:	bf00      	nop
 8000e52:	3720      	adds	r7, #32
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40012400 	.word	0x40012400
 8000e5c:	40021000 	.word	0x40021000
 8000e60:	40010800 	.word	0x40010800

08000e64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b088      	sub	sp, #32
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 0310 	add.w	r3, r7, #16
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ef0 <HAL_UART_MspInit+0x8c>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d131      	bne.n	8000ee8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e84:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef4 <HAL_UART_MspInit+0x90>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	4a1a      	ldr	r2, [pc, #104]	@ (8000ef4 <HAL_UART_MspInit+0x90>)
 8000e8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e8e:	6193      	str	r3, [r2, #24]
 8000e90:	4b18      	ldr	r3, [pc, #96]	@ (8000ef4 <HAL_UART_MspInit+0x90>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9c:	4b15      	ldr	r3, [pc, #84]	@ (8000ef4 <HAL_UART_MspInit+0x90>)
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	4a14      	ldr	r2, [pc, #80]	@ (8000ef4 <HAL_UART_MspInit+0x90>)
 8000ea2:	f043 0304 	orr.w	r3, r3, #4
 8000ea6:	6193      	str	r3, [r2, #24]
 8000ea8:	4b12      	ldr	r3, [pc, #72]	@ (8000ef4 <HAL_UART_MspInit+0x90>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	f003 0304 	and.w	r3, r3, #4
 8000eb0:	60bb      	str	r3, [r7, #8]
 8000eb2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000eb4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000eb8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec2:	f107 0310 	add.w	r3, r7, #16
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	480b      	ldr	r0, [pc, #44]	@ (8000ef8 <HAL_UART_MspInit+0x94>)
 8000eca:	f000 fdc1 	bl	8001a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ece:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ed2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000edc:	f107 0310 	add.w	r3, r7, #16
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4805      	ldr	r0, [pc, #20]	@ (8000ef8 <HAL_UART_MspInit+0x94>)
 8000ee4:	f000 fdb4 	bl	8001a50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ee8:	bf00      	nop
 8000eea:	3720      	adds	r7, #32
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40013800 	.word	0x40013800
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	40010800 	.word	0x40010800

08000efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f00:	bf00      	nop
 8000f02:	e7fd      	b.n	8000f00 <NMI_Handler+0x4>

08000f04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <HardFault_Handler+0x4>

08000f0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <MemManage_Handler+0x4>

08000f14 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <BusFault_Handler+0x4>

08000f1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <UsageFault_Handler+0x4>

08000f24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr

08000f30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr

08000f3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bc80      	pop	{r7}
 8000f46:	4770      	bx	lr

08000f48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f4c:	f000 f936 	bl	80011bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  return 1;
 8000f58:	2301      	movs	r3, #1
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bc80      	pop	{r7}
 8000f60:	4770      	bx	lr

08000f62 <_kill>:

int _kill(int pid, int sig)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
 8000f6a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f6c:	f002 fb48 	bl	8003600 <__errno>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2216      	movs	r2, #22
 8000f74:	601a      	str	r2, [r3, #0]
  return -1;
 8000f76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <_exit>:

void _exit (int status)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b082      	sub	sp, #8
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f8a:	f04f 31ff 	mov.w	r1, #4294967295
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f7ff ffe7 	bl	8000f62 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f94:	bf00      	nop
 8000f96:	e7fd      	b.n	8000f94 <_exit+0x12>

08000f98 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]
 8000fa8:	e00a      	b.n	8000fc0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000faa:	f3af 8000 	nop.w
 8000fae:	4601      	mov	r1, r0
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	1c5a      	adds	r2, r3, #1
 8000fb4:	60ba      	str	r2, [r7, #8]
 8000fb6:	b2ca      	uxtb	r2, r1
 8000fb8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	697a      	ldr	r2, [r7, #20]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	dbf0      	blt.n	8000faa <_read+0x12>
  }

  return len;
 8000fc8:	687b      	ldr	r3, [r7, #4]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3718      	adds	r7, #24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b086      	sub	sp, #24
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	60f8      	str	r0, [r7, #12]
 8000fda:	60b9      	str	r1, [r7, #8]
 8000fdc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
 8000fe2:	e009      	b.n	8000ff8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	1c5a      	adds	r2, r3, #1
 8000fe8:	60ba      	str	r2, [r7, #8]
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	617b      	str	r3, [r7, #20]
 8000ff8:	697a      	ldr	r2, [r7, #20]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	dbf1      	blt.n	8000fe4 <_write+0x12>
  }
  return len;
 8001000:	687b      	ldr	r3, [r7, #4]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3718      	adds	r7, #24
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <_close>:

int _close(int file)
{
 800100a:	b480      	push	{r7}
 800100c:	b083      	sub	sp, #12
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001012:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001016:	4618      	mov	r0, r3
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr

08001020 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001030:	605a      	str	r2, [r3, #4]
  return 0;
 8001032:	2300      	movs	r3, #0
}
 8001034:	4618      	mov	r0, r3
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	bc80      	pop	{r7}
 800103c:	4770      	bx	lr

0800103e <_isatty>:

int _isatty(int file)
{
 800103e:	b480      	push	{r7}
 8001040:	b083      	sub	sp, #12
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001046:	2301      	movs	r3, #1
}
 8001048:	4618      	mov	r0, r3
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr

08001052 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001052:	b480      	push	{r7}
 8001054:	b085      	sub	sp, #20
 8001056:	af00      	add	r7, sp, #0
 8001058:	60f8      	str	r0, [r7, #12]
 800105a:	60b9      	str	r1, [r7, #8]
 800105c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800105e:	2300      	movs	r3, #0
}
 8001060:	4618      	mov	r0, r3
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr
	...

0800106c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001074:	4a14      	ldr	r2, [pc, #80]	@ (80010c8 <_sbrk+0x5c>)
 8001076:	4b15      	ldr	r3, [pc, #84]	@ (80010cc <_sbrk+0x60>)
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001080:	4b13      	ldr	r3, [pc, #76]	@ (80010d0 <_sbrk+0x64>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d102      	bne.n	800108e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001088:	4b11      	ldr	r3, [pc, #68]	@ (80010d0 <_sbrk+0x64>)
 800108a:	4a12      	ldr	r2, [pc, #72]	@ (80010d4 <_sbrk+0x68>)
 800108c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800108e:	4b10      	ldr	r3, [pc, #64]	@ (80010d0 <_sbrk+0x64>)
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4413      	add	r3, r2
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	429a      	cmp	r2, r3
 800109a:	d207      	bcs.n	80010ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800109c:	f002 fab0 	bl	8003600 <__errno>
 80010a0:	4603      	mov	r3, r0
 80010a2:	220c      	movs	r2, #12
 80010a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010a6:	f04f 33ff 	mov.w	r3, #4294967295
 80010aa:	e009      	b.n	80010c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010ac:	4b08      	ldr	r3, [pc, #32]	@ (80010d0 <_sbrk+0x64>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010b2:	4b07      	ldr	r3, [pc, #28]	@ (80010d0 <_sbrk+0x64>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4413      	add	r3, r2
 80010ba:	4a05      	ldr	r2, [pc, #20]	@ (80010d0 <_sbrk+0x64>)
 80010bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010be:	68fb      	ldr	r3, [r7, #12]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3718      	adds	r7, #24
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20002800 	.word	0x20002800
 80010cc:	00000400 	.word	0x00000400
 80010d0:	2000028c 	.word	0x2000028c
 80010d4:	200003e0 	.word	0x200003e0

080010d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr

080010e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010e4:	480c      	ldr	r0, [pc, #48]	@ (8001118 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010e6:	490d      	ldr	r1, [pc, #52]	@ (800111c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001120 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010ec:	e002      	b.n	80010f4 <LoopCopyDataInit>

080010ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010f2:	3304      	adds	r3, #4

080010f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f8:	d3f9      	bcc.n	80010ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001124 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001128 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001100:	e001      	b.n	8001106 <LoopFillZerobss>

08001102 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001102:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001104:	3204      	adds	r2, #4

08001106 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001106:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001108:	d3fb      	bcc.n	8001102 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800110a:	f7ff ffe5 	bl	80010d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800110e:	f002 fa7d 	bl	800360c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001112:	f7ff fd09 	bl	8000b28 <main>
  bx lr
 8001116:	4770      	bx	lr
  ldr r0, =_sdata
 8001118:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800111c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001120:	08005ae8 	.word	0x08005ae8
  ldr r2, =_sbss
 8001124:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001128:	200003e0 	.word	0x200003e0

0800112c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800112c:	e7fe      	b.n	800112c <ADC1_2_IRQHandler>
	...

08001130 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001134:	4b08      	ldr	r3, [pc, #32]	@ (8001158 <HAL_Init+0x28>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a07      	ldr	r2, [pc, #28]	@ (8001158 <HAL_Init+0x28>)
 800113a:	f043 0310 	orr.w	r3, r3, #16
 800113e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001140:	2003      	movs	r0, #3
 8001142:	f000 fc51 	bl	80019e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001146:	200f      	movs	r0, #15
 8001148:	f000 f808 	bl	800115c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800114c:	f7ff fe2c 	bl	8000da8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40022000 	.word	0x40022000

0800115c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001164:	4b12      	ldr	r3, [pc, #72]	@ (80011b0 <HAL_InitTick+0x54>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	4b12      	ldr	r3, [pc, #72]	@ (80011b4 <HAL_InitTick+0x58>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	4619      	mov	r1, r3
 800116e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001172:	fbb3 f3f1 	udiv	r3, r3, r1
 8001176:	fbb2 f3f3 	udiv	r3, r2, r3
 800117a:	4618      	mov	r0, r3
 800117c:	f000 fc5b 	bl	8001a36 <HAL_SYSTICK_Config>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e00e      	b.n	80011a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2b0f      	cmp	r3, #15
 800118e:	d80a      	bhi.n	80011a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001190:	2200      	movs	r2, #0
 8001192:	6879      	ldr	r1, [r7, #4]
 8001194:	f04f 30ff 	mov.w	r0, #4294967295
 8001198:	f000 fc31 	bl	80019fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800119c:	4a06      	ldr	r2, [pc, #24]	@ (80011b8 <HAL_InitTick+0x5c>)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011a2:	2300      	movs	r3, #0
 80011a4:	e000      	b.n	80011a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000000 	.word	0x20000000
 80011b4:	20000008 	.word	0x20000008
 80011b8:	20000004 	.word	0x20000004

080011bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011c0:	4b05      	ldr	r3, [pc, #20]	@ (80011d8 <HAL_IncTick+0x1c>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	461a      	mov	r2, r3
 80011c6:	4b05      	ldr	r3, [pc, #20]	@ (80011dc <HAL_IncTick+0x20>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4413      	add	r3, r2
 80011cc:	4a03      	ldr	r2, [pc, #12]	@ (80011dc <HAL_IncTick+0x20>)
 80011ce:	6013      	str	r3, [r2, #0]
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr
 80011d8:	20000008 	.word	0x20000008
 80011dc:	20000290 	.word	0x20000290

080011e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  return uwTick;
 80011e4:	4b02      	ldr	r3, [pc, #8]	@ (80011f0 <HAL_GetTick+0x10>)
 80011e6:	681b      	ldr	r3, [r3, #0]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc80      	pop	{r7}
 80011ee:	4770      	bx	lr
 80011f0:	20000290 	.word	0x20000290

080011f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011fc:	f7ff fff0 	bl	80011e0 <HAL_GetTick>
 8001200:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800120c:	d005      	beq.n	800121a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800120e:	4b0a      	ldr	r3, [pc, #40]	@ (8001238 <HAL_Delay+0x44>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	461a      	mov	r2, r3
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	4413      	add	r3, r2
 8001218:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800121a:	bf00      	nop
 800121c:	f7ff ffe0 	bl	80011e0 <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	68fa      	ldr	r2, [r7, #12]
 8001228:	429a      	cmp	r2, r3
 800122a:	d8f7      	bhi.n	800121c <HAL_Delay+0x28>
  {
  }
}
 800122c:	bf00      	nop
 800122e:	bf00      	nop
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000008 	.word	0x20000008

0800123c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001244:	2300      	movs	r3, #0
 8001246:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001248:	2300      	movs	r3, #0
 800124a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800124c:	2300      	movs	r3, #0
 800124e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001250:	2300      	movs	r3, #0
 8001252:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d101      	bne.n	800125e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e0be      	b.n	80013dc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001268:	2b00      	cmp	r3, #0
 800126a:	d109      	bne.n	8001280 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2200      	movs	r2, #0
 8001276:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff fdb6 	bl	8000dec <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f000 fabf 	bl	8001804 <ADC_ConversionStop_Disable>
 8001286:	4603      	mov	r3, r0
 8001288:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800128e:	f003 0310 	and.w	r3, r3, #16
 8001292:	2b00      	cmp	r3, #0
 8001294:	f040 8099 	bne.w	80013ca <HAL_ADC_Init+0x18e>
 8001298:	7dfb      	ldrb	r3, [r7, #23]
 800129a:	2b00      	cmp	r3, #0
 800129c:	f040 8095 	bne.w	80013ca <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012a4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80012a8:	f023 0302 	bic.w	r3, r3, #2
 80012ac:	f043 0202 	orr.w	r2, r3, #2
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012bc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	7b1b      	ldrb	r3, [r3, #12]
 80012c2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80012c4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012c6:	68ba      	ldr	r2, [r7, #8]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80012d4:	d003      	beq.n	80012de <HAL_ADC_Init+0xa2>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d102      	bne.n	80012e4 <HAL_ADC_Init+0xa8>
 80012de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012e2:	e000      	b.n	80012e6 <HAL_ADC_Init+0xaa>
 80012e4:	2300      	movs	r3, #0
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	7d1b      	ldrb	r3, [r3, #20]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d119      	bne.n	8001328 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	7b1b      	ldrb	r3, [r3, #12]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d109      	bne.n	8001310 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	3b01      	subs	r3, #1
 8001302:	035a      	lsls	r2, r3, #13
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	4313      	orrs	r3, r2
 8001308:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800130c:	613b      	str	r3, [r7, #16]
 800130e:	e00b      	b.n	8001328 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001314:	f043 0220 	orr.w	r2, r3, #32
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001320:	f043 0201 	orr.w	r2, r3, #1
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	430a      	orrs	r2, r1
 800133a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	689a      	ldr	r2, [r3, #8]
 8001342:	4b28      	ldr	r3, [pc, #160]	@ (80013e4 <HAL_ADC_Init+0x1a8>)
 8001344:	4013      	ands	r3, r2
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	6812      	ldr	r2, [r2, #0]
 800134a:	68b9      	ldr	r1, [r7, #8]
 800134c:	430b      	orrs	r3, r1
 800134e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001358:	d003      	beq.n	8001362 <HAL_ADC_Init+0x126>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d104      	bne.n	800136c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	3b01      	subs	r3, #1
 8001368:	051b      	lsls	r3, r3, #20
 800136a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001372:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	430a      	orrs	r2, r1
 800137e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	689a      	ldr	r2, [r3, #8]
 8001386:	4b18      	ldr	r3, [pc, #96]	@ (80013e8 <HAL_ADC_Init+0x1ac>)
 8001388:	4013      	ands	r3, r2
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	429a      	cmp	r2, r3
 800138e:	d10b      	bne.n	80013a8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800139a:	f023 0303 	bic.w	r3, r3, #3
 800139e:	f043 0201 	orr.w	r2, r3, #1
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80013a6:	e018      	b.n	80013da <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013ac:	f023 0312 	bic.w	r3, r3, #18
 80013b0:	f043 0210 	orr.w	r2, r3, #16
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013bc:	f043 0201 	orr.w	r2, r3, #1
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80013c8:	e007      	b.n	80013da <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013ce:	f043 0210 	orr.w	r2, r3, #16
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80013da:	7dfb      	ldrb	r3, [r7, #23]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3718      	adds	r7, #24
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	ffe1f7fd 	.word	0xffe1f7fd
 80013e8:	ff1f0efe 	.word	0xff1f0efe

080013ec <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013f4:	2300      	movs	r3, #0
 80013f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d101      	bne.n	8001406 <HAL_ADC_Start+0x1a>
 8001402:	2302      	movs	r3, #2
 8001404:	e098      	b.n	8001538 <HAL_ADC_Start+0x14c>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2201      	movs	r2, #1
 800140a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f000 f99e 	bl	8001750 <ADC_Enable>
 8001414:	4603      	mov	r3, r0
 8001416:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001418:	7bfb      	ldrb	r3, [r7, #15]
 800141a:	2b00      	cmp	r3, #0
 800141c:	f040 8087 	bne.w	800152e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001424:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001428:	f023 0301 	bic.w	r3, r3, #1
 800142c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a41      	ldr	r2, [pc, #260]	@ (8001540 <HAL_ADC_Start+0x154>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d105      	bne.n	800144a <HAL_ADC_Start+0x5e>
 800143e:	4b41      	ldr	r3, [pc, #260]	@ (8001544 <HAL_ADC_Start+0x158>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d115      	bne.n	8001476 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800144e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001460:	2b00      	cmp	r3, #0
 8001462:	d026      	beq.n	80014b2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001468:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800146c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001474:	e01d      	b.n	80014b2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800147a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a2f      	ldr	r2, [pc, #188]	@ (8001544 <HAL_ADC_Start+0x158>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d004      	beq.n	8001496 <HAL_ADC_Start+0xaa>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a2b      	ldr	r2, [pc, #172]	@ (8001540 <HAL_ADC_Start+0x154>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d10d      	bne.n	80014b2 <HAL_ADC_Start+0xc6>
 8001496:	4b2b      	ldr	r3, [pc, #172]	@ (8001544 <HAL_ADC_Start+0x158>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d007      	beq.n	80014b2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014a6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80014aa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d006      	beq.n	80014cc <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014c2:	f023 0206 	bic.w	r2, r3, #6
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80014ca:	e002      	b.n	80014d2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2200      	movs	r2, #0
 80014d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f06f 0202 	mvn.w	r2, #2
 80014e2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80014ee:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80014f2:	d113      	bne.n	800151c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80014f8:	4a11      	ldr	r2, [pc, #68]	@ (8001540 <HAL_ADC_Start+0x154>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d105      	bne.n	800150a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80014fe:	4b11      	ldr	r3, [pc, #68]	@ (8001544 <HAL_ADC_Start+0x158>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001506:	2b00      	cmp	r3, #0
 8001508:	d108      	bne.n	800151c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	689a      	ldr	r2, [r3, #8]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	e00c      	b.n	8001536 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	689a      	ldr	r2, [r3, #8]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	e003      	b.n	8001536 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001536:	7bfb      	ldrb	r3, [r7, #15]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40012800 	.word	0x40012800
 8001544:	40012400 	.word	0x40012400

08001548 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001556:	4618      	mov	r0, r3
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr

08001560 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800156a:	2300      	movs	r3, #0
 800156c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800156e:	2300      	movs	r3, #0
 8001570:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001578:	2b01      	cmp	r3, #1
 800157a:	d101      	bne.n	8001580 <HAL_ADC_ConfigChannel+0x20>
 800157c:	2302      	movs	r3, #2
 800157e:	e0dc      	b.n	800173a <HAL_ADC_ConfigChannel+0x1da>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2201      	movs	r2, #1
 8001584:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2b06      	cmp	r3, #6
 800158e:	d81c      	bhi.n	80015ca <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685a      	ldr	r2, [r3, #4]
 800159a:	4613      	mov	r3, r2
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	4413      	add	r3, r2
 80015a0:	3b05      	subs	r3, #5
 80015a2:	221f      	movs	r2, #31
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	43db      	mvns	r3, r3
 80015aa:	4019      	ands	r1, r3
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	6818      	ldr	r0, [r3, #0]
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685a      	ldr	r2, [r3, #4]
 80015b4:	4613      	mov	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	4413      	add	r3, r2
 80015ba:	3b05      	subs	r3, #5
 80015bc:	fa00 f203 	lsl.w	r2, r0, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	430a      	orrs	r2, r1
 80015c6:	635a      	str	r2, [r3, #52]	@ 0x34
 80015c8:	e03c      	b.n	8001644 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2b0c      	cmp	r3, #12
 80015d0:	d81c      	bhi.n	800160c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685a      	ldr	r2, [r3, #4]
 80015dc:	4613      	mov	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	3b23      	subs	r3, #35	@ 0x23
 80015e4:	221f      	movs	r2, #31
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	43db      	mvns	r3, r3
 80015ec:	4019      	ands	r1, r3
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	6818      	ldr	r0, [r3, #0]
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685a      	ldr	r2, [r3, #4]
 80015f6:	4613      	mov	r3, r2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4413      	add	r3, r2
 80015fc:	3b23      	subs	r3, #35	@ 0x23
 80015fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	430a      	orrs	r2, r1
 8001608:	631a      	str	r2, [r3, #48]	@ 0x30
 800160a:	e01b      	b.n	8001644 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685a      	ldr	r2, [r3, #4]
 8001616:	4613      	mov	r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4413      	add	r3, r2
 800161c:	3b41      	subs	r3, #65	@ 0x41
 800161e:	221f      	movs	r2, #31
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	43db      	mvns	r3, r3
 8001626:	4019      	ands	r1, r3
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	6818      	ldr	r0, [r3, #0]
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685a      	ldr	r2, [r3, #4]
 8001630:	4613      	mov	r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	4413      	add	r3, r2
 8001636:	3b41      	subs	r3, #65	@ 0x41
 8001638:	fa00 f203 	lsl.w	r2, r0, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	430a      	orrs	r2, r1
 8001642:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2b09      	cmp	r3, #9
 800164a:	d91c      	bls.n	8001686 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	68d9      	ldr	r1, [r3, #12]
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	4613      	mov	r3, r2
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	4413      	add	r3, r2
 800165c:	3b1e      	subs	r3, #30
 800165e:	2207      	movs	r2, #7
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	43db      	mvns	r3, r3
 8001666:	4019      	ands	r1, r3
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	6898      	ldr	r0, [r3, #8]
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4613      	mov	r3, r2
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	4413      	add	r3, r2
 8001676:	3b1e      	subs	r3, #30
 8001678:	fa00 f203 	lsl.w	r2, r0, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	430a      	orrs	r2, r1
 8001682:	60da      	str	r2, [r3, #12]
 8001684:	e019      	b.n	80016ba <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6919      	ldr	r1, [r3, #16]
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	4613      	mov	r3, r2
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	4413      	add	r3, r2
 8001696:	2207      	movs	r2, #7
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	4019      	ands	r1, r3
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	6898      	ldr	r0, [r3, #8]
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	4613      	mov	r3, r2
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	4413      	add	r3, r2
 80016ae:	fa00 f203 	lsl.w	r2, r0, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	430a      	orrs	r2, r1
 80016b8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2b10      	cmp	r3, #16
 80016c0:	d003      	beq.n	80016ca <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80016c6:	2b11      	cmp	r3, #17
 80016c8:	d132      	bne.n	8001730 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a1d      	ldr	r2, [pc, #116]	@ (8001744 <HAL_ADC_ConfigChannel+0x1e4>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d125      	bne.n	8001720 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d126      	bne.n	8001730 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	689a      	ldr	r2, [r3, #8]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80016f0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2b10      	cmp	r3, #16
 80016f8:	d11a      	bne.n	8001730 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016fa:	4b13      	ldr	r3, [pc, #76]	@ (8001748 <HAL_ADC_ConfigChannel+0x1e8>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a13      	ldr	r2, [pc, #76]	@ (800174c <HAL_ADC_ConfigChannel+0x1ec>)
 8001700:	fba2 2303 	umull	r2, r3, r2, r3
 8001704:	0c9a      	lsrs	r2, r3, #18
 8001706:	4613      	mov	r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	4413      	add	r3, r2
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001710:	e002      	b.n	8001718 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	3b01      	subs	r3, #1
 8001716:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1f9      	bne.n	8001712 <HAL_ADC_ConfigChannel+0x1b2>
 800171e:	e007      	b.n	8001730 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001724:	f043 0220 	orr.w	r2, r3, #32
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001738:	7bfb      	ldrb	r3, [r7, #15]
}
 800173a:	4618      	mov	r0, r3
 800173c:	3714      	adds	r7, #20
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr
 8001744:	40012400 	.word	0x40012400
 8001748:	20000000 	.word	0x20000000
 800174c:	431bde83 	.word	0x431bde83

08001750 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001758:	2300      	movs	r3, #0
 800175a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800175c:	2300      	movs	r3, #0
 800175e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	2b01      	cmp	r3, #1
 800176c:	d040      	beq.n	80017f0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	689a      	ldr	r2, [r3, #8]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f042 0201 	orr.w	r2, r2, #1
 800177c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800177e:	4b1f      	ldr	r3, [pc, #124]	@ (80017fc <ADC_Enable+0xac>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a1f      	ldr	r2, [pc, #124]	@ (8001800 <ADC_Enable+0xb0>)
 8001784:	fba2 2303 	umull	r2, r3, r2, r3
 8001788:	0c9b      	lsrs	r3, r3, #18
 800178a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800178c:	e002      	b.n	8001794 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	3b01      	subs	r3, #1
 8001792:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1f9      	bne.n	800178e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800179a:	f7ff fd21 	bl	80011e0 <HAL_GetTick>
 800179e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80017a0:	e01f      	b.n	80017e2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80017a2:	f7ff fd1d 	bl	80011e0 <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d918      	bls.n	80017e2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d011      	beq.n	80017e2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017c2:	f043 0210 	orr.w	r2, r3, #16
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ce:	f043 0201 	orr.w	r2, r3, #1
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e007      	b.n	80017f2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d1d8      	bne.n	80017a2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000000 	.word	0x20000000
 8001800:	431bde83 	.word	0x431bde83

08001804 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800180c:	2300      	movs	r3, #0
 800180e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	2b01      	cmp	r3, #1
 800181c:	d12e      	bne.n	800187c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	689a      	ldr	r2, [r3, #8]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f022 0201 	bic.w	r2, r2, #1
 800182c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800182e:	f7ff fcd7 	bl	80011e0 <HAL_GetTick>
 8001832:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001834:	e01b      	b.n	800186e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001836:	f7ff fcd3 	bl	80011e0 <HAL_GetTick>
 800183a:	4602      	mov	r2, r0
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d914      	bls.n	800186e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b01      	cmp	r3, #1
 8001850:	d10d      	bne.n	800186e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001856:	f043 0210 	orr.w	r2, r3, #16
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001862:	f043 0201 	orr.w	r2, r3, #1
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e007      	b.n	800187e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	2b01      	cmp	r3, #1
 800187a:	d0dc      	beq.n	8001836 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
	...

08001888 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001898:	4b0c      	ldr	r3, [pc, #48]	@ (80018cc <__NVIC_SetPriorityGrouping+0x44>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800189e:	68ba      	ldr	r2, [r7, #8]
 80018a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018a4:	4013      	ands	r3, r2
 80018a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ba:	4a04      	ldr	r2, [pc, #16]	@ (80018cc <__NVIC_SetPriorityGrouping+0x44>)
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	60d3      	str	r3, [r2, #12]
}
 80018c0:	bf00      	nop
 80018c2:	3714      	adds	r7, #20
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bc80      	pop	{r7}
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018d4:	4b04      	ldr	r3, [pc, #16]	@ (80018e8 <__NVIC_GetPriorityGrouping+0x18>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	0a1b      	lsrs	r3, r3, #8
 80018da:	f003 0307 	and.w	r3, r3, #7
}
 80018de:	4618      	mov	r0, r3
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	6039      	str	r1, [r7, #0]
 80018f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	db0a      	blt.n	8001916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	b2da      	uxtb	r2, r3
 8001904:	490c      	ldr	r1, [pc, #48]	@ (8001938 <__NVIC_SetPriority+0x4c>)
 8001906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190a:	0112      	lsls	r2, r2, #4
 800190c:	b2d2      	uxtb	r2, r2
 800190e:	440b      	add	r3, r1
 8001910:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001914:	e00a      	b.n	800192c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	b2da      	uxtb	r2, r3
 800191a:	4908      	ldr	r1, [pc, #32]	@ (800193c <__NVIC_SetPriority+0x50>)
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	f003 030f 	and.w	r3, r3, #15
 8001922:	3b04      	subs	r3, #4
 8001924:	0112      	lsls	r2, r2, #4
 8001926:	b2d2      	uxtb	r2, r2
 8001928:	440b      	add	r3, r1
 800192a:	761a      	strb	r2, [r3, #24]
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	bc80      	pop	{r7}
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	e000e100 	.word	0xe000e100
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001940:	b480      	push	{r7}
 8001942:	b089      	sub	sp, #36	@ 0x24
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	f1c3 0307 	rsb	r3, r3, #7
 800195a:	2b04      	cmp	r3, #4
 800195c:	bf28      	it	cs
 800195e:	2304      	movcs	r3, #4
 8001960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	3304      	adds	r3, #4
 8001966:	2b06      	cmp	r3, #6
 8001968:	d902      	bls.n	8001970 <NVIC_EncodePriority+0x30>
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	3b03      	subs	r3, #3
 800196e:	e000      	b.n	8001972 <NVIC_EncodePriority+0x32>
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001974:	f04f 32ff 	mov.w	r2, #4294967295
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	43da      	mvns	r2, r3
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	401a      	ands	r2, r3
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001988:	f04f 31ff 	mov.w	r1, #4294967295
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	fa01 f303 	lsl.w	r3, r1, r3
 8001992:	43d9      	mvns	r1, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001998:	4313      	orrs	r3, r2
         );
}
 800199a:	4618      	mov	r0, r3
 800199c:	3724      	adds	r7, #36	@ 0x24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr

080019a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019b4:	d301      	bcc.n	80019ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019b6:	2301      	movs	r3, #1
 80019b8:	e00f      	b.n	80019da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ba:	4a0a      	ldr	r2, [pc, #40]	@ (80019e4 <SysTick_Config+0x40>)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3b01      	subs	r3, #1
 80019c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019c2:	210f      	movs	r1, #15
 80019c4:	f04f 30ff 	mov.w	r0, #4294967295
 80019c8:	f7ff ff90 	bl	80018ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019cc:	4b05      	ldr	r3, [pc, #20]	@ (80019e4 <SysTick_Config+0x40>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019d2:	4b04      	ldr	r3, [pc, #16]	@ (80019e4 <SysTick_Config+0x40>)
 80019d4:	2207      	movs	r2, #7
 80019d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	e000e010 	.word	0xe000e010

080019e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f7ff ff49 	bl	8001888 <__NVIC_SetPriorityGrouping>
}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b086      	sub	sp, #24
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	4603      	mov	r3, r0
 8001a06:	60b9      	str	r1, [r7, #8]
 8001a08:	607a      	str	r2, [r7, #4]
 8001a0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a10:	f7ff ff5e 	bl	80018d0 <__NVIC_GetPriorityGrouping>
 8001a14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	68b9      	ldr	r1, [r7, #8]
 8001a1a:	6978      	ldr	r0, [r7, #20]
 8001a1c:	f7ff ff90 	bl	8001940 <NVIC_EncodePriority>
 8001a20:	4602      	mov	r2, r0
 8001a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a26:	4611      	mov	r1, r2
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff ff5f 	bl	80018ec <__NVIC_SetPriority>
}
 8001a2e:	bf00      	nop
 8001a30:	3718      	adds	r7, #24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b082      	sub	sp, #8
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff ffb0 	bl	80019a4 <SysTick_Config>
 8001a44:	4603      	mov	r3, r0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
	...

08001a50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b08b      	sub	sp, #44	@ 0x2c
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a62:	e161      	b.n	8001d28 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a64:	2201      	movs	r2, #1
 8001a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	69fa      	ldr	r2, [r7, #28]
 8001a74:	4013      	ands	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	f040 8150 	bne.w	8001d22 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	4a97      	ldr	r2, [pc, #604]	@ (8001ce4 <HAL_GPIO_Init+0x294>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d05e      	beq.n	8001b4a <HAL_GPIO_Init+0xfa>
 8001a8c:	4a95      	ldr	r2, [pc, #596]	@ (8001ce4 <HAL_GPIO_Init+0x294>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d875      	bhi.n	8001b7e <HAL_GPIO_Init+0x12e>
 8001a92:	4a95      	ldr	r2, [pc, #596]	@ (8001ce8 <HAL_GPIO_Init+0x298>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d058      	beq.n	8001b4a <HAL_GPIO_Init+0xfa>
 8001a98:	4a93      	ldr	r2, [pc, #588]	@ (8001ce8 <HAL_GPIO_Init+0x298>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d86f      	bhi.n	8001b7e <HAL_GPIO_Init+0x12e>
 8001a9e:	4a93      	ldr	r2, [pc, #588]	@ (8001cec <HAL_GPIO_Init+0x29c>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d052      	beq.n	8001b4a <HAL_GPIO_Init+0xfa>
 8001aa4:	4a91      	ldr	r2, [pc, #580]	@ (8001cec <HAL_GPIO_Init+0x29c>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d869      	bhi.n	8001b7e <HAL_GPIO_Init+0x12e>
 8001aaa:	4a91      	ldr	r2, [pc, #580]	@ (8001cf0 <HAL_GPIO_Init+0x2a0>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d04c      	beq.n	8001b4a <HAL_GPIO_Init+0xfa>
 8001ab0:	4a8f      	ldr	r2, [pc, #572]	@ (8001cf0 <HAL_GPIO_Init+0x2a0>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d863      	bhi.n	8001b7e <HAL_GPIO_Init+0x12e>
 8001ab6:	4a8f      	ldr	r2, [pc, #572]	@ (8001cf4 <HAL_GPIO_Init+0x2a4>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d046      	beq.n	8001b4a <HAL_GPIO_Init+0xfa>
 8001abc:	4a8d      	ldr	r2, [pc, #564]	@ (8001cf4 <HAL_GPIO_Init+0x2a4>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d85d      	bhi.n	8001b7e <HAL_GPIO_Init+0x12e>
 8001ac2:	2b12      	cmp	r3, #18
 8001ac4:	d82a      	bhi.n	8001b1c <HAL_GPIO_Init+0xcc>
 8001ac6:	2b12      	cmp	r3, #18
 8001ac8:	d859      	bhi.n	8001b7e <HAL_GPIO_Init+0x12e>
 8001aca:	a201      	add	r2, pc, #4	@ (adr r2, 8001ad0 <HAL_GPIO_Init+0x80>)
 8001acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad0:	08001b4b 	.word	0x08001b4b
 8001ad4:	08001b25 	.word	0x08001b25
 8001ad8:	08001b37 	.word	0x08001b37
 8001adc:	08001b79 	.word	0x08001b79
 8001ae0:	08001b7f 	.word	0x08001b7f
 8001ae4:	08001b7f 	.word	0x08001b7f
 8001ae8:	08001b7f 	.word	0x08001b7f
 8001aec:	08001b7f 	.word	0x08001b7f
 8001af0:	08001b7f 	.word	0x08001b7f
 8001af4:	08001b7f 	.word	0x08001b7f
 8001af8:	08001b7f 	.word	0x08001b7f
 8001afc:	08001b7f 	.word	0x08001b7f
 8001b00:	08001b7f 	.word	0x08001b7f
 8001b04:	08001b7f 	.word	0x08001b7f
 8001b08:	08001b7f 	.word	0x08001b7f
 8001b0c:	08001b7f 	.word	0x08001b7f
 8001b10:	08001b7f 	.word	0x08001b7f
 8001b14:	08001b2d 	.word	0x08001b2d
 8001b18:	08001b41 	.word	0x08001b41
 8001b1c:	4a76      	ldr	r2, [pc, #472]	@ (8001cf8 <HAL_GPIO_Init+0x2a8>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d013      	beq.n	8001b4a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b22:	e02c      	b.n	8001b7e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	623b      	str	r3, [r7, #32]
          break;
 8001b2a:	e029      	b.n	8001b80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	3304      	adds	r3, #4
 8001b32:	623b      	str	r3, [r7, #32]
          break;
 8001b34:	e024      	b.n	8001b80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	3308      	adds	r3, #8
 8001b3c:	623b      	str	r3, [r7, #32]
          break;
 8001b3e:	e01f      	b.n	8001b80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	330c      	adds	r3, #12
 8001b46:	623b      	str	r3, [r7, #32]
          break;
 8001b48:	e01a      	b.n	8001b80 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d102      	bne.n	8001b58 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b52:	2304      	movs	r3, #4
 8001b54:	623b      	str	r3, [r7, #32]
          break;
 8001b56:	e013      	b.n	8001b80 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d105      	bne.n	8001b6c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b60:	2308      	movs	r3, #8
 8001b62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	69fa      	ldr	r2, [r7, #28]
 8001b68:	611a      	str	r2, [r3, #16]
          break;
 8001b6a:	e009      	b.n	8001b80 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b6c:	2308      	movs	r3, #8
 8001b6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	69fa      	ldr	r2, [r7, #28]
 8001b74:	615a      	str	r2, [r3, #20]
          break;
 8001b76:	e003      	b.n	8001b80 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	623b      	str	r3, [r7, #32]
          break;
 8001b7c:	e000      	b.n	8001b80 <HAL_GPIO_Init+0x130>
          break;
 8001b7e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	2bff      	cmp	r3, #255	@ 0xff
 8001b84:	d801      	bhi.n	8001b8a <HAL_GPIO_Init+0x13a>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	e001      	b.n	8001b8e <HAL_GPIO_Init+0x13e>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	3304      	adds	r3, #4
 8001b8e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	2bff      	cmp	r3, #255	@ 0xff
 8001b94:	d802      	bhi.n	8001b9c <HAL_GPIO_Init+0x14c>
 8001b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	e002      	b.n	8001ba2 <HAL_GPIO_Init+0x152>
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b9e:	3b08      	subs	r3, #8
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	210f      	movs	r1, #15
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	401a      	ands	r2, r3
 8001bb4:	6a39      	ldr	r1, [r7, #32]
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bbc:	431a      	orrs	r2, r3
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f000 80a9 	beq.w	8001d22 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bd0:	4b4a      	ldr	r3, [pc, #296]	@ (8001cfc <HAL_GPIO_Init+0x2ac>)
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	4a49      	ldr	r2, [pc, #292]	@ (8001cfc <HAL_GPIO_Init+0x2ac>)
 8001bd6:	f043 0301 	orr.w	r3, r3, #1
 8001bda:	6193      	str	r3, [r2, #24]
 8001bdc:	4b47      	ldr	r3, [pc, #284]	@ (8001cfc <HAL_GPIO_Init+0x2ac>)
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001be8:	4a45      	ldr	r2, [pc, #276]	@ (8001d00 <HAL_GPIO_Init+0x2b0>)
 8001bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bec:	089b      	lsrs	r3, r3, #2
 8001bee:	3302      	adds	r3, #2
 8001bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf8:	f003 0303 	and.w	r3, r3, #3
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	220f      	movs	r2, #15
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a3d      	ldr	r2, [pc, #244]	@ (8001d04 <HAL_GPIO_Init+0x2b4>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d00d      	beq.n	8001c30 <HAL_GPIO_Init+0x1e0>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a3c      	ldr	r2, [pc, #240]	@ (8001d08 <HAL_GPIO_Init+0x2b8>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d007      	beq.n	8001c2c <HAL_GPIO_Init+0x1dc>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a3b      	ldr	r2, [pc, #236]	@ (8001d0c <HAL_GPIO_Init+0x2bc>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d101      	bne.n	8001c28 <HAL_GPIO_Init+0x1d8>
 8001c24:	2302      	movs	r3, #2
 8001c26:	e004      	b.n	8001c32 <HAL_GPIO_Init+0x1e2>
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e002      	b.n	8001c32 <HAL_GPIO_Init+0x1e2>
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e000      	b.n	8001c32 <HAL_GPIO_Init+0x1e2>
 8001c30:	2300      	movs	r3, #0
 8001c32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c34:	f002 0203 	and.w	r2, r2, #3
 8001c38:	0092      	lsls	r2, r2, #2
 8001c3a:	4093      	lsls	r3, r2
 8001c3c:	68fa      	ldr	r2, [r7, #12]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c42:	492f      	ldr	r1, [pc, #188]	@ (8001d00 <HAL_GPIO_Init+0x2b0>)
 8001c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c46:	089b      	lsrs	r3, r3, #2
 8001c48:	3302      	adds	r3, #2
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d006      	beq.n	8001c6a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c5c:	4b2c      	ldr	r3, [pc, #176]	@ (8001d10 <HAL_GPIO_Init+0x2c0>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	492b      	ldr	r1, [pc, #172]	@ (8001d10 <HAL_GPIO_Init+0x2c0>)
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	600b      	str	r3, [r1, #0]
 8001c68:	e006      	b.n	8001c78 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c6a:	4b29      	ldr	r3, [pc, #164]	@ (8001d10 <HAL_GPIO_Init+0x2c0>)
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	43db      	mvns	r3, r3
 8001c72:	4927      	ldr	r1, [pc, #156]	@ (8001d10 <HAL_GPIO_Init+0x2c0>)
 8001c74:	4013      	ands	r3, r2
 8001c76:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d006      	beq.n	8001c92 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c84:	4b22      	ldr	r3, [pc, #136]	@ (8001d10 <HAL_GPIO_Init+0x2c0>)
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	4921      	ldr	r1, [pc, #132]	@ (8001d10 <HAL_GPIO_Init+0x2c0>)
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	604b      	str	r3, [r1, #4]
 8001c90:	e006      	b.n	8001ca0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c92:	4b1f      	ldr	r3, [pc, #124]	@ (8001d10 <HAL_GPIO_Init+0x2c0>)
 8001c94:	685a      	ldr	r2, [r3, #4]
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	491d      	ldr	r1, [pc, #116]	@ (8001d10 <HAL_GPIO_Init+0x2c0>)
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d006      	beq.n	8001cba <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001cac:	4b18      	ldr	r3, [pc, #96]	@ (8001d10 <HAL_GPIO_Init+0x2c0>)
 8001cae:	689a      	ldr	r2, [r3, #8]
 8001cb0:	4917      	ldr	r1, [pc, #92]	@ (8001d10 <HAL_GPIO_Init+0x2c0>)
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	608b      	str	r3, [r1, #8]
 8001cb8:	e006      	b.n	8001cc8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cba:	4b15      	ldr	r3, [pc, #84]	@ (8001d10 <HAL_GPIO_Init+0x2c0>)
 8001cbc:	689a      	ldr	r2, [r3, #8]
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	4913      	ldr	r1, [pc, #76]	@ (8001d10 <HAL_GPIO_Init+0x2c0>)
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d01f      	beq.n	8001d14 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cd4:	4b0e      	ldr	r3, [pc, #56]	@ (8001d10 <HAL_GPIO_Init+0x2c0>)
 8001cd6:	68da      	ldr	r2, [r3, #12]
 8001cd8:	490d      	ldr	r1, [pc, #52]	@ (8001d10 <HAL_GPIO_Init+0x2c0>)
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	60cb      	str	r3, [r1, #12]
 8001ce0:	e01f      	b.n	8001d22 <HAL_GPIO_Init+0x2d2>
 8001ce2:	bf00      	nop
 8001ce4:	10320000 	.word	0x10320000
 8001ce8:	10310000 	.word	0x10310000
 8001cec:	10220000 	.word	0x10220000
 8001cf0:	10210000 	.word	0x10210000
 8001cf4:	10120000 	.word	0x10120000
 8001cf8:	10110000 	.word	0x10110000
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	40010000 	.word	0x40010000
 8001d04:	40010800 	.word	0x40010800
 8001d08:	40010c00 	.word	0x40010c00
 8001d0c:	40011000 	.word	0x40011000
 8001d10:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d14:	4b0b      	ldr	r3, [pc, #44]	@ (8001d44 <HAL_GPIO_Init+0x2f4>)
 8001d16:	68da      	ldr	r2, [r3, #12]
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	4909      	ldr	r1, [pc, #36]	@ (8001d44 <HAL_GPIO_Init+0x2f4>)
 8001d1e:	4013      	ands	r3, r2
 8001d20:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d24:	3301      	adds	r3, #1
 8001d26:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f47f ae96 	bne.w	8001a64 <HAL_GPIO_Init+0x14>
  }
}
 8001d38:	bf00      	nop
 8001d3a:	bf00      	nop
 8001d3c:	372c      	adds	r7, #44	@ 0x2c
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr
 8001d44:	40010400 	.word	0x40010400

08001d48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e272      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f000 8087 	beq.w	8001e76 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d68:	4b92      	ldr	r3, [pc, #584]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 030c 	and.w	r3, r3, #12
 8001d70:	2b04      	cmp	r3, #4
 8001d72:	d00c      	beq.n	8001d8e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d74:	4b8f      	ldr	r3, [pc, #572]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f003 030c 	and.w	r3, r3, #12
 8001d7c:	2b08      	cmp	r3, #8
 8001d7e:	d112      	bne.n	8001da6 <HAL_RCC_OscConfig+0x5e>
 8001d80:	4b8c      	ldr	r3, [pc, #560]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d8c:	d10b      	bne.n	8001da6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d8e:	4b89      	ldr	r3, [pc, #548]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d06c      	beq.n	8001e74 <HAL_RCC_OscConfig+0x12c>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d168      	bne.n	8001e74 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e24c      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dae:	d106      	bne.n	8001dbe <HAL_RCC_OscConfig+0x76>
 8001db0:	4b80      	ldr	r3, [pc, #512]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a7f      	ldr	r2, [pc, #508]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001db6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dba:	6013      	str	r3, [r2, #0]
 8001dbc:	e02e      	b.n	8001e1c <HAL_RCC_OscConfig+0xd4>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d10c      	bne.n	8001de0 <HAL_RCC_OscConfig+0x98>
 8001dc6:	4b7b      	ldr	r3, [pc, #492]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a7a      	ldr	r2, [pc, #488]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001dcc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dd0:	6013      	str	r3, [r2, #0]
 8001dd2:	4b78      	ldr	r3, [pc, #480]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a77      	ldr	r2, [pc, #476]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ddc:	6013      	str	r3, [r2, #0]
 8001dde:	e01d      	b.n	8001e1c <HAL_RCC_OscConfig+0xd4>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001de8:	d10c      	bne.n	8001e04 <HAL_RCC_OscConfig+0xbc>
 8001dea:	4b72      	ldr	r3, [pc, #456]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a71      	ldr	r2, [pc, #452]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001df0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001df4:	6013      	str	r3, [r2, #0]
 8001df6:	4b6f      	ldr	r3, [pc, #444]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a6e      	ldr	r2, [pc, #440]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e00:	6013      	str	r3, [r2, #0]
 8001e02:	e00b      	b.n	8001e1c <HAL_RCC_OscConfig+0xd4>
 8001e04:	4b6b      	ldr	r3, [pc, #428]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a6a      	ldr	r2, [pc, #424]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001e0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e0e:	6013      	str	r3, [r2, #0]
 8001e10:	4b68      	ldr	r3, [pc, #416]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a67      	ldr	r2, [pc, #412]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001e16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e1a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d013      	beq.n	8001e4c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e24:	f7ff f9dc 	bl	80011e0 <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e2c:	f7ff f9d8 	bl	80011e0 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b64      	cmp	r3, #100	@ 0x64
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e200      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e3e:	4b5d      	ldr	r3, [pc, #372]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d0f0      	beq.n	8001e2c <HAL_RCC_OscConfig+0xe4>
 8001e4a:	e014      	b.n	8001e76 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4c:	f7ff f9c8 	bl	80011e0 <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e54:	f7ff f9c4 	bl	80011e0 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b64      	cmp	r3, #100	@ 0x64
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e1ec      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e66:	4b53      	ldr	r3, [pc, #332]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1f0      	bne.n	8001e54 <HAL_RCC_OscConfig+0x10c>
 8001e72:	e000      	b.n	8001e76 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d063      	beq.n	8001f4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e82:	4b4c      	ldr	r3, [pc, #304]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 030c 	and.w	r3, r3, #12
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d00b      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e8e:	4b49      	ldr	r3, [pc, #292]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f003 030c 	and.w	r3, r3, #12
 8001e96:	2b08      	cmp	r3, #8
 8001e98:	d11c      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x18c>
 8001e9a:	4b46      	ldr	r3, [pc, #280]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d116      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ea6:	4b43      	ldr	r3, [pc, #268]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d005      	beq.n	8001ebe <HAL_RCC_OscConfig+0x176>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d001      	beq.n	8001ebe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e1c0      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ebe:	4b3d      	ldr	r3, [pc, #244]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	4939      	ldr	r1, [pc, #228]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ed2:	e03a      	b.n	8001f4a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d020      	beq.n	8001f1e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001edc:	4b36      	ldr	r3, [pc, #216]	@ (8001fb8 <HAL_RCC_OscConfig+0x270>)
 8001ede:	2201      	movs	r2, #1
 8001ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee2:	f7ff f97d 	bl	80011e0 <HAL_GetTick>
 8001ee6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee8:	e008      	b.n	8001efc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eea:	f7ff f979 	bl	80011e0 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e1a1      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001efc:	4b2d      	ldr	r3, [pc, #180]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d0f0      	beq.n	8001eea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f08:	4b2a      	ldr	r3, [pc, #168]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	695b      	ldr	r3, [r3, #20]
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	4927      	ldr	r1, [pc, #156]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	600b      	str	r3, [r1, #0]
 8001f1c:	e015      	b.n	8001f4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f1e:	4b26      	ldr	r3, [pc, #152]	@ (8001fb8 <HAL_RCC_OscConfig+0x270>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f24:	f7ff f95c 	bl	80011e0 <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f2c:	f7ff f958 	bl	80011e0 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e180      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f3e:	4b1d      	ldr	r3, [pc, #116]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1f0      	bne.n	8001f2c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0308 	and.w	r3, r3, #8
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d03a      	beq.n	8001fcc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d019      	beq.n	8001f92 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f5e:	4b17      	ldr	r3, [pc, #92]	@ (8001fbc <HAL_RCC_OscConfig+0x274>)
 8001f60:	2201      	movs	r2, #1
 8001f62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f64:	f7ff f93c 	bl	80011e0 <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f6c:	f7ff f938 	bl	80011e0 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e160      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d0f0      	beq.n	8001f6c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f8a:	2001      	movs	r0, #1
 8001f8c:	f000 fad8 	bl	8002540 <RCC_Delay>
 8001f90:	e01c      	b.n	8001fcc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f92:	4b0a      	ldr	r3, [pc, #40]	@ (8001fbc <HAL_RCC_OscConfig+0x274>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f98:	f7ff f922 	bl	80011e0 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f9e:	e00f      	b.n	8001fc0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fa0:	f7ff f91e 	bl	80011e0 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d908      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e146      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
 8001fb2:	bf00      	nop
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	42420000 	.word	0x42420000
 8001fbc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fc0:	4b92      	ldr	r3, [pc, #584]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1e9      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f000 80a6 	beq.w	8002126 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fde:	4b8b      	ldr	r3, [pc, #556]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10d      	bne.n	8002006 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fea:	4b88      	ldr	r3, [pc, #544]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	4a87      	ldr	r2, [pc, #540]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 8001ff0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ff4:	61d3      	str	r3, [r2, #28]
 8001ff6:	4b85      	ldr	r3, [pc, #532]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ffe:	60bb      	str	r3, [r7, #8]
 8002000:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002002:	2301      	movs	r3, #1
 8002004:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002006:	4b82      	ldr	r3, [pc, #520]	@ (8002210 <HAL_RCC_OscConfig+0x4c8>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800200e:	2b00      	cmp	r3, #0
 8002010:	d118      	bne.n	8002044 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002012:	4b7f      	ldr	r3, [pc, #508]	@ (8002210 <HAL_RCC_OscConfig+0x4c8>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a7e      	ldr	r2, [pc, #504]	@ (8002210 <HAL_RCC_OscConfig+0x4c8>)
 8002018:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800201c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800201e:	f7ff f8df 	bl	80011e0 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002026:	f7ff f8db 	bl	80011e0 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b64      	cmp	r3, #100	@ 0x64
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e103      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002038:	4b75      	ldr	r3, [pc, #468]	@ (8002210 <HAL_RCC_OscConfig+0x4c8>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0f0      	beq.n	8002026 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d106      	bne.n	800205a <HAL_RCC_OscConfig+0x312>
 800204c:	4b6f      	ldr	r3, [pc, #444]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	4a6e      	ldr	r2, [pc, #440]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002052:	f043 0301 	orr.w	r3, r3, #1
 8002056:	6213      	str	r3, [r2, #32]
 8002058:	e02d      	b.n	80020b6 <HAL_RCC_OscConfig+0x36e>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d10c      	bne.n	800207c <HAL_RCC_OscConfig+0x334>
 8002062:	4b6a      	ldr	r3, [pc, #424]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002064:	6a1b      	ldr	r3, [r3, #32]
 8002066:	4a69      	ldr	r2, [pc, #420]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002068:	f023 0301 	bic.w	r3, r3, #1
 800206c:	6213      	str	r3, [r2, #32]
 800206e:	4b67      	ldr	r3, [pc, #412]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002070:	6a1b      	ldr	r3, [r3, #32]
 8002072:	4a66      	ldr	r2, [pc, #408]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002074:	f023 0304 	bic.w	r3, r3, #4
 8002078:	6213      	str	r3, [r2, #32]
 800207a:	e01c      	b.n	80020b6 <HAL_RCC_OscConfig+0x36e>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	2b05      	cmp	r3, #5
 8002082:	d10c      	bne.n	800209e <HAL_RCC_OscConfig+0x356>
 8002084:	4b61      	ldr	r3, [pc, #388]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	4a60      	ldr	r2, [pc, #384]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 800208a:	f043 0304 	orr.w	r3, r3, #4
 800208e:	6213      	str	r3, [r2, #32]
 8002090:	4b5e      	ldr	r3, [pc, #376]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	4a5d      	ldr	r2, [pc, #372]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002096:	f043 0301 	orr.w	r3, r3, #1
 800209a:	6213      	str	r3, [r2, #32]
 800209c:	e00b      	b.n	80020b6 <HAL_RCC_OscConfig+0x36e>
 800209e:	4b5b      	ldr	r3, [pc, #364]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 80020a0:	6a1b      	ldr	r3, [r3, #32]
 80020a2:	4a5a      	ldr	r2, [pc, #360]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 80020a4:	f023 0301 	bic.w	r3, r3, #1
 80020a8:	6213      	str	r3, [r2, #32]
 80020aa:	4b58      	ldr	r3, [pc, #352]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 80020ac:	6a1b      	ldr	r3, [r3, #32]
 80020ae:	4a57      	ldr	r2, [pc, #348]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 80020b0:	f023 0304 	bic.w	r3, r3, #4
 80020b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d015      	beq.n	80020ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020be:	f7ff f88f 	bl	80011e0 <HAL_GetTick>
 80020c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c4:	e00a      	b.n	80020dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020c6:	f7ff f88b 	bl	80011e0 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e0b1      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020dc:	4b4b      	ldr	r3, [pc, #300]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 80020de:	6a1b      	ldr	r3, [r3, #32]
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0ee      	beq.n	80020c6 <HAL_RCC_OscConfig+0x37e>
 80020e8:	e014      	b.n	8002114 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ea:	f7ff f879 	bl	80011e0 <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020f0:	e00a      	b.n	8002108 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020f2:	f7ff f875 	bl	80011e0 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002100:	4293      	cmp	r3, r2
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e09b      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002108:	4b40      	ldr	r3, [pc, #256]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1ee      	bne.n	80020f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002114:	7dfb      	ldrb	r3, [r7, #23]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d105      	bne.n	8002126 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800211a:	4b3c      	ldr	r3, [pc, #240]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	4a3b      	ldr	r2, [pc, #236]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002120:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002124:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	2b00      	cmp	r3, #0
 800212c:	f000 8087 	beq.w	800223e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002130:	4b36      	ldr	r3, [pc, #216]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f003 030c 	and.w	r3, r3, #12
 8002138:	2b08      	cmp	r3, #8
 800213a:	d061      	beq.n	8002200 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	69db      	ldr	r3, [r3, #28]
 8002140:	2b02      	cmp	r3, #2
 8002142:	d146      	bne.n	80021d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002144:	4b33      	ldr	r3, [pc, #204]	@ (8002214 <HAL_RCC_OscConfig+0x4cc>)
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214a:	f7ff f849 	bl	80011e0 <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002150:	e008      	b.n	8002164 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002152:	f7ff f845 	bl	80011e0 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e06d      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002164:	4b29      	ldr	r3, [pc, #164]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1f0      	bne.n	8002152 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002178:	d108      	bne.n	800218c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800217a:	4b24      	ldr	r3, [pc, #144]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	4921      	ldr	r1, [pc, #132]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002188:	4313      	orrs	r3, r2
 800218a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800218c:	4b1f      	ldr	r3, [pc, #124]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a19      	ldr	r1, [r3, #32]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800219c:	430b      	orrs	r3, r1
 800219e:	491b      	ldr	r1, [pc, #108]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002214 <HAL_RCC_OscConfig+0x4cc>)
 80021a6:	2201      	movs	r2, #1
 80021a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021aa:	f7ff f819 	bl	80011e0 <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021b0:	e008      	b.n	80021c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b2:	f7ff f815 	bl	80011e0 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e03d      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021c4:	4b11      	ldr	r3, [pc, #68]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0f0      	beq.n	80021b2 <HAL_RCC_OscConfig+0x46a>
 80021d0:	e035      	b.n	800223e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d2:	4b10      	ldr	r3, [pc, #64]	@ (8002214 <HAL_RCC_OscConfig+0x4cc>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d8:	f7ff f802 	bl	80011e0 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e0:	f7fe fffe 	bl	80011e0 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e026      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021f2:	4b06      	ldr	r3, [pc, #24]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1f0      	bne.n	80021e0 <HAL_RCC_OscConfig+0x498>
 80021fe:	e01e      	b.n	800223e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	69db      	ldr	r3, [r3, #28]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d107      	bne.n	8002218 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e019      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
 800220c:	40021000 	.word	0x40021000
 8002210:	40007000 	.word	0x40007000
 8002214:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002218:	4b0b      	ldr	r3, [pc, #44]	@ (8002248 <HAL_RCC_OscConfig+0x500>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	429a      	cmp	r2, r3
 800222a:	d106      	bne.n	800223a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002236:	429a      	cmp	r2, r3
 8002238:	d001      	beq.n	800223e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e000      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	3718      	adds	r7, #24
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40021000 	.word	0x40021000

0800224c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d101      	bne.n	8002260 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e0d0      	b.n	8002402 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002260:	4b6a      	ldr	r3, [pc, #424]	@ (800240c <HAL_RCC_ClockConfig+0x1c0>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0307 	and.w	r3, r3, #7
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	429a      	cmp	r2, r3
 800226c:	d910      	bls.n	8002290 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226e:	4b67      	ldr	r3, [pc, #412]	@ (800240c <HAL_RCC_ClockConfig+0x1c0>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f023 0207 	bic.w	r2, r3, #7
 8002276:	4965      	ldr	r1, [pc, #404]	@ (800240c <HAL_RCC_ClockConfig+0x1c0>)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	4313      	orrs	r3, r2
 800227c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800227e:	4b63      	ldr	r3, [pc, #396]	@ (800240c <HAL_RCC_ClockConfig+0x1c0>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	429a      	cmp	r2, r3
 800228a:	d001      	beq.n	8002290 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e0b8      	b.n	8002402 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d020      	beq.n	80022de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0304 	and.w	r3, r3, #4
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d005      	beq.n	80022b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022a8:	4b59      	ldr	r3, [pc, #356]	@ (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	4a58      	ldr	r2, [pc, #352]	@ (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80022ae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80022b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0308 	and.w	r3, r3, #8
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d005      	beq.n	80022cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022c0:	4b53      	ldr	r3, [pc, #332]	@ (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	4a52      	ldr	r2, [pc, #328]	@ (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80022c6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80022ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022cc:	4b50      	ldr	r3, [pc, #320]	@ (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	494d      	ldr	r1, [pc, #308]	@ (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d040      	beq.n	800236c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d107      	bne.n	8002302 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f2:	4b47      	ldr	r3, [pc, #284]	@ (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d115      	bne.n	800232a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e07f      	b.n	8002402 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2b02      	cmp	r3, #2
 8002308:	d107      	bne.n	800231a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800230a:	4b41      	ldr	r3, [pc, #260]	@ (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d109      	bne.n	800232a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e073      	b.n	8002402 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800231a:	4b3d      	ldr	r3, [pc, #244]	@ (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e06b      	b.n	8002402 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800232a:	4b39      	ldr	r3, [pc, #228]	@ (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f023 0203 	bic.w	r2, r3, #3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	4936      	ldr	r1, [pc, #216]	@ (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 8002338:	4313      	orrs	r3, r2
 800233a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800233c:	f7fe ff50 	bl	80011e0 <HAL_GetTick>
 8002340:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002342:	e00a      	b.n	800235a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002344:	f7fe ff4c 	bl	80011e0 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002352:	4293      	cmp	r3, r2
 8002354:	d901      	bls.n	800235a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e053      	b.n	8002402 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800235a:	4b2d      	ldr	r3, [pc, #180]	@ (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f003 020c 	and.w	r2, r3, #12
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	429a      	cmp	r2, r3
 800236a:	d1eb      	bne.n	8002344 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800236c:	4b27      	ldr	r3, [pc, #156]	@ (800240c <HAL_RCC_ClockConfig+0x1c0>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0307 	and.w	r3, r3, #7
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	429a      	cmp	r2, r3
 8002378:	d210      	bcs.n	800239c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800237a:	4b24      	ldr	r3, [pc, #144]	@ (800240c <HAL_RCC_ClockConfig+0x1c0>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f023 0207 	bic.w	r2, r3, #7
 8002382:	4922      	ldr	r1, [pc, #136]	@ (800240c <HAL_RCC_ClockConfig+0x1c0>)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	4313      	orrs	r3, r2
 8002388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800238a:	4b20      	ldr	r3, [pc, #128]	@ (800240c <HAL_RCC_ClockConfig+0x1c0>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	429a      	cmp	r2, r3
 8002396:	d001      	beq.n	800239c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e032      	b.n	8002402 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d008      	beq.n	80023ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023a8:	4b19      	ldr	r3, [pc, #100]	@ (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	4916      	ldr	r1, [pc, #88]	@ (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d009      	beq.n	80023da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023c6:	4b12      	ldr	r3, [pc, #72]	@ (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	490e      	ldr	r1, [pc, #56]	@ (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023da:	f000 f821 	bl	8002420 <HAL_RCC_GetSysClockFreq>
 80023de:	4602      	mov	r2, r0
 80023e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	091b      	lsrs	r3, r3, #4
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	490a      	ldr	r1, [pc, #40]	@ (8002414 <HAL_RCC_ClockConfig+0x1c8>)
 80023ec:	5ccb      	ldrb	r3, [r1, r3]
 80023ee:	fa22 f303 	lsr.w	r3, r2, r3
 80023f2:	4a09      	ldr	r2, [pc, #36]	@ (8002418 <HAL_RCC_ClockConfig+0x1cc>)
 80023f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023f6:	4b09      	ldr	r3, [pc, #36]	@ (800241c <HAL_RCC_ClockConfig+0x1d0>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7fe feae 	bl	800115c <HAL_InitTick>

  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40022000 	.word	0x40022000
 8002410:	40021000 	.word	0x40021000
 8002414:	08005750 	.word	0x08005750
 8002418:	20000000 	.word	0x20000000
 800241c:	20000004 	.word	0x20000004

08002420 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002420:	b490      	push	{r4, r7}
 8002422:	b08a      	sub	sp, #40	@ 0x28
 8002424:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002426:	4b29      	ldr	r3, [pc, #164]	@ (80024cc <HAL_RCC_GetSysClockFreq+0xac>)
 8002428:	1d3c      	adds	r4, r7, #4
 800242a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800242c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002430:	f240 2301 	movw	r3, #513	@ 0x201
 8002434:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002436:	2300      	movs	r3, #0
 8002438:	61fb      	str	r3, [r7, #28]
 800243a:	2300      	movs	r3, #0
 800243c:	61bb      	str	r3, [r7, #24]
 800243e:	2300      	movs	r3, #0
 8002440:	627b      	str	r3, [r7, #36]	@ 0x24
 8002442:	2300      	movs	r3, #0
 8002444:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002446:	2300      	movs	r3, #0
 8002448:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800244a:	4b21      	ldr	r3, [pc, #132]	@ (80024d0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	f003 030c 	and.w	r3, r3, #12
 8002456:	2b04      	cmp	r3, #4
 8002458:	d002      	beq.n	8002460 <HAL_RCC_GetSysClockFreq+0x40>
 800245a:	2b08      	cmp	r3, #8
 800245c:	d003      	beq.n	8002466 <HAL_RCC_GetSysClockFreq+0x46>
 800245e:	e02b      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002460:	4b1c      	ldr	r3, [pc, #112]	@ (80024d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002462:	623b      	str	r3, [r7, #32]
      break;
 8002464:	e02b      	b.n	80024be <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	0c9b      	lsrs	r3, r3, #18
 800246a:	f003 030f 	and.w	r3, r3, #15
 800246e:	3328      	adds	r3, #40	@ 0x28
 8002470:	443b      	add	r3, r7
 8002472:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002476:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d012      	beq.n	80024a8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002482:	4b13      	ldr	r3, [pc, #76]	@ (80024d0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	0c5b      	lsrs	r3, r3, #17
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	3328      	adds	r3, #40	@ 0x28
 800248e:	443b      	add	r3, r7
 8002490:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002494:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	4a0e      	ldr	r2, [pc, #56]	@ (80024d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800249a:	fb03 f202 	mul.w	r2, r3, r2
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80024a6:	e004      	b.n	80024b2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	4a0b      	ldr	r2, [pc, #44]	@ (80024d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024ac:	fb02 f303 	mul.w	r3, r2, r3
 80024b0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      sysclockfreq = pllclk;
 80024b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b4:	623b      	str	r3, [r7, #32]
      break;
 80024b6:	e002      	b.n	80024be <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024b8:	4b06      	ldr	r3, [pc, #24]	@ (80024d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80024ba:	623b      	str	r3, [r7, #32]
      break;
 80024bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024be:	6a3b      	ldr	r3, [r7, #32]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3728      	adds	r7, #40	@ 0x28
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bc90      	pop	{r4, r7}
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	08005740 	.word	0x08005740
 80024d0:	40021000 	.word	0x40021000
 80024d4:	007a1200 	.word	0x007a1200
 80024d8:	003d0900 	.word	0x003d0900

080024dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024e0:	4b02      	ldr	r3, [pc, #8]	@ (80024ec <HAL_RCC_GetHCLKFreq+0x10>)
 80024e2:	681b      	ldr	r3, [r3, #0]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr
 80024ec:	20000000 	.word	0x20000000

080024f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024f4:	f7ff fff2 	bl	80024dc <HAL_RCC_GetHCLKFreq>
 80024f8:	4602      	mov	r2, r0
 80024fa:	4b05      	ldr	r3, [pc, #20]	@ (8002510 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	0a1b      	lsrs	r3, r3, #8
 8002500:	f003 0307 	and.w	r3, r3, #7
 8002504:	4903      	ldr	r1, [pc, #12]	@ (8002514 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002506:	5ccb      	ldrb	r3, [r1, r3]
 8002508:	fa22 f303 	lsr.w	r3, r2, r3
}
 800250c:	4618      	mov	r0, r3
 800250e:	bd80      	pop	{r7, pc}
 8002510:	40021000 	.word	0x40021000
 8002514:	08005760 	.word	0x08005760

08002518 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800251c:	f7ff ffde 	bl	80024dc <HAL_RCC_GetHCLKFreq>
 8002520:	4602      	mov	r2, r0
 8002522:	4b05      	ldr	r3, [pc, #20]	@ (8002538 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	0adb      	lsrs	r3, r3, #11
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	4903      	ldr	r1, [pc, #12]	@ (800253c <HAL_RCC_GetPCLK2Freq+0x24>)
 800252e:	5ccb      	ldrb	r3, [r1, r3]
 8002530:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002534:	4618      	mov	r0, r3
 8002536:	bd80      	pop	{r7, pc}
 8002538:	40021000 	.word	0x40021000
 800253c:	08005760 	.word	0x08005760

08002540 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002548:	4b0a      	ldr	r3, [pc, #40]	@ (8002574 <RCC_Delay+0x34>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a0a      	ldr	r2, [pc, #40]	@ (8002578 <RCC_Delay+0x38>)
 800254e:	fba2 2303 	umull	r2, r3, r2, r3
 8002552:	0a5b      	lsrs	r3, r3, #9
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	fb02 f303 	mul.w	r3, r2, r3
 800255a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800255c:	bf00      	nop
  }
  while (Delay --);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	1e5a      	subs	r2, r3, #1
 8002562:	60fa      	str	r2, [r7, #12]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1f9      	bne.n	800255c <RCC_Delay+0x1c>
}
 8002568:	bf00      	nop
 800256a:	bf00      	nop
 800256c:	3714      	adds	r7, #20
 800256e:	46bd      	mov	sp, r7
 8002570:	bc80      	pop	{r7}
 8002572:	4770      	bx	lr
 8002574:	20000000 	.word	0x20000000
 8002578:	10624dd3 	.word	0x10624dd3

0800257c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002584:	2300      	movs	r3, #0
 8002586:	613b      	str	r3, [r7, #16]
 8002588:	2300      	movs	r3, #0
 800258a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	2b00      	cmp	r3, #0
 8002596:	d07d      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002598:	2300      	movs	r3, #0
 800259a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800259c:	4b4f      	ldr	r3, [pc, #316]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800259e:	69db      	ldr	r3, [r3, #28]
 80025a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d10d      	bne.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025a8:	4b4c      	ldr	r3, [pc, #304]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025aa:	69db      	ldr	r3, [r3, #28]
 80025ac:	4a4b      	ldr	r2, [pc, #300]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025b2:	61d3      	str	r3, [r2, #28]
 80025b4:	4b49      	ldr	r3, [pc, #292]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025b6:	69db      	ldr	r3, [r3, #28]
 80025b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025bc:	60bb      	str	r3, [r7, #8]
 80025be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025c0:	2301      	movs	r3, #1
 80025c2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c4:	4b46      	ldr	r3, [pc, #280]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d118      	bne.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025d0:	4b43      	ldr	r3, [pc, #268]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a42      	ldr	r2, [pc, #264]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025dc:	f7fe fe00 	bl	80011e0 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e2:	e008      	b.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025e4:	f7fe fdfc 	bl	80011e0 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b64      	cmp	r3, #100	@ 0x64
 80025f0:	d901      	bls.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e06d      	b.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f6:	4b3a      	ldr	r3, [pc, #232]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d0f0      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002602:	4b36      	ldr	r3, [pc, #216]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800260a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d02e      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	429a      	cmp	r2, r3
 800261e:	d027      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002620:	4b2e      	ldr	r3, [pc, #184]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002628:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800262a:	4b2e      	ldr	r3, [pc, #184]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800262c:	2201      	movs	r2, #1
 800262e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002630:	4b2c      	ldr	r3, [pc, #176]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002632:	2200      	movs	r2, #0
 8002634:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002636:	4a29      	ldr	r2, [pc, #164]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b00      	cmp	r3, #0
 8002644:	d014      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002646:	f7fe fdcb 	bl	80011e0 <HAL_GetTick>
 800264a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800264c:	e00a      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800264e:	f7fe fdc7 	bl	80011e0 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	f241 3288 	movw	r2, #5000	@ 0x1388
 800265c:	4293      	cmp	r3, r2
 800265e:	d901      	bls.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e036      	b.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002664:	4b1d      	ldr	r3, [pc, #116]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d0ee      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002670:	4b1a      	ldr	r3, [pc, #104]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002672:	6a1b      	ldr	r3, [r3, #32]
 8002674:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	4917      	ldr	r1, [pc, #92]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800267e:	4313      	orrs	r3, r2
 8002680:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002682:	7dfb      	ldrb	r3, [r7, #23]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d105      	bne.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002688:	4b14      	ldr	r3, [pc, #80]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800268a:	69db      	ldr	r3, [r3, #28]
 800268c:	4a13      	ldr	r2, [pc, #76]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800268e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002692:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d008      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026a0:	4b0e      	ldr	r3, [pc, #56]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	490b      	ldr	r1, [pc, #44]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0310 	and.w	r3, r3, #16
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d008      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026be:	4b07      	ldr	r3, [pc, #28]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	4904      	ldr	r1, [pc, #16]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3718      	adds	r7, #24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40021000 	.word	0x40021000
 80026e0:	40007000 	.word	0x40007000
 80026e4:	42420440 	.word	0x42420440

080026e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e03f      	b.n	800277a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d106      	bne.n	8002714 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f7fe fba8 	bl	8000e64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2224      	movs	r2, #36	@ 0x24
 8002718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68da      	ldr	r2, [r3, #12]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800272a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 f905 	bl	800293c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	691a      	ldr	r2, [r3, #16]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002740:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	695a      	ldr	r2, [r3, #20]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002750:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68da      	ldr	r2, [r3, #12]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002760:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2220      	movs	r2, #32
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2220      	movs	r2, #32
 8002774:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b08a      	sub	sp, #40	@ 0x28
 8002786:	af02      	add	r7, sp, #8
 8002788:	60f8      	str	r0, [r7, #12]
 800278a:	60b9      	str	r1, [r7, #8]
 800278c:	603b      	str	r3, [r7, #0]
 800278e:	4613      	mov	r3, r2
 8002790:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002792:	2300      	movs	r3, #0
 8002794:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b20      	cmp	r3, #32
 80027a0:	d17c      	bne.n	800289c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d002      	beq.n	80027ae <HAL_UART_Transmit+0x2c>
 80027a8:	88fb      	ldrh	r3, [r7, #6]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e075      	b.n	800289e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d101      	bne.n	80027c0 <HAL_UART_Transmit+0x3e>
 80027bc:	2302      	movs	r3, #2
 80027be:	e06e      	b.n	800289e <HAL_UART_Transmit+0x11c>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2221      	movs	r2, #33	@ 0x21
 80027d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027d6:	f7fe fd03 	bl	80011e0 <HAL_GetTick>
 80027da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	88fa      	ldrh	r2, [r7, #6]
 80027e0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	88fa      	ldrh	r2, [r7, #6]
 80027e6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027f0:	d108      	bne.n	8002804 <HAL_UART_Transmit+0x82>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d104      	bne.n	8002804 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80027fa:	2300      	movs	r3, #0
 80027fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	61bb      	str	r3, [r7, #24]
 8002802:	e003      	b.n	800280c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002808:	2300      	movs	r3, #0
 800280a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8002814:	e02a      	b.n	800286c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	9300      	str	r3, [sp, #0]
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	2200      	movs	r2, #0
 800281e:	2180      	movs	r1, #128	@ 0x80
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f000 f840 	bl	80028a6 <UART_WaitOnFlagUntilTimeout>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e036      	b.n	800289e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10b      	bne.n	800284e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	881b      	ldrh	r3, [r3, #0]
 800283a:	461a      	mov	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002844:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	3302      	adds	r3, #2
 800284a:	61bb      	str	r3, [r7, #24]
 800284c:	e007      	b.n	800285e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	781a      	ldrb	r2, [r3, #0]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	3301      	adds	r3, #1
 800285c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002862:	b29b      	uxth	r3, r3
 8002864:	3b01      	subs	r3, #1
 8002866:	b29a      	uxth	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002870:	b29b      	uxth	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1cf      	bne.n	8002816 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	9300      	str	r3, [sp, #0]
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	2200      	movs	r2, #0
 800287e:	2140      	movs	r1, #64	@ 0x40
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f000 f810 	bl	80028a6 <UART_WaitOnFlagUntilTimeout>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e006      	b.n	800289e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2220      	movs	r2, #32
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8002898:	2300      	movs	r3, #0
 800289a:	e000      	b.n	800289e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800289c:	2302      	movs	r3, #2
  }
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3720      	adds	r7, #32
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b084      	sub	sp, #16
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	60f8      	str	r0, [r7, #12]
 80028ae:	60b9      	str	r1, [r7, #8]
 80028b0:	603b      	str	r3, [r7, #0]
 80028b2:	4613      	mov	r3, r2
 80028b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028b6:	e02c      	b.n	8002912 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028be:	d028      	beq.n	8002912 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d007      	beq.n	80028d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80028c6:	f7fe fc8b 	bl	80011e0 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d21d      	bcs.n	8002912 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68da      	ldr	r2, [r3, #12]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 80028e4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	695a      	ldr	r2, [r3, #20]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f022 0201 	bic.w	r2, r2, #1
 80028f4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2220      	movs	r2, #32
 80028fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2220      	movs	r2, #32
 8002902:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e00f      	b.n	8002932 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	4013      	ands	r3, r2
 800291c:	68ba      	ldr	r2, [r7, #8]
 800291e:	429a      	cmp	r2, r3
 8002920:	bf0c      	ite	eq
 8002922:	2301      	moveq	r3, #1
 8002924:	2300      	movne	r3, #0
 8002926:	b2db      	uxtb	r3, r3
 8002928:	461a      	mov	r2, r3
 800292a:	79fb      	ldrb	r3, [r7, #7]
 800292c:	429a      	cmp	r2, r3
 800292e:	d0c3      	beq.n	80028b8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
	...

0800293c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68da      	ldr	r2, [r3, #12]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	430a      	orrs	r2, r1
 8002958:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	431a      	orrs	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	695b      	ldr	r3, [r3, #20]
 8002968:	4313      	orrs	r3, r2
 800296a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002976:	f023 030c 	bic.w	r3, r3, #12
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	6812      	ldr	r2, [r2, #0]
 800297e:	68b9      	ldr	r1, [r7, #8]
 8002980:	430b      	orrs	r3, r1
 8002982:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	699a      	ldr	r2, [r3, #24]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	430a      	orrs	r2, r1
 8002998:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a2c      	ldr	r2, [pc, #176]	@ (8002a50 <UART_SetConfig+0x114>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d103      	bne.n	80029ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80029a4:	f7ff fdb8 	bl	8002518 <HAL_RCC_GetPCLK2Freq>
 80029a8:	60f8      	str	r0, [r7, #12]
 80029aa:	e002      	b.n	80029b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80029ac:	f7ff fda0 	bl	80024f0 <HAL_RCC_GetPCLK1Freq>
 80029b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	4613      	mov	r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	4413      	add	r3, r2
 80029ba:	009a      	lsls	r2, r3, #2
 80029bc:	441a      	add	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c8:	4a22      	ldr	r2, [pc, #136]	@ (8002a54 <UART_SetConfig+0x118>)
 80029ca:	fba2 2303 	umull	r2, r3, r2, r3
 80029ce:	095b      	lsrs	r3, r3, #5
 80029d0:	0119      	lsls	r1, r3, #4
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	4613      	mov	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4413      	add	r3, r2
 80029da:	009a      	lsls	r2, r3, #2
 80029dc:	441a      	add	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80029e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002a54 <UART_SetConfig+0x118>)
 80029ea:	fba3 0302 	umull	r0, r3, r3, r2
 80029ee:	095b      	lsrs	r3, r3, #5
 80029f0:	2064      	movs	r0, #100	@ 0x64
 80029f2:	fb00 f303 	mul.w	r3, r0, r3
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	011b      	lsls	r3, r3, #4
 80029fa:	3332      	adds	r3, #50	@ 0x32
 80029fc:	4a15      	ldr	r2, [pc, #84]	@ (8002a54 <UART_SetConfig+0x118>)
 80029fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002a02:	095b      	lsrs	r3, r3, #5
 8002a04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a08:	4419      	add	r1, r3
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	009a      	lsls	r2, r3, #2
 8002a14:	441a      	add	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a20:	4b0c      	ldr	r3, [pc, #48]	@ (8002a54 <UART_SetConfig+0x118>)
 8002a22:	fba3 0302 	umull	r0, r3, r3, r2
 8002a26:	095b      	lsrs	r3, r3, #5
 8002a28:	2064      	movs	r0, #100	@ 0x64
 8002a2a:	fb00 f303 	mul.w	r3, r0, r3
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	011b      	lsls	r3, r3, #4
 8002a32:	3332      	adds	r3, #50	@ 0x32
 8002a34:	4a07      	ldr	r2, [pc, #28]	@ (8002a54 <UART_SetConfig+0x118>)
 8002a36:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3a:	095b      	lsrs	r3, r3, #5
 8002a3c:	f003 020f 	and.w	r2, r3, #15
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	440a      	add	r2, r1
 8002a46:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002a48:	bf00      	nop
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40013800 	.word	0x40013800
 8002a54:	51eb851f 	.word	0x51eb851f

08002a58 <__cvt>:
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a5e:	461d      	mov	r5, r3
 8002a60:	bfbb      	ittet	lt
 8002a62:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8002a66:	461d      	movlt	r5, r3
 8002a68:	2300      	movge	r3, #0
 8002a6a:	232d      	movlt	r3, #45	@ 0x2d
 8002a6c:	b088      	sub	sp, #32
 8002a6e:	4614      	mov	r4, r2
 8002a70:	bfb8      	it	lt
 8002a72:	4614      	movlt	r4, r2
 8002a74:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8002a76:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8002a78:	7013      	strb	r3, [r2, #0]
 8002a7a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8002a7c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8002a80:	f023 0820 	bic.w	r8, r3, #32
 8002a84:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002a88:	d005      	beq.n	8002a96 <__cvt+0x3e>
 8002a8a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8002a8e:	d100      	bne.n	8002a92 <__cvt+0x3a>
 8002a90:	3601      	adds	r6, #1
 8002a92:	2302      	movs	r3, #2
 8002a94:	e000      	b.n	8002a98 <__cvt+0x40>
 8002a96:	2303      	movs	r3, #3
 8002a98:	aa07      	add	r2, sp, #28
 8002a9a:	9204      	str	r2, [sp, #16]
 8002a9c:	aa06      	add	r2, sp, #24
 8002a9e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002aa2:	e9cd 3600 	strd	r3, r6, [sp]
 8002aa6:	4622      	mov	r2, r4
 8002aa8:	462b      	mov	r3, r5
 8002aaa:	f000 fe6d 	bl	8003788 <_dtoa_r>
 8002aae:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8002ab2:	4607      	mov	r7, r0
 8002ab4:	d119      	bne.n	8002aea <__cvt+0x92>
 8002ab6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8002ab8:	07db      	lsls	r3, r3, #31
 8002aba:	d50e      	bpl.n	8002ada <__cvt+0x82>
 8002abc:	eb00 0906 	add.w	r9, r0, r6
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	4620      	mov	r0, r4
 8002ac6:	4629      	mov	r1, r5
 8002ac8:	f7fd ff6e 	bl	80009a8 <__aeabi_dcmpeq>
 8002acc:	b108      	cbz	r0, 8002ad2 <__cvt+0x7a>
 8002ace:	f8cd 901c 	str.w	r9, [sp, #28]
 8002ad2:	2230      	movs	r2, #48	@ 0x30
 8002ad4:	9b07      	ldr	r3, [sp, #28]
 8002ad6:	454b      	cmp	r3, r9
 8002ad8:	d31e      	bcc.n	8002b18 <__cvt+0xc0>
 8002ada:	4638      	mov	r0, r7
 8002adc:	9b07      	ldr	r3, [sp, #28]
 8002ade:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8002ae0:	1bdb      	subs	r3, r3, r7
 8002ae2:	6013      	str	r3, [r2, #0]
 8002ae4:	b008      	add	sp, #32
 8002ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002aea:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002aee:	eb00 0906 	add.w	r9, r0, r6
 8002af2:	d1e5      	bne.n	8002ac0 <__cvt+0x68>
 8002af4:	7803      	ldrb	r3, [r0, #0]
 8002af6:	2b30      	cmp	r3, #48	@ 0x30
 8002af8:	d10a      	bne.n	8002b10 <__cvt+0xb8>
 8002afa:	2200      	movs	r2, #0
 8002afc:	2300      	movs	r3, #0
 8002afe:	4620      	mov	r0, r4
 8002b00:	4629      	mov	r1, r5
 8002b02:	f7fd ff51 	bl	80009a8 <__aeabi_dcmpeq>
 8002b06:	b918      	cbnz	r0, 8002b10 <__cvt+0xb8>
 8002b08:	f1c6 0601 	rsb	r6, r6, #1
 8002b0c:	f8ca 6000 	str.w	r6, [sl]
 8002b10:	f8da 3000 	ldr.w	r3, [sl]
 8002b14:	4499      	add	r9, r3
 8002b16:	e7d3      	b.n	8002ac0 <__cvt+0x68>
 8002b18:	1c59      	adds	r1, r3, #1
 8002b1a:	9107      	str	r1, [sp, #28]
 8002b1c:	701a      	strb	r2, [r3, #0]
 8002b1e:	e7d9      	b.n	8002ad4 <__cvt+0x7c>

08002b20 <__exponent>:
 8002b20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b22:	2900      	cmp	r1, #0
 8002b24:	bfb6      	itet	lt
 8002b26:	232d      	movlt	r3, #45	@ 0x2d
 8002b28:	232b      	movge	r3, #43	@ 0x2b
 8002b2a:	4249      	neglt	r1, r1
 8002b2c:	2909      	cmp	r1, #9
 8002b2e:	7002      	strb	r2, [r0, #0]
 8002b30:	7043      	strb	r3, [r0, #1]
 8002b32:	dd29      	ble.n	8002b88 <__exponent+0x68>
 8002b34:	f10d 0307 	add.w	r3, sp, #7
 8002b38:	461d      	mov	r5, r3
 8002b3a:	270a      	movs	r7, #10
 8002b3c:	fbb1 f6f7 	udiv	r6, r1, r7
 8002b40:	461a      	mov	r2, r3
 8002b42:	fb07 1416 	mls	r4, r7, r6, r1
 8002b46:	3430      	adds	r4, #48	@ 0x30
 8002b48:	f802 4c01 	strb.w	r4, [r2, #-1]
 8002b4c:	460c      	mov	r4, r1
 8002b4e:	2c63      	cmp	r4, #99	@ 0x63
 8002b50:	4631      	mov	r1, r6
 8002b52:	f103 33ff 	add.w	r3, r3, #4294967295
 8002b56:	dcf1      	bgt.n	8002b3c <__exponent+0x1c>
 8002b58:	3130      	adds	r1, #48	@ 0x30
 8002b5a:	1e94      	subs	r4, r2, #2
 8002b5c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002b60:	4623      	mov	r3, r4
 8002b62:	1c41      	adds	r1, r0, #1
 8002b64:	42ab      	cmp	r3, r5
 8002b66:	d30a      	bcc.n	8002b7e <__exponent+0x5e>
 8002b68:	f10d 0309 	add.w	r3, sp, #9
 8002b6c:	1a9b      	subs	r3, r3, r2
 8002b6e:	42ac      	cmp	r4, r5
 8002b70:	bf88      	it	hi
 8002b72:	2300      	movhi	r3, #0
 8002b74:	3302      	adds	r3, #2
 8002b76:	4403      	add	r3, r0
 8002b78:	1a18      	subs	r0, r3, r0
 8002b7a:	b003      	add	sp, #12
 8002b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b7e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8002b82:	f801 6f01 	strb.w	r6, [r1, #1]!
 8002b86:	e7ed      	b.n	8002b64 <__exponent+0x44>
 8002b88:	2330      	movs	r3, #48	@ 0x30
 8002b8a:	3130      	adds	r1, #48	@ 0x30
 8002b8c:	7083      	strb	r3, [r0, #2]
 8002b8e:	70c1      	strb	r1, [r0, #3]
 8002b90:	1d03      	adds	r3, r0, #4
 8002b92:	e7f1      	b.n	8002b78 <__exponent+0x58>

08002b94 <_printf_float>:
 8002b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b98:	b091      	sub	sp, #68	@ 0x44
 8002b9a:	460c      	mov	r4, r1
 8002b9c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8002ba0:	4616      	mov	r6, r2
 8002ba2:	461f      	mov	r7, r3
 8002ba4:	4605      	mov	r5, r0
 8002ba6:	f000 fce1 	bl	800356c <_localeconv_r>
 8002baa:	6803      	ldr	r3, [r0, #0]
 8002bac:	4618      	mov	r0, r3
 8002bae:	9308      	str	r3, [sp, #32]
 8002bb0:	f7fd face 	bl	8000150 <strlen>
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	930e      	str	r3, [sp, #56]	@ 0x38
 8002bb8:	f8d8 3000 	ldr.w	r3, [r8]
 8002bbc:	9009      	str	r0, [sp, #36]	@ 0x24
 8002bbe:	3307      	adds	r3, #7
 8002bc0:	f023 0307 	bic.w	r3, r3, #7
 8002bc4:	f103 0208 	add.w	r2, r3, #8
 8002bc8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002bcc:	f8d4 b000 	ldr.w	fp, [r4]
 8002bd0:	f8c8 2000 	str.w	r2, [r8]
 8002bd4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002bd8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8002bdc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002bde:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8002be2:	f04f 32ff 	mov.w	r2, #4294967295
 8002be6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8002bea:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8002bee:	4b9c      	ldr	r3, [pc, #624]	@ (8002e60 <_printf_float+0x2cc>)
 8002bf0:	f7fd ff0c 	bl	8000a0c <__aeabi_dcmpun>
 8002bf4:	bb70      	cbnz	r0, 8002c54 <_printf_float+0xc0>
 8002bf6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8002bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8002bfe:	4b98      	ldr	r3, [pc, #608]	@ (8002e60 <_printf_float+0x2cc>)
 8002c00:	f7fd fee6 	bl	80009d0 <__aeabi_dcmple>
 8002c04:	bb30      	cbnz	r0, 8002c54 <_printf_float+0xc0>
 8002c06:	2200      	movs	r2, #0
 8002c08:	2300      	movs	r3, #0
 8002c0a:	4640      	mov	r0, r8
 8002c0c:	4649      	mov	r1, r9
 8002c0e:	f7fd fed5 	bl	80009bc <__aeabi_dcmplt>
 8002c12:	b110      	cbz	r0, 8002c1a <_printf_float+0x86>
 8002c14:	232d      	movs	r3, #45	@ 0x2d
 8002c16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002c1a:	4a92      	ldr	r2, [pc, #584]	@ (8002e64 <_printf_float+0x2d0>)
 8002c1c:	4b92      	ldr	r3, [pc, #584]	@ (8002e68 <_printf_float+0x2d4>)
 8002c1e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8002c22:	bf94      	ite	ls
 8002c24:	4690      	movls	r8, r2
 8002c26:	4698      	movhi	r8, r3
 8002c28:	2303      	movs	r3, #3
 8002c2a:	f04f 0900 	mov.w	r9, #0
 8002c2e:	6123      	str	r3, [r4, #16]
 8002c30:	f02b 0304 	bic.w	r3, fp, #4
 8002c34:	6023      	str	r3, [r4, #0]
 8002c36:	4633      	mov	r3, r6
 8002c38:	4621      	mov	r1, r4
 8002c3a:	4628      	mov	r0, r5
 8002c3c:	9700      	str	r7, [sp, #0]
 8002c3e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8002c40:	f000 f9d4 	bl	8002fec <_printf_common>
 8002c44:	3001      	adds	r0, #1
 8002c46:	f040 8090 	bne.w	8002d6a <_printf_float+0x1d6>
 8002c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8002c4e:	b011      	add	sp, #68	@ 0x44
 8002c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c54:	4642      	mov	r2, r8
 8002c56:	464b      	mov	r3, r9
 8002c58:	4640      	mov	r0, r8
 8002c5a:	4649      	mov	r1, r9
 8002c5c:	f7fd fed6 	bl	8000a0c <__aeabi_dcmpun>
 8002c60:	b148      	cbz	r0, 8002c76 <_printf_float+0xe2>
 8002c62:	464b      	mov	r3, r9
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	bfb8      	it	lt
 8002c68:	232d      	movlt	r3, #45	@ 0x2d
 8002c6a:	4a80      	ldr	r2, [pc, #512]	@ (8002e6c <_printf_float+0x2d8>)
 8002c6c:	bfb8      	it	lt
 8002c6e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8002c72:	4b7f      	ldr	r3, [pc, #508]	@ (8002e70 <_printf_float+0x2dc>)
 8002c74:	e7d3      	b.n	8002c1e <_printf_float+0x8a>
 8002c76:	6863      	ldr	r3, [r4, #4]
 8002c78:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8002c7c:	1c5a      	adds	r2, r3, #1
 8002c7e:	d13f      	bne.n	8002d00 <_printf_float+0x16c>
 8002c80:	2306      	movs	r3, #6
 8002c82:	6063      	str	r3, [r4, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8002c8a:	6023      	str	r3, [r4, #0]
 8002c8c:	9206      	str	r2, [sp, #24]
 8002c8e:	aa0e      	add	r2, sp, #56	@ 0x38
 8002c90:	e9cd a204 	strd	sl, r2, [sp, #16]
 8002c94:	aa0d      	add	r2, sp, #52	@ 0x34
 8002c96:	9203      	str	r2, [sp, #12]
 8002c98:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8002c9c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002ca0:	6863      	ldr	r3, [r4, #4]
 8002ca2:	4642      	mov	r2, r8
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	4628      	mov	r0, r5
 8002ca8:	464b      	mov	r3, r9
 8002caa:	910a      	str	r1, [sp, #40]	@ 0x28
 8002cac:	f7ff fed4 	bl	8002a58 <__cvt>
 8002cb0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8002cb2:	4680      	mov	r8, r0
 8002cb4:	2947      	cmp	r1, #71	@ 0x47
 8002cb6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8002cb8:	d128      	bne.n	8002d0c <_printf_float+0x178>
 8002cba:	1cc8      	adds	r0, r1, #3
 8002cbc:	db02      	blt.n	8002cc4 <_printf_float+0x130>
 8002cbe:	6863      	ldr	r3, [r4, #4]
 8002cc0:	4299      	cmp	r1, r3
 8002cc2:	dd40      	ble.n	8002d46 <_printf_float+0x1b2>
 8002cc4:	f1aa 0a02 	sub.w	sl, sl, #2
 8002cc8:	fa5f fa8a 	uxtb.w	sl, sl
 8002ccc:	4652      	mov	r2, sl
 8002cce:	3901      	subs	r1, #1
 8002cd0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8002cd4:	910d      	str	r1, [sp, #52]	@ 0x34
 8002cd6:	f7ff ff23 	bl	8002b20 <__exponent>
 8002cda:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8002cdc:	4681      	mov	r9, r0
 8002cde:	1813      	adds	r3, r2, r0
 8002ce0:	2a01      	cmp	r2, #1
 8002ce2:	6123      	str	r3, [r4, #16]
 8002ce4:	dc02      	bgt.n	8002cec <_printf_float+0x158>
 8002ce6:	6822      	ldr	r2, [r4, #0]
 8002ce8:	07d2      	lsls	r2, r2, #31
 8002cea:	d501      	bpl.n	8002cf0 <_printf_float+0x15c>
 8002cec:	3301      	adds	r3, #1
 8002cee:	6123      	str	r3, [r4, #16]
 8002cf0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d09e      	beq.n	8002c36 <_printf_float+0xa2>
 8002cf8:	232d      	movs	r3, #45	@ 0x2d
 8002cfa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002cfe:	e79a      	b.n	8002c36 <_printf_float+0xa2>
 8002d00:	2947      	cmp	r1, #71	@ 0x47
 8002d02:	d1bf      	bne.n	8002c84 <_printf_float+0xf0>
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1bd      	bne.n	8002c84 <_printf_float+0xf0>
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e7ba      	b.n	8002c82 <_printf_float+0xee>
 8002d0c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002d10:	d9dc      	bls.n	8002ccc <_printf_float+0x138>
 8002d12:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8002d16:	d118      	bne.n	8002d4a <_printf_float+0x1b6>
 8002d18:	2900      	cmp	r1, #0
 8002d1a:	6863      	ldr	r3, [r4, #4]
 8002d1c:	dd0b      	ble.n	8002d36 <_printf_float+0x1a2>
 8002d1e:	6121      	str	r1, [r4, #16]
 8002d20:	b913      	cbnz	r3, 8002d28 <_printf_float+0x194>
 8002d22:	6822      	ldr	r2, [r4, #0]
 8002d24:	07d0      	lsls	r0, r2, #31
 8002d26:	d502      	bpl.n	8002d2e <_printf_float+0x19a>
 8002d28:	3301      	adds	r3, #1
 8002d2a:	440b      	add	r3, r1
 8002d2c:	6123      	str	r3, [r4, #16]
 8002d2e:	f04f 0900 	mov.w	r9, #0
 8002d32:	65a1      	str	r1, [r4, #88]	@ 0x58
 8002d34:	e7dc      	b.n	8002cf0 <_printf_float+0x15c>
 8002d36:	b913      	cbnz	r3, 8002d3e <_printf_float+0x1aa>
 8002d38:	6822      	ldr	r2, [r4, #0]
 8002d3a:	07d2      	lsls	r2, r2, #31
 8002d3c:	d501      	bpl.n	8002d42 <_printf_float+0x1ae>
 8002d3e:	3302      	adds	r3, #2
 8002d40:	e7f4      	b.n	8002d2c <_printf_float+0x198>
 8002d42:	2301      	movs	r3, #1
 8002d44:	e7f2      	b.n	8002d2c <_printf_float+0x198>
 8002d46:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8002d4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002d4c:	4299      	cmp	r1, r3
 8002d4e:	db05      	blt.n	8002d5c <_printf_float+0x1c8>
 8002d50:	6823      	ldr	r3, [r4, #0]
 8002d52:	6121      	str	r1, [r4, #16]
 8002d54:	07d8      	lsls	r0, r3, #31
 8002d56:	d5ea      	bpl.n	8002d2e <_printf_float+0x19a>
 8002d58:	1c4b      	adds	r3, r1, #1
 8002d5a:	e7e7      	b.n	8002d2c <_printf_float+0x198>
 8002d5c:	2900      	cmp	r1, #0
 8002d5e:	bfcc      	ite	gt
 8002d60:	2201      	movgt	r2, #1
 8002d62:	f1c1 0202 	rsble	r2, r1, #2
 8002d66:	4413      	add	r3, r2
 8002d68:	e7e0      	b.n	8002d2c <_printf_float+0x198>
 8002d6a:	6823      	ldr	r3, [r4, #0]
 8002d6c:	055a      	lsls	r2, r3, #21
 8002d6e:	d407      	bmi.n	8002d80 <_printf_float+0x1ec>
 8002d70:	6923      	ldr	r3, [r4, #16]
 8002d72:	4642      	mov	r2, r8
 8002d74:	4631      	mov	r1, r6
 8002d76:	4628      	mov	r0, r5
 8002d78:	47b8      	blx	r7
 8002d7a:	3001      	adds	r0, #1
 8002d7c:	d12b      	bne.n	8002dd6 <_printf_float+0x242>
 8002d7e:	e764      	b.n	8002c4a <_printf_float+0xb6>
 8002d80:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002d84:	f240 80dc 	bls.w	8002f40 <_printf_float+0x3ac>
 8002d88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	2300      	movs	r3, #0
 8002d90:	f7fd fe0a 	bl	80009a8 <__aeabi_dcmpeq>
 8002d94:	2800      	cmp	r0, #0
 8002d96:	d033      	beq.n	8002e00 <_printf_float+0x26c>
 8002d98:	2301      	movs	r3, #1
 8002d9a:	4631      	mov	r1, r6
 8002d9c:	4628      	mov	r0, r5
 8002d9e:	4a35      	ldr	r2, [pc, #212]	@ (8002e74 <_printf_float+0x2e0>)
 8002da0:	47b8      	blx	r7
 8002da2:	3001      	adds	r0, #1
 8002da4:	f43f af51 	beq.w	8002c4a <_printf_float+0xb6>
 8002da8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8002dac:	4543      	cmp	r3, r8
 8002dae:	db02      	blt.n	8002db6 <_printf_float+0x222>
 8002db0:	6823      	ldr	r3, [r4, #0]
 8002db2:	07d8      	lsls	r0, r3, #31
 8002db4:	d50f      	bpl.n	8002dd6 <_printf_float+0x242>
 8002db6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002dba:	4631      	mov	r1, r6
 8002dbc:	4628      	mov	r0, r5
 8002dbe:	47b8      	blx	r7
 8002dc0:	3001      	adds	r0, #1
 8002dc2:	f43f af42 	beq.w	8002c4a <_printf_float+0xb6>
 8002dc6:	f04f 0900 	mov.w	r9, #0
 8002dca:	f108 38ff 	add.w	r8, r8, #4294967295
 8002dce:	f104 0a1a 	add.w	sl, r4, #26
 8002dd2:	45c8      	cmp	r8, r9
 8002dd4:	dc09      	bgt.n	8002dea <_printf_float+0x256>
 8002dd6:	6823      	ldr	r3, [r4, #0]
 8002dd8:	079b      	lsls	r3, r3, #30
 8002dda:	f100 8102 	bmi.w	8002fe2 <_printf_float+0x44e>
 8002dde:	68e0      	ldr	r0, [r4, #12]
 8002de0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8002de2:	4298      	cmp	r0, r3
 8002de4:	bfb8      	it	lt
 8002de6:	4618      	movlt	r0, r3
 8002de8:	e731      	b.n	8002c4e <_printf_float+0xba>
 8002dea:	2301      	movs	r3, #1
 8002dec:	4652      	mov	r2, sl
 8002dee:	4631      	mov	r1, r6
 8002df0:	4628      	mov	r0, r5
 8002df2:	47b8      	blx	r7
 8002df4:	3001      	adds	r0, #1
 8002df6:	f43f af28 	beq.w	8002c4a <_printf_float+0xb6>
 8002dfa:	f109 0901 	add.w	r9, r9, #1
 8002dfe:	e7e8      	b.n	8002dd2 <_printf_float+0x23e>
 8002e00:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	dc38      	bgt.n	8002e78 <_printf_float+0x2e4>
 8002e06:	2301      	movs	r3, #1
 8002e08:	4631      	mov	r1, r6
 8002e0a:	4628      	mov	r0, r5
 8002e0c:	4a19      	ldr	r2, [pc, #100]	@ (8002e74 <_printf_float+0x2e0>)
 8002e0e:	47b8      	blx	r7
 8002e10:	3001      	adds	r0, #1
 8002e12:	f43f af1a 	beq.w	8002c4a <_printf_float+0xb6>
 8002e16:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8002e1a:	ea59 0303 	orrs.w	r3, r9, r3
 8002e1e:	d102      	bne.n	8002e26 <_printf_float+0x292>
 8002e20:	6823      	ldr	r3, [r4, #0]
 8002e22:	07d9      	lsls	r1, r3, #31
 8002e24:	d5d7      	bpl.n	8002dd6 <_printf_float+0x242>
 8002e26:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002e2a:	4631      	mov	r1, r6
 8002e2c:	4628      	mov	r0, r5
 8002e2e:	47b8      	blx	r7
 8002e30:	3001      	adds	r0, #1
 8002e32:	f43f af0a 	beq.w	8002c4a <_printf_float+0xb6>
 8002e36:	f04f 0a00 	mov.w	sl, #0
 8002e3a:	f104 0b1a 	add.w	fp, r4, #26
 8002e3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002e40:	425b      	negs	r3, r3
 8002e42:	4553      	cmp	r3, sl
 8002e44:	dc01      	bgt.n	8002e4a <_printf_float+0x2b6>
 8002e46:	464b      	mov	r3, r9
 8002e48:	e793      	b.n	8002d72 <_printf_float+0x1de>
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	465a      	mov	r2, fp
 8002e4e:	4631      	mov	r1, r6
 8002e50:	4628      	mov	r0, r5
 8002e52:	47b8      	blx	r7
 8002e54:	3001      	adds	r0, #1
 8002e56:	f43f aef8 	beq.w	8002c4a <_printf_float+0xb6>
 8002e5a:	f10a 0a01 	add.w	sl, sl, #1
 8002e5e:	e7ee      	b.n	8002e3e <_printf_float+0x2aa>
 8002e60:	7fefffff 	.word	0x7fefffff
 8002e64:	08005768 	.word	0x08005768
 8002e68:	0800576c 	.word	0x0800576c
 8002e6c:	08005770 	.word	0x08005770
 8002e70:	08005774 	.word	0x08005774
 8002e74:	08005778 	.word	0x08005778
 8002e78:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002e7a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8002e7e:	4553      	cmp	r3, sl
 8002e80:	bfa8      	it	ge
 8002e82:	4653      	movge	r3, sl
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	4699      	mov	r9, r3
 8002e88:	dc36      	bgt.n	8002ef8 <_printf_float+0x364>
 8002e8a:	f04f 0b00 	mov.w	fp, #0
 8002e8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002e92:	f104 021a 	add.w	r2, r4, #26
 8002e96:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002e98:	930a      	str	r3, [sp, #40]	@ 0x28
 8002e9a:	eba3 0309 	sub.w	r3, r3, r9
 8002e9e:	455b      	cmp	r3, fp
 8002ea0:	dc31      	bgt.n	8002f06 <_printf_float+0x372>
 8002ea2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002ea4:	459a      	cmp	sl, r3
 8002ea6:	dc3a      	bgt.n	8002f1e <_printf_float+0x38a>
 8002ea8:	6823      	ldr	r3, [r4, #0]
 8002eaa:	07da      	lsls	r2, r3, #31
 8002eac:	d437      	bmi.n	8002f1e <_printf_float+0x38a>
 8002eae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002eb0:	ebaa 0903 	sub.w	r9, sl, r3
 8002eb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002eb6:	ebaa 0303 	sub.w	r3, sl, r3
 8002eba:	4599      	cmp	r9, r3
 8002ebc:	bfa8      	it	ge
 8002ebe:	4699      	movge	r9, r3
 8002ec0:	f1b9 0f00 	cmp.w	r9, #0
 8002ec4:	dc33      	bgt.n	8002f2e <_printf_float+0x39a>
 8002ec6:	f04f 0800 	mov.w	r8, #0
 8002eca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002ece:	f104 0b1a 	add.w	fp, r4, #26
 8002ed2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002ed4:	ebaa 0303 	sub.w	r3, sl, r3
 8002ed8:	eba3 0309 	sub.w	r3, r3, r9
 8002edc:	4543      	cmp	r3, r8
 8002ede:	f77f af7a 	ble.w	8002dd6 <_printf_float+0x242>
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	465a      	mov	r2, fp
 8002ee6:	4631      	mov	r1, r6
 8002ee8:	4628      	mov	r0, r5
 8002eea:	47b8      	blx	r7
 8002eec:	3001      	adds	r0, #1
 8002eee:	f43f aeac 	beq.w	8002c4a <_printf_float+0xb6>
 8002ef2:	f108 0801 	add.w	r8, r8, #1
 8002ef6:	e7ec      	b.n	8002ed2 <_printf_float+0x33e>
 8002ef8:	4642      	mov	r2, r8
 8002efa:	4631      	mov	r1, r6
 8002efc:	4628      	mov	r0, r5
 8002efe:	47b8      	blx	r7
 8002f00:	3001      	adds	r0, #1
 8002f02:	d1c2      	bne.n	8002e8a <_printf_float+0x2f6>
 8002f04:	e6a1      	b.n	8002c4a <_printf_float+0xb6>
 8002f06:	2301      	movs	r3, #1
 8002f08:	4631      	mov	r1, r6
 8002f0a:	4628      	mov	r0, r5
 8002f0c:	920a      	str	r2, [sp, #40]	@ 0x28
 8002f0e:	47b8      	blx	r7
 8002f10:	3001      	adds	r0, #1
 8002f12:	f43f ae9a 	beq.w	8002c4a <_printf_float+0xb6>
 8002f16:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002f18:	f10b 0b01 	add.w	fp, fp, #1
 8002f1c:	e7bb      	b.n	8002e96 <_printf_float+0x302>
 8002f1e:	4631      	mov	r1, r6
 8002f20:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002f24:	4628      	mov	r0, r5
 8002f26:	47b8      	blx	r7
 8002f28:	3001      	adds	r0, #1
 8002f2a:	d1c0      	bne.n	8002eae <_printf_float+0x31a>
 8002f2c:	e68d      	b.n	8002c4a <_printf_float+0xb6>
 8002f2e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002f30:	464b      	mov	r3, r9
 8002f32:	4631      	mov	r1, r6
 8002f34:	4628      	mov	r0, r5
 8002f36:	4442      	add	r2, r8
 8002f38:	47b8      	blx	r7
 8002f3a:	3001      	adds	r0, #1
 8002f3c:	d1c3      	bne.n	8002ec6 <_printf_float+0x332>
 8002f3e:	e684      	b.n	8002c4a <_printf_float+0xb6>
 8002f40:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8002f44:	f1ba 0f01 	cmp.w	sl, #1
 8002f48:	dc01      	bgt.n	8002f4e <_printf_float+0x3ba>
 8002f4a:	07db      	lsls	r3, r3, #31
 8002f4c:	d536      	bpl.n	8002fbc <_printf_float+0x428>
 8002f4e:	2301      	movs	r3, #1
 8002f50:	4642      	mov	r2, r8
 8002f52:	4631      	mov	r1, r6
 8002f54:	4628      	mov	r0, r5
 8002f56:	47b8      	blx	r7
 8002f58:	3001      	adds	r0, #1
 8002f5a:	f43f ae76 	beq.w	8002c4a <_printf_float+0xb6>
 8002f5e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002f62:	4631      	mov	r1, r6
 8002f64:	4628      	mov	r0, r5
 8002f66:	47b8      	blx	r7
 8002f68:	3001      	adds	r0, #1
 8002f6a:	f43f ae6e 	beq.w	8002c4a <_printf_float+0xb6>
 8002f6e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8002f72:	2200      	movs	r2, #0
 8002f74:	2300      	movs	r3, #0
 8002f76:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002f7a:	f7fd fd15 	bl	80009a8 <__aeabi_dcmpeq>
 8002f7e:	b9c0      	cbnz	r0, 8002fb2 <_printf_float+0x41e>
 8002f80:	4653      	mov	r3, sl
 8002f82:	f108 0201 	add.w	r2, r8, #1
 8002f86:	4631      	mov	r1, r6
 8002f88:	4628      	mov	r0, r5
 8002f8a:	47b8      	blx	r7
 8002f8c:	3001      	adds	r0, #1
 8002f8e:	d10c      	bne.n	8002faa <_printf_float+0x416>
 8002f90:	e65b      	b.n	8002c4a <_printf_float+0xb6>
 8002f92:	2301      	movs	r3, #1
 8002f94:	465a      	mov	r2, fp
 8002f96:	4631      	mov	r1, r6
 8002f98:	4628      	mov	r0, r5
 8002f9a:	47b8      	blx	r7
 8002f9c:	3001      	adds	r0, #1
 8002f9e:	f43f ae54 	beq.w	8002c4a <_printf_float+0xb6>
 8002fa2:	f108 0801 	add.w	r8, r8, #1
 8002fa6:	45d0      	cmp	r8, sl
 8002fa8:	dbf3      	blt.n	8002f92 <_printf_float+0x3fe>
 8002faa:	464b      	mov	r3, r9
 8002fac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8002fb0:	e6e0      	b.n	8002d74 <_printf_float+0x1e0>
 8002fb2:	f04f 0800 	mov.w	r8, #0
 8002fb6:	f104 0b1a 	add.w	fp, r4, #26
 8002fba:	e7f4      	b.n	8002fa6 <_printf_float+0x412>
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	4642      	mov	r2, r8
 8002fc0:	e7e1      	b.n	8002f86 <_printf_float+0x3f2>
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	464a      	mov	r2, r9
 8002fc6:	4631      	mov	r1, r6
 8002fc8:	4628      	mov	r0, r5
 8002fca:	47b8      	blx	r7
 8002fcc:	3001      	adds	r0, #1
 8002fce:	f43f ae3c 	beq.w	8002c4a <_printf_float+0xb6>
 8002fd2:	f108 0801 	add.w	r8, r8, #1
 8002fd6:	68e3      	ldr	r3, [r4, #12]
 8002fd8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8002fda:	1a5b      	subs	r3, r3, r1
 8002fdc:	4543      	cmp	r3, r8
 8002fde:	dcf0      	bgt.n	8002fc2 <_printf_float+0x42e>
 8002fe0:	e6fd      	b.n	8002dde <_printf_float+0x24a>
 8002fe2:	f04f 0800 	mov.w	r8, #0
 8002fe6:	f104 0919 	add.w	r9, r4, #25
 8002fea:	e7f4      	b.n	8002fd6 <_printf_float+0x442>

08002fec <_printf_common>:
 8002fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ff0:	4616      	mov	r6, r2
 8002ff2:	4698      	mov	r8, r3
 8002ff4:	688a      	ldr	r2, [r1, #8]
 8002ff6:	690b      	ldr	r3, [r1, #16]
 8002ff8:	4607      	mov	r7, r0
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	bfb8      	it	lt
 8002ffe:	4613      	movlt	r3, r2
 8003000:	6033      	str	r3, [r6, #0]
 8003002:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003006:	460c      	mov	r4, r1
 8003008:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800300c:	b10a      	cbz	r2, 8003012 <_printf_common+0x26>
 800300e:	3301      	adds	r3, #1
 8003010:	6033      	str	r3, [r6, #0]
 8003012:	6823      	ldr	r3, [r4, #0]
 8003014:	0699      	lsls	r1, r3, #26
 8003016:	bf42      	ittt	mi
 8003018:	6833      	ldrmi	r3, [r6, #0]
 800301a:	3302      	addmi	r3, #2
 800301c:	6033      	strmi	r3, [r6, #0]
 800301e:	6825      	ldr	r5, [r4, #0]
 8003020:	f015 0506 	ands.w	r5, r5, #6
 8003024:	d106      	bne.n	8003034 <_printf_common+0x48>
 8003026:	f104 0a19 	add.w	sl, r4, #25
 800302a:	68e3      	ldr	r3, [r4, #12]
 800302c:	6832      	ldr	r2, [r6, #0]
 800302e:	1a9b      	subs	r3, r3, r2
 8003030:	42ab      	cmp	r3, r5
 8003032:	dc2b      	bgt.n	800308c <_printf_common+0xa0>
 8003034:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003038:	6822      	ldr	r2, [r4, #0]
 800303a:	3b00      	subs	r3, #0
 800303c:	bf18      	it	ne
 800303e:	2301      	movne	r3, #1
 8003040:	0692      	lsls	r2, r2, #26
 8003042:	d430      	bmi.n	80030a6 <_printf_common+0xba>
 8003044:	4641      	mov	r1, r8
 8003046:	4638      	mov	r0, r7
 8003048:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800304c:	47c8      	blx	r9
 800304e:	3001      	adds	r0, #1
 8003050:	d023      	beq.n	800309a <_printf_common+0xae>
 8003052:	6823      	ldr	r3, [r4, #0]
 8003054:	6922      	ldr	r2, [r4, #16]
 8003056:	f003 0306 	and.w	r3, r3, #6
 800305a:	2b04      	cmp	r3, #4
 800305c:	bf14      	ite	ne
 800305e:	2500      	movne	r5, #0
 8003060:	6833      	ldreq	r3, [r6, #0]
 8003062:	f04f 0600 	mov.w	r6, #0
 8003066:	bf08      	it	eq
 8003068:	68e5      	ldreq	r5, [r4, #12]
 800306a:	f104 041a 	add.w	r4, r4, #26
 800306e:	bf08      	it	eq
 8003070:	1aed      	subeq	r5, r5, r3
 8003072:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003076:	bf08      	it	eq
 8003078:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800307c:	4293      	cmp	r3, r2
 800307e:	bfc4      	itt	gt
 8003080:	1a9b      	subgt	r3, r3, r2
 8003082:	18ed      	addgt	r5, r5, r3
 8003084:	42b5      	cmp	r5, r6
 8003086:	d11a      	bne.n	80030be <_printf_common+0xd2>
 8003088:	2000      	movs	r0, #0
 800308a:	e008      	b.n	800309e <_printf_common+0xb2>
 800308c:	2301      	movs	r3, #1
 800308e:	4652      	mov	r2, sl
 8003090:	4641      	mov	r1, r8
 8003092:	4638      	mov	r0, r7
 8003094:	47c8      	blx	r9
 8003096:	3001      	adds	r0, #1
 8003098:	d103      	bne.n	80030a2 <_printf_common+0xb6>
 800309a:	f04f 30ff 	mov.w	r0, #4294967295
 800309e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030a2:	3501      	adds	r5, #1
 80030a4:	e7c1      	b.n	800302a <_printf_common+0x3e>
 80030a6:	2030      	movs	r0, #48	@ 0x30
 80030a8:	18e1      	adds	r1, r4, r3
 80030aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80030ae:	1c5a      	adds	r2, r3, #1
 80030b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80030b4:	4422      	add	r2, r4
 80030b6:	3302      	adds	r3, #2
 80030b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80030bc:	e7c2      	b.n	8003044 <_printf_common+0x58>
 80030be:	2301      	movs	r3, #1
 80030c0:	4622      	mov	r2, r4
 80030c2:	4641      	mov	r1, r8
 80030c4:	4638      	mov	r0, r7
 80030c6:	47c8      	blx	r9
 80030c8:	3001      	adds	r0, #1
 80030ca:	d0e6      	beq.n	800309a <_printf_common+0xae>
 80030cc:	3601      	adds	r6, #1
 80030ce:	e7d9      	b.n	8003084 <_printf_common+0x98>

080030d0 <_printf_i>:
 80030d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80030d4:	7e0f      	ldrb	r7, [r1, #24]
 80030d6:	4691      	mov	r9, r2
 80030d8:	2f78      	cmp	r7, #120	@ 0x78
 80030da:	4680      	mov	r8, r0
 80030dc:	460c      	mov	r4, r1
 80030de:	469a      	mov	sl, r3
 80030e0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80030e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80030e6:	d807      	bhi.n	80030f8 <_printf_i+0x28>
 80030e8:	2f62      	cmp	r7, #98	@ 0x62
 80030ea:	d80a      	bhi.n	8003102 <_printf_i+0x32>
 80030ec:	2f00      	cmp	r7, #0
 80030ee:	f000 80d3 	beq.w	8003298 <_printf_i+0x1c8>
 80030f2:	2f58      	cmp	r7, #88	@ 0x58
 80030f4:	f000 80ba 	beq.w	800326c <_printf_i+0x19c>
 80030f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80030fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003100:	e03a      	b.n	8003178 <_printf_i+0xa8>
 8003102:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003106:	2b15      	cmp	r3, #21
 8003108:	d8f6      	bhi.n	80030f8 <_printf_i+0x28>
 800310a:	a101      	add	r1, pc, #4	@ (adr r1, 8003110 <_printf_i+0x40>)
 800310c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003110:	08003169 	.word	0x08003169
 8003114:	0800317d 	.word	0x0800317d
 8003118:	080030f9 	.word	0x080030f9
 800311c:	080030f9 	.word	0x080030f9
 8003120:	080030f9 	.word	0x080030f9
 8003124:	080030f9 	.word	0x080030f9
 8003128:	0800317d 	.word	0x0800317d
 800312c:	080030f9 	.word	0x080030f9
 8003130:	080030f9 	.word	0x080030f9
 8003134:	080030f9 	.word	0x080030f9
 8003138:	080030f9 	.word	0x080030f9
 800313c:	0800327f 	.word	0x0800327f
 8003140:	080031a7 	.word	0x080031a7
 8003144:	08003239 	.word	0x08003239
 8003148:	080030f9 	.word	0x080030f9
 800314c:	080030f9 	.word	0x080030f9
 8003150:	080032a1 	.word	0x080032a1
 8003154:	080030f9 	.word	0x080030f9
 8003158:	080031a7 	.word	0x080031a7
 800315c:	080030f9 	.word	0x080030f9
 8003160:	080030f9 	.word	0x080030f9
 8003164:	08003241 	.word	0x08003241
 8003168:	6833      	ldr	r3, [r6, #0]
 800316a:	1d1a      	adds	r2, r3, #4
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6032      	str	r2, [r6, #0]
 8003170:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003174:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003178:	2301      	movs	r3, #1
 800317a:	e09e      	b.n	80032ba <_printf_i+0x1ea>
 800317c:	6833      	ldr	r3, [r6, #0]
 800317e:	6820      	ldr	r0, [r4, #0]
 8003180:	1d19      	adds	r1, r3, #4
 8003182:	6031      	str	r1, [r6, #0]
 8003184:	0606      	lsls	r6, r0, #24
 8003186:	d501      	bpl.n	800318c <_printf_i+0xbc>
 8003188:	681d      	ldr	r5, [r3, #0]
 800318a:	e003      	b.n	8003194 <_printf_i+0xc4>
 800318c:	0645      	lsls	r5, r0, #25
 800318e:	d5fb      	bpl.n	8003188 <_printf_i+0xb8>
 8003190:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003194:	2d00      	cmp	r5, #0
 8003196:	da03      	bge.n	80031a0 <_printf_i+0xd0>
 8003198:	232d      	movs	r3, #45	@ 0x2d
 800319a:	426d      	negs	r5, r5
 800319c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80031a0:	230a      	movs	r3, #10
 80031a2:	4859      	ldr	r0, [pc, #356]	@ (8003308 <_printf_i+0x238>)
 80031a4:	e011      	b.n	80031ca <_printf_i+0xfa>
 80031a6:	6821      	ldr	r1, [r4, #0]
 80031a8:	6833      	ldr	r3, [r6, #0]
 80031aa:	0608      	lsls	r0, r1, #24
 80031ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80031b0:	d402      	bmi.n	80031b8 <_printf_i+0xe8>
 80031b2:	0649      	lsls	r1, r1, #25
 80031b4:	bf48      	it	mi
 80031b6:	b2ad      	uxthmi	r5, r5
 80031b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80031ba:	6033      	str	r3, [r6, #0]
 80031bc:	bf14      	ite	ne
 80031be:	230a      	movne	r3, #10
 80031c0:	2308      	moveq	r3, #8
 80031c2:	4851      	ldr	r0, [pc, #324]	@ (8003308 <_printf_i+0x238>)
 80031c4:	2100      	movs	r1, #0
 80031c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80031ca:	6866      	ldr	r6, [r4, #4]
 80031cc:	2e00      	cmp	r6, #0
 80031ce:	bfa8      	it	ge
 80031d0:	6821      	ldrge	r1, [r4, #0]
 80031d2:	60a6      	str	r6, [r4, #8]
 80031d4:	bfa4      	itt	ge
 80031d6:	f021 0104 	bicge.w	r1, r1, #4
 80031da:	6021      	strge	r1, [r4, #0]
 80031dc:	b90d      	cbnz	r5, 80031e2 <_printf_i+0x112>
 80031de:	2e00      	cmp	r6, #0
 80031e0:	d04b      	beq.n	800327a <_printf_i+0x1aa>
 80031e2:	4616      	mov	r6, r2
 80031e4:	fbb5 f1f3 	udiv	r1, r5, r3
 80031e8:	fb03 5711 	mls	r7, r3, r1, r5
 80031ec:	5dc7      	ldrb	r7, [r0, r7]
 80031ee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80031f2:	462f      	mov	r7, r5
 80031f4:	42bb      	cmp	r3, r7
 80031f6:	460d      	mov	r5, r1
 80031f8:	d9f4      	bls.n	80031e4 <_printf_i+0x114>
 80031fa:	2b08      	cmp	r3, #8
 80031fc:	d10b      	bne.n	8003216 <_printf_i+0x146>
 80031fe:	6823      	ldr	r3, [r4, #0]
 8003200:	07df      	lsls	r7, r3, #31
 8003202:	d508      	bpl.n	8003216 <_printf_i+0x146>
 8003204:	6923      	ldr	r3, [r4, #16]
 8003206:	6861      	ldr	r1, [r4, #4]
 8003208:	4299      	cmp	r1, r3
 800320a:	bfde      	ittt	le
 800320c:	2330      	movle	r3, #48	@ 0x30
 800320e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003212:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003216:	1b92      	subs	r2, r2, r6
 8003218:	6122      	str	r2, [r4, #16]
 800321a:	464b      	mov	r3, r9
 800321c:	4621      	mov	r1, r4
 800321e:	4640      	mov	r0, r8
 8003220:	f8cd a000 	str.w	sl, [sp]
 8003224:	aa03      	add	r2, sp, #12
 8003226:	f7ff fee1 	bl	8002fec <_printf_common>
 800322a:	3001      	adds	r0, #1
 800322c:	d14a      	bne.n	80032c4 <_printf_i+0x1f4>
 800322e:	f04f 30ff 	mov.w	r0, #4294967295
 8003232:	b004      	add	sp, #16
 8003234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003238:	6823      	ldr	r3, [r4, #0]
 800323a:	f043 0320 	orr.w	r3, r3, #32
 800323e:	6023      	str	r3, [r4, #0]
 8003240:	2778      	movs	r7, #120	@ 0x78
 8003242:	4832      	ldr	r0, [pc, #200]	@ (800330c <_printf_i+0x23c>)
 8003244:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003248:	6823      	ldr	r3, [r4, #0]
 800324a:	6831      	ldr	r1, [r6, #0]
 800324c:	061f      	lsls	r7, r3, #24
 800324e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003252:	d402      	bmi.n	800325a <_printf_i+0x18a>
 8003254:	065f      	lsls	r7, r3, #25
 8003256:	bf48      	it	mi
 8003258:	b2ad      	uxthmi	r5, r5
 800325a:	6031      	str	r1, [r6, #0]
 800325c:	07d9      	lsls	r1, r3, #31
 800325e:	bf44      	itt	mi
 8003260:	f043 0320 	orrmi.w	r3, r3, #32
 8003264:	6023      	strmi	r3, [r4, #0]
 8003266:	b11d      	cbz	r5, 8003270 <_printf_i+0x1a0>
 8003268:	2310      	movs	r3, #16
 800326a:	e7ab      	b.n	80031c4 <_printf_i+0xf4>
 800326c:	4826      	ldr	r0, [pc, #152]	@ (8003308 <_printf_i+0x238>)
 800326e:	e7e9      	b.n	8003244 <_printf_i+0x174>
 8003270:	6823      	ldr	r3, [r4, #0]
 8003272:	f023 0320 	bic.w	r3, r3, #32
 8003276:	6023      	str	r3, [r4, #0]
 8003278:	e7f6      	b.n	8003268 <_printf_i+0x198>
 800327a:	4616      	mov	r6, r2
 800327c:	e7bd      	b.n	80031fa <_printf_i+0x12a>
 800327e:	6833      	ldr	r3, [r6, #0]
 8003280:	6825      	ldr	r5, [r4, #0]
 8003282:	1d18      	adds	r0, r3, #4
 8003284:	6961      	ldr	r1, [r4, #20]
 8003286:	6030      	str	r0, [r6, #0]
 8003288:	062e      	lsls	r6, r5, #24
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	d501      	bpl.n	8003292 <_printf_i+0x1c2>
 800328e:	6019      	str	r1, [r3, #0]
 8003290:	e002      	b.n	8003298 <_printf_i+0x1c8>
 8003292:	0668      	lsls	r0, r5, #25
 8003294:	d5fb      	bpl.n	800328e <_printf_i+0x1be>
 8003296:	8019      	strh	r1, [r3, #0]
 8003298:	2300      	movs	r3, #0
 800329a:	4616      	mov	r6, r2
 800329c:	6123      	str	r3, [r4, #16]
 800329e:	e7bc      	b.n	800321a <_printf_i+0x14a>
 80032a0:	6833      	ldr	r3, [r6, #0]
 80032a2:	2100      	movs	r1, #0
 80032a4:	1d1a      	adds	r2, r3, #4
 80032a6:	6032      	str	r2, [r6, #0]
 80032a8:	681e      	ldr	r6, [r3, #0]
 80032aa:	6862      	ldr	r2, [r4, #4]
 80032ac:	4630      	mov	r0, r6
 80032ae:	f000 f9d4 	bl	800365a <memchr>
 80032b2:	b108      	cbz	r0, 80032b8 <_printf_i+0x1e8>
 80032b4:	1b80      	subs	r0, r0, r6
 80032b6:	6060      	str	r0, [r4, #4]
 80032b8:	6863      	ldr	r3, [r4, #4]
 80032ba:	6123      	str	r3, [r4, #16]
 80032bc:	2300      	movs	r3, #0
 80032be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80032c2:	e7aa      	b.n	800321a <_printf_i+0x14a>
 80032c4:	4632      	mov	r2, r6
 80032c6:	4649      	mov	r1, r9
 80032c8:	4640      	mov	r0, r8
 80032ca:	6923      	ldr	r3, [r4, #16]
 80032cc:	47d0      	blx	sl
 80032ce:	3001      	adds	r0, #1
 80032d0:	d0ad      	beq.n	800322e <_printf_i+0x15e>
 80032d2:	6823      	ldr	r3, [r4, #0]
 80032d4:	079b      	lsls	r3, r3, #30
 80032d6:	d413      	bmi.n	8003300 <_printf_i+0x230>
 80032d8:	68e0      	ldr	r0, [r4, #12]
 80032da:	9b03      	ldr	r3, [sp, #12]
 80032dc:	4298      	cmp	r0, r3
 80032de:	bfb8      	it	lt
 80032e0:	4618      	movlt	r0, r3
 80032e2:	e7a6      	b.n	8003232 <_printf_i+0x162>
 80032e4:	2301      	movs	r3, #1
 80032e6:	4632      	mov	r2, r6
 80032e8:	4649      	mov	r1, r9
 80032ea:	4640      	mov	r0, r8
 80032ec:	47d0      	blx	sl
 80032ee:	3001      	adds	r0, #1
 80032f0:	d09d      	beq.n	800322e <_printf_i+0x15e>
 80032f2:	3501      	adds	r5, #1
 80032f4:	68e3      	ldr	r3, [r4, #12]
 80032f6:	9903      	ldr	r1, [sp, #12]
 80032f8:	1a5b      	subs	r3, r3, r1
 80032fa:	42ab      	cmp	r3, r5
 80032fc:	dcf2      	bgt.n	80032e4 <_printf_i+0x214>
 80032fe:	e7eb      	b.n	80032d8 <_printf_i+0x208>
 8003300:	2500      	movs	r5, #0
 8003302:	f104 0619 	add.w	r6, r4, #25
 8003306:	e7f5      	b.n	80032f4 <_printf_i+0x224>
 8003308:	0800577a 	.word	0x0800577a
 800330c:	0800578b 	.word	0x0800578b

08003310 <std>:
 8003310:	2300      	movs	r3, #0
 8003312:	b510      	push	{r4, lr}
 8003314:	4604      	mov	r4, r0
 8003316:	e9c0 3300 	strd	r3, r3, [r0]
 800331a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800331e:	6083      	str	r3, [r0, #8]
 8003320:	8181      	strh	r1, [r0, #12]
 8003322:	6643      	str	r3, [r0, #100]	@ 0x64
 8003324:	81c2      	strh	r2, [r0, #14]
 8003326:	6183      	str	r3, [r0, #24]
 8003328:	4619      	mov	r1, r3
 800332a:	2208      	movs	r2, #8
 800332c:	305c      	adds	r0, #92	@ 0x5c
 800332e:	f000 f914 	bl	800355a <memset>
 8003332:	4b0d      	ldr	r3, [pc, #52]	@ (8003368 <std+0x58>)
 8003334:	6224      	str	r4, [r4, #32]
 8003336:	6263      	str	r3, [r4, #36]	@ 0x24
 8003338:	4b0c      	ldr	r3, [pc, #48]	@ (800336c <std+0x5c>)
 800333a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800333c:	4b0c      	ldr	r3, [pc, #48]	@ (8003370 <std+0x60>)
 800333e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003340:	4b0c      	ldr	r3, [pc, #48]	@ (8003374 <std+0x64>)
 8003342:	6323      	str	r3, [r4, #48]	@ 0x30
 8003344:	4b0c      	ldr	r3, [pc, #48]	@ (8003378 <std+0x68>)
 8003346:	429c      	cmp	r4, r3
 8003348:	d006      	beq.n	8003358 <std+0x48>
 800334a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800334e:	4294      	cmp	r4, r2
 8003350:	d002      	beq.n	8003358 <std+0x48>
 8003352:	33d0      	adds	r3, #208	@ 0xd0
 8003354:	429c      	cmp	r4, r3
 8003356:	d105      	bne.n	8003364 <std+0x54>
 8003358:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800335c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003360:	f000 b978 	b.w	8003654 <__retarget_lock_init_recursive>
 8003364:	bd10      	pop	{r4, pc}
 8003366:	bf00      	nop
 8003368:	080034d5 	.word	0x080034d5
 800336c:	080034f7 	.word	0x080034f7
 8003370:	0800352f 	.word	0x0800352f
 8003374:	08003553 	.word	0x08003553
 8003378:	20000294 	.word	0x20000294

0800337c <stdio_exit_handler>:
 800337c:	4a02      	ldr	r2, [pc, #8]	@ (8003388 <stdio_exit_handler+0xc>)
 800337e:	4903      	ldr	r1, [pc, #12]	@ (800338c <stdio_exit_handler+0x10>)
 8003380:	4803      	ldr	r0, [pc, #12]	@ (8003390 <stdio_exit_handler+0x14>)
 8003382:	f000 b869 	b.w	8003458 <_fwalk_sglue>
 8003386:	bf00      	nop
 8003388:	2000000c 	.word	0x2000000c
 800338c:	08004fc5 	.word	0x08004fc5
 8003390:	2000001c 	.word	0x2000001c

08003394 <cleanup_stdio>:
 8003394:	6841      	ldr	r1, [r0, #4]
 8003396:	4b0c      	ldr	r3, [pc, #48]	@ (80033c8 <cleanup_stdio+0x34>)
 8003398:	b510      	push	{r4, lr}
 800339a:	4299      	cmp	r1, r3
 800339c:	4604      	mov	r4, r0
 800339e:	d001      	beq.n	80033a4 <cleanup_stdio+0x10>
 80033a0:	f001 fe10 	bl	8004fc4 <_fflush_r>
 80033a4:	68a1      	ldr	r1, [r4, #8]
 80033a6:	4b09      	ldr	r3, [pc, #36]	@ (80033cc <cleanup_stdio+0x38>)
 80033a8:	4299      	cmp	r1, r3
 80033aa:	d002      	beq.n	80033b2 <cleanup_stdio+0x1e>
 80033ac:	4620      	mov	r0, r4
 80033ae:	f001 fe09 	bl	8004fc4 <_fflush_r>
 80033b2:	68e1      	ldr	r1, [r4, #12]
 80033b4:	4b06      	ldr	r3, [pc, #24]	@ (80033d0 <cleanup_stdio+0x3c>)
 80033b6:	4299      	cmp	r1, r3
 80033b8:	d004      	beq.n	80033c4 <cleanup_stdio+0x30>
 80033ba:	4620      	mov	r0, r4
 80033bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033c0:	f001 be00 	b.w	8004fc4 <_fflush_r>
 80033c4:	bd10      	pop	{r4, pc}
 80033c6:	bf00      	nop
 80033c8:	20000294 	.word	0x20000294
 80033cc:	200002fc 	.word	0x200002fc
 80033d0:	20000364 	.word	0x20000364

080033d4 <global_stdio_init.part.0>:
 80033d4:	b510      	push	{r4, lr}
 80033d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003404 <global_stdio_init.part.0+0x30>)
 80033d8:	4c0b      	ldr	r4, [pc, #44]	@ (8003408 <global_stdio_init.part.0+0x34>)
 80033da:	4a0c      	ldr	r2, [pc, #48]	@ (800340c <global_stdio_init.part.0+0x38>)
 80033dc:	4620      	mov	r0, r4
 80033de:	601a      	str	r2, [r3, #0]
 80033e0:	2104      	movs	r1, #4
 80033e2:	2200      	movs	r2, #0
 80033e4:	f7ff ff94 	bl	8003310 <std>
 80033e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80033ec:	2201      	movs	r2, #1
 80033ee:	2109      	movs	r1, #9
 80033f0:	f7ff ff8e 	bl	8003310 <std>
 80033f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80033f8:	2202      	movs	r2, #2
 80033fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033fe:	2112      	movs	r1, #18
 8003400:	f7ff bf86 	b.w	8003310 <std>
 8003404:	200003cc 	.word	0x200003cc
 8003408:	20000294 	.word	0x20000294
 800340c:	0800337d 	.word	0x0800337d

08003410 <__sfp_lock_acquire>:
 8003410:	4801      	ldr	r0, [pc, #4]	@ (8003418 <__sfp_lock_acquire+0x8>)
 8003412:	f000 b920 	b.w	8003656 <__retarget_lock_acquire_recursive>
 8003416:	bf00      	nop
 8003418:	200003d5 	.word	0x200003d5

0800341c <__sfp_lock_release>:
 800341c:	4801      	ldr	r0, [pc, #4]	@ (8003424 <__sfp_lock_release+0x8>)
 800341e:	f000 b91b 	b.w	8003658 <__retarget_lock_release_recursive>
 8003422:	bf00      	nop
 8003424:	200003d5 	.word	0x200003d5

08003428 <__sinit>:
 8003428:	b510      	push	{r4, lr}
 800342a:	4604      	mov	r4, r0
 800342c:	f7ff fff0 	bl	8003410 <__sfp_lock_acquire>
 8003430:	6a23      	ldr	r3, [r4, #32]
 8003432:	b11b      	cbz	r3, 800343c <__sinit+0x14>
 8003434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003438:	f7ff bff0 	b.w	800341c <__sfp_lock_release>
 800343c:	4b04      	ldr	r3, [pc, #16]	@ (8003450 <__sinit+0x28>)
 800343e:	6223      	str	r3, [r4, #32]
 8003440:	4b04      	ldr	r3, [pc, #16]	@ (8003454 <__sinit+0x2c>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1f5      	bne.n	8003434 <__sinit+0xc>
 8003448:	f7ff ffc4 	bl	80033d4 <global_stdio_init.part.0>
 800344c:	e7f2      	b.n	8003434 <__sinit+0xc>
 800344e:	bf00      	nop
 8003450:	08003395 	.word	0x08003395
 8003454:	200003cc 	.word	0x200003cc

08003458 <_fwalk_sglue>:
 8003458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800345c:	4607      	mov	r7, r0
 800345e:	4688      	mov	r8, r1
 8003460:	4614      	mov	r4, r2
 8003462:	2600      	movs	r6, #0
 8003464:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003468:	f1b9 0901 	subs.w	r9, r9, #1
 800346c:	d505      	bpl.n	800347a <_fwalk_sglue+0x22>
 800346e:	6824      	ldr	r4, [r4, #0]
 8003470:	2c00      	cmp	r4, #0
 8003472:	d1f7      	bne.n	8003464 <_fwalk_sglue+0xc>
 8003474:	4630      	mov	r0, r6
 8003476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800347a:	89ab      	ldrh	r3, [r5, #12]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d907      	bls.n	8003490 <_fwalk_sglue+0x38>
 8003480:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003484:	3301      	adds	r3, #1
 8003486:	d003      	beq.n	8003490 <_fwalk_sglue+0x38>
 8003488:	4629      	mov	r1, r5
 800348a:	4638      	mov	r0, r7
 800348c:	47c0      	blx	r8
 800348e:	4306      	orrs	r6, r0
 8003490:	3568      	adds	r5, #104	@ 0x68
 8003492:	e7e9      	b.n	8003468 <_fwalk_sglue+0x10>

08003494 <siprintf>:
 8003494:	b40e      	push	{r1, r2, r3}
 8003496:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800349a:	b500      	push	{lr}
 800349c:	b09c      	sub	sp, #112	@ 0x70
 800349e:	ab1d      	add	r3, sp, #116	@ 0x74
 80034a0:	9002      	str	r0, [sp, #8]
 80034a2:	9006      	str	r0, [sp, #24]
 80034a4:	9107      	str	r1, [sp, #28]
 80034a6:	9104      	str	r1, [sp, #16]
 80034a8:	4808      	ldr	r0, [pc, #32]	@ (80034cc <siprintf+0x38>)
 80034aa:	4909      	ldr	r1, [pc, #36]	@ (80034d0 <siprintf+0x3c>)
 80034ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80034b0:	9105      	str	r1, [sp, #20]
 80034b2:	6800      	ldr	r0, [r0, #0]
 80034b4:	a902      	add	r1, sp, #8
 80034b6:	9301      	str	r3, [sp, #4]
 80034b8:	f001 fc08 	bl	8004ccc <_svfiprintf_r>
 80034bc:	2200      	movs	r2, #0
 80034be:	9b02      	ldr	r3, [sp, #8]
 80034c0:	701a      	strb	r2, [r3, #0]
 80034c2:	b01c      	add	sp, #112	@ 0x70
 80034c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80034c8:	b003      	add	sp, #12
 80034ca:	4770      	bx	lr
 80034cc:	20000018 	.word	0x20000018
 80034d0:	ffff0208 	.word	0xffff0208

080034d4 <__sread>:
 80034d4:	b510      	push	{r4, lr}
 80034d6:	460c      	mov	r4, r1
 80034d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034dc:	f000 f86c 	bl	80035b8 <_read_r>
 80034e0:	2800      	cmp	r0, #0
 80034e2:	bfab      	itete	ge
 80034e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80034e6:	89a3      	ldrhlt	r3, [r4, #12]
 80034e8:	181b      	addge	r3, r3, r0
 80034ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80034ee:	bfac      	ite	ge
 80034f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80034f2:	81a3      	strhlt	r3, [r4, #12]
 80034f4:	bd10      	pop	{r4, pc}

080034f6 <__swrite>:
 80034f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034fa:	461f      	mov	r7, r3
 80034fc:	898b      	ldrh	r3, [r1, #12]
 80034fe:	4605      	mov	r5, r0
 8003500:	05db      	lsls	r3, r3, #23
 8003502:	460c      	mov	r4, r1
 8003504:	4616      	mov	r6, r2
 8003506:	d505      	bpl.n	8003514 <__swrite+0x1e>
 8003508:	2302      	movs	r3, #2
 800350a:	2200      	movs	r2, #0
 800350c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003510:	f000 f840 	bl	8003594 <_lseek_r>
 8003514:	89a3      	ldrh	r3, [r4, #12]
 8003516:	4632      	mov	r2, r6
 8003518:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800351c:	81a3      	strh	r3, [r4, #12]
 800351e:	4628      	mov	r0, r5
 8003520:	463b      	mov	r3, r7
 8003522:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003526:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800352a:	f000 b857 	b.w	80035dc <_write_r>

0800352e <__sseek>:
 800352e:	b510      	push	{r4, lr}
 8003530:	460c      	mov	r4, r1
 8003532:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003536:	f000 f82d 	bl	8003594 <_lseek_r>
 800353a:	1c43      	adds	r3, r0, #1
 800353c:	89a3      	ldrh	r3, [r4, #12]
 800353e:	bf15      	itete	ne
 8003540:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003542:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003546:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800354a:	81a3      	strheq	r3, [r4, #12]
 800354c:	bf18      	it	ne
 800354e:	81a3      	strhne	r3, [r4, #12]
 8003550:	bd10      	pop	{r4, pc}

08003552 <__sclose>:
 8003552:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003556:	f000 b80d 	b.w	8003574 <_close_r>

0800355a <memset>:
 800355a:	4603      	mov	r3, r0
 800355c:	4402      	add	r2, r0
 800355e:	4293      	cmp	r3, r2
 8003560:	d100      	bne.n	8003564 <memset+0xa>
 8003562:	4770      	bx	lr
 8003564:	f803 1b01 	strb.w	r1, [r3], #1
 8003568:	e7f9      	b.n	800355e <memset+0x4>
	...

0800356c <_localeconv_r>:
 800356c:	4800      	ldr	r0, [pc, #0]	@ (8003570 <_localeconv_r+0x4>)
 800356e:	4770      	bx	lr
 8003570:	20000158 	.word	0x20000158

08003574 <_close_r>:
 8003574:	b538      	push	{r3, r4, r5, lr}
 8003576:	2300      	movs	r3, #0
 8003578:	4d05      	ldr	r5, [pc, #20]	@ (8003590 <_close_r+0x1c>)
 800357a:	4604      	mov	r4, r0
 800357c:	4608      	mov	r0, r1
 800357e:	602b      	str	r3, [r5, #0]
 8003580:	f7fd fd43 	bl	800100a <_close>
 8003584:	1c43      	adds	r3, r0, #1
 8003586:	d102      	bne.n	800358e <_close_r+0x1a>
 8003588:	682b      	ldr	r3, [r5, #0]
 800358a:	b103      	cbz	r3, 800358e <_close_r+0x1a>
 800358c:	6023      	str	r3, [r4, #0]
 800358e:	bd38      	pop	{r3, r4, r5, pc}
 8003590:	200003d0 	.word	0x200003d0

08003594 <_lseek_r>:
 8003594:	b538      	push	{r3, r4, r5, lr}
 8003596:	4604      	mov	r4, r0
 8003598:	4608      	mov	r0, r1
 800359a:	4611      	mov	r1, r2
 800359c:	2200      	movs	r2, #0
 800359e:	4d05      	ldr	r5, [pc, #20]	@ (80035b4 <_lseek_r+0x20>)
 80035a0:	602a      	str	r2, [r5, #0]
 80035a2:	461a      	mov	r2, r3
 80035a4:	f7fd fd55 	bl	8001052 <_lseek>
 80035a8:	1c43      	adds	r3, r0, #1
 80035aa:	d102      	bne.n	80035b2 <_lseek_r+0x1e>
 80035ac:	682b      	ldr	r3, [r5, #0]
 80035ae:	b103      	cbz	r3, 80035b2 <_lseek_r+0x1e>
 80035b0:	6023      	str	r3, [r4, #0]
 80035b2:	bd38      	pop	{r3, r4, r5, pc}
 80035b4:	200003d0 	.word	0x200003d0

080035b8 <_read_r>:
 80035b8:	b538      	push	{r3, r4, r5, lr}
 80035ba:	4604      	mov	r4, r0
 80035bc:	4608      	mov	r0, r1
 80035be:	4611      	mov	r1, r2
 80035c0:	2200      	movs	r2, #0
 80035c2:	4d05      	ldr	r5, [pc, #20]	@ (80035d8 <_read_r+0x20>)
 80035c4:	602a      	str	r2, [r5, #0]
 80035c6:	461a      	mov	r2, r3
 80035c8:	f7fd fce6 	bl	8000f98 <_read>
 80035cc:	1c43      	adds	r3, r0, #1
 80035ce:	d102      	bne.n	80035d6 <_read_r+0x1e>
 80035d0:	682b      	ldr	r3, [r5, #0]
 80035d2:	b103      	cbz	r3, 80035d6 <_read_r+0x1e>
 80035d4:	6023      	str	r3, [r4, #0]
 80035d6:	bd38      	pop	{r3, r4, r5, pc}
 80035d8:	200003d0 	.word	0x200003d0

080035dc <_write_r>:
 80035dc:	b538      	push	{r3, r4, r5, lr}
 80035de:	4604      	mov	r4, r0
 80035e0:	4608      	mov	r0, r1
 80035e2:	4611      	mov	r1, r2
 80035e4:	2200      	movs	r2, #0
 80035e6:	4d05      	ldr	r5, [pc, #20]	@ (80035fc <_write_r+0x20>)
 80035e8:	602a      	str	r2, [r5, #0]
 80035ea:	461a      	mov	r2, r3
 80035ec:	f7fd fcf1 	bl	8000fd2 <_write>
 80035f0:	1c43      	adds	r3, r0, #1
 80035f2:	d102      	bne.n	80035fa <_write_r+0x1e>
 80035f4:	682b      	ldr	r3, [r5, #0]
 80035f6:	b103      	cbz	r3, 80035fa <_write_r+0x1e>
 80035f8:	6023      	str	r3, [r4, #0]
 80035fa:	bd38      	pop	{r3, r4, r5, pc}
 80035fc:	200003d0 	.word	0x200003d0

08003600 <__errno>:
 8003600:	4b01      	ldr	r3, [pc, #4]	@ (8003608 <__errno+0x8>)
 8003602:	6818      	ldr	r0, [r3, #0]
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	20000018 	.word	0x20000018

0800360c <__libc_init_array>:
 800360c:	b570      	push	{r4, r5, r6, lr}
 800360e:	2600      	movs	r6, #0
 8003610:	4d0c      	ldr	r5, [pc, #48]	@ (8003644 <__libc_init_array+0x38>)
 8003612:	4c0d      	ldr	r4, [pc, #52]	@ (8003648 <__libc_init_array+0x3c>)
 8003614:	1b64      	subs	r4, r4, r5
 8003616:	10a4      	asrs	r4, r4, #2
 8003618:	42a6      	cmp	r6, r4
 800361a:	d109      	bne.n	8003630 <__libc_init_array+0x24>
 800361c:	f002 f86e 	bl	80056fc <_init>
 8003620:	2600      	movs	r6, #0
 8003622:	4d0a      	ldr	r5, [pc, #40]	@ (800364c <__libc_init_array+0x40>)
 8003624:	4c0a      	ldr	r4, [pc, #40]	@ (8003650 <__libc_init_array+0x44>)
 8003626:	1b64      	subs	r4, r4, r5
 8003628:	10a4      	asrs	r4, r4, #2
 800362a:	42a6      	cmp	r6, r4
 800362c:	d105      	bne.n	800363a <__libc_init_array+0x2e>
 800362e:	bd70      	pop	{r4, r5, r6, pc}
 8003630:	f855 3b04 	ldr.w	r3, [r5], #4
 8003634:	4798      	blx	r3
 8003636:	3601      	adds	r6, #1
 8003638:	e7ee      	b.n	8003618 <__libc_init_array+0xc>
 800363a:	f855 3b04 	ldr.w	r3, [r5], #4
 800363e:	4798      	blx	r3
 8003640:	3601      	adds	r6, #1
 8003642:	e7f2      	b.n	800362a <__libc_init_array+0x1e>
 8003644:	08005ae0 	.word	0x08005ae0
 8003648:	08005ae0 	.word	0x08005ae0
 800364c:	08005ae0 	.word	0x08005ae0
 8003650:	08005ae4 	.word	0x08005ae4

08003654 <__retarget_lock_init_recursive>:
 8003654:	4770      	bx	lr

08003656 <__retarget_lock_acquire_recursive>:
 8003656:	4770      	bx	lr

08003658 <__retarget_lock_release_recursive>:
 8003658:	4770      	bx	lr

0800365a <memchr>:
 800365a:	4603      	mov	r3, r0
 800365c:	b510      	push	{r4, lr}
 800365e:	b2c9      	uxtb	r1, r1
 8003660:	4402      	add	r2, r0
 8003662:	4293      	cmp	r3, r2
 8003664:	4618      	mov	r0, r3
 8003666:	d101      	bne.n	800366c <memchr+0x12>
 8003668:	2000      	movs	r0, #0
 800366a:	e003      	b.n	8003674 <memchr+0x1a>
 800366c:	7804      	ldrb	r4, [r0, #0]
 800366e:	3301      	adds	r3, #1
 8003670:	428c      	cmp	r4, r1
 8003672:	d1f6      	bne.n	8003662 <memchr+0x8>
 8003674:	bd10      	pop	{r4, pc}

08003676 <quorem>:
 8003676:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800367a:	6903      	ldr	r3, [r0, #16]
 800367c:	690c      	ldr	r4, [r1, #16]
 800367e:	4607      	mov	r7, r0
 8003680:	42a3      	cmp	r3, r4
 8003682:	db7e      	blt.n	8003782 <quorem+0x10c>
 8003684:	3c01      	subs	r4, #1
 8003686:	00a3      	lsls	r3, r4, #2
 8003688:	f100 0514 	add.w	r5, r0, #20
 800368c:	f101 0814 	add.w	r8, r1, #20
 8003690:	9300      	str	r3, [sp, #0]
 8003692:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003696:	9301      	str	r3, [sp, #4]
 8003698:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800369c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80036a0:	3301      	adds	r3, #1
 80036a2:	429a      	cmp	r2, r3
 80036a4:	fbb2 f6f3 	udiv	r6, r2, r3
 80036a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80036ac:	d32e      	bcc.n	800370c <quorem+0x96>
 80036ae:	f04f 0a00 	mov.w	sl, #0
 80036b2:	46c4      	mov	ip, r8
 80036b4:	46ae      	mov	lr, r5
 80036b6:	46d3      	mov	fp, sl
 80036b8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80036bc:	b298      	uxth	r0, r3
 80036be:	fb06 a000 	mla	r0, r6, r0, sl
 80036c2:	0c1b      	lsrs	r3, r3, #16
 80036c4:	0c02      	lsrs	r2, r0, #16
 80036c6:	fb06 2303 	mla	r3, r6, r3, r2
 80036ca:	f8de 2000 	ldr.w	r2, [lr]
 80036ce:	b280      	uxth	r0, r0
 80036d0:	b292      	uxth	r2, r2
 80036d2:	1a12      	subs	r2, r2, r0
 80036d4:	445a      	add	r2, fp
 80036d6:	f8de 0000 	ldr.w	r0, [lr]
 80036da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80036de:	b29b      	uxth	r3, r3
 80036e0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80036e4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80036e8:	b292      	uxth	r2, r2
 80036ea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80036ee:	45e1      	cmp	r9, ip
 80036f0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80036f4:	f84e 2b04 	str.w	r2, [lr], #4
 80036f8:	d2de      	bcs.n	80036b8 <quorem+0x42>
 80036fa:	9b00      	ldr	r3, [sp, #0]
 80036fc:	58eb      	ldr	r3, [r5, r3]
 80036fe:	b92b      	cbnz	r3, 800370c <quorem+0x96>
 8003700:	9b01      	ldr	r3, [sp, #4]
 8003702:	3b04      	subs	r3, #4
 8003704:	429d      	cmp	r5, r3
 8003706:	461a      	mov	r2, r3
 8003708:	d32f      	bcc.n	800376a <quorem+0xf4>
 800370a:	613c      	str	r4, [r7, #16]
 800370c:	4638      	mov	r0, r7
 800370e:	f001 f979 	bl	8004a04 <__mcmp>
 8003712:	2800      	cmp	r0, #0
 8003714:	db25      	blt.n	8003762 <quorem+0xec>
 8003716:	4629      	mov	r1, r5
 8003718:	2000      	movs	r0, #0
 800371a:	f858 2b04 	ldr.w	r2, [r8], #4
 800371e:	f8d1 c000 	ldr.w	ip, [r1]
 8003722:	fa1f fe82 	uxth.w	lr, r2
 8003726:	fa1f f38c 	uxth.w	r3, ip
 800372a:	eba3 030e 	sub.w	r3, r3, lr
 800372e:	4403      	add	r3, r0
 8003730:	0c12      	lsrs	r2, r2, #16
 8003732:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003736:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800373a:	b29b      	uxth	r3, r3
 800373c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003740:	45c1      	cmp	r9, r8
 8003742:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003746:	f841 3b04 	str.w	r3, [r1], #4
 800374a:	d2e6      	bcs.n	800371a <quorem+0xa4>
 800374c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003750:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003754:	b922      	cbnz	r2, 8003760 <quorem+0xea>
 8003756:	3b04      	subs	r3, #4
 8003758:	429d      	cmp	r5, r3
 800375a:	461a      	mov	r2, r3
 800375c:	d30b      	bcc.n	8003776 <quorem+0x100>
 800375e:	613c      	str	r4, [r7, #16]
 8003760:	3601      	adds	r6, #1
 8003762:	4630      	mov	r0, r6
 8003764:	b003      	add	sp, #12
 8003766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800376a:	6812      	ldr	r2, [r2, #0]
 800376c:	3b04      	subs	r3, #4
 800376e:	2a00      	cmp	r2, #0
 8003770:	d1cb      	bne.n	800370a <quorem+0x94>
 8003772:	3c01      	subs	r4, #1
 8003774:	e7c6      	b.n	8003704 <quorem+0x8e>
 8003776:	6812      	ldr	r2, [r2, #0]
 8003778:	3b04      	subs	r3, #4
 800377a:	2a00      	cmp	r2, #0
 800377c:	d1ef      	bne.n	800375e <quorem+0xe8>
 800377e:	3c01      	subs	r4, #1
 8003780:	e7ea      	b.n	8003758 <quorem+0xe2>
 8003782:	2000      	movs	r0, #0
 8003784:	e7ee      	b.n	8003764 <quorem+0xee>
	...

08003788 <_dtoa_r>:
 8003788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800378c:	4614      	mov	r4, r2
 800378e:	461d      	mov	r5, r3
 8003790:	69c7      	ldr	r7, [r0, #28]
 8003792:	b097      	sub	sp, #92	@ 0x5c
 8003794:	4683      	mov	fp, r0
 8003796:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800379a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800379c:	b97f      	cbnz	r7, 80037be <_dtoa_r+0x36>
 800379e:	2010      	movs	r0, #16
 80037a0:	f000 fe02 	bl	80043a8 <malloc>
 80037a4:	4602      	mov	r2, r0
 80037a6:	f8cb 001c 	str.w	r0, [fp, #28]
 80037aa:	b920      	cbnz	r0, 80037b6 <_dtoa_r+0x2e>
 80037ac:	21ef      	movs	r1, #239	@ 0xef
 80037ae:	4ba8      	ldr	r3, [pc, #672]	@ (8003a50 <_dtoa_r+0x2c8>)
 80037b0:	48a8      	ldr	r0, [pc, #672]	@ (8003a54 <_dtoa_r+0x2cc>)
 80037b2:	f001 fc67 	bl	8005084 <__assert_func>
 80037b6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80037ba:	6007      	str	r7, [r0, #0]
 80037bc:	60c7      	str	r7, [r0, #12]
 80037be:	f8db 301c 	ldr.w	r3, [fp, #28]
 80037c2:	6819      	ldr	r1, [r3, #0]
 80037c4:	b159      	cbz	r1, 80037de <_dtoa_r+0x56>
 80037c6:	685a      	ldr	r2, [r3, #4]
 80037c8:	2301      	movs	r3, #1
 80037ca:	4093      	lsls	r3, r2
 80037cc:	604a      	str	r2, [r1, #4]
 80037ce:	608b      	str	r3, [r1, #8]
 80037d0:	4658      	mov	r0, fp
 80037d2:	f000 fedf 	bl	8004594 <_Bfree>
 80037d6:	2200      	movs	r2, #0
 80037d8:	f8db 301c 	ldr.w	r3, [fp, #28]
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	1e2b      	subs	r3, r5, #0
 80037e0:	bfaf      	iteee	ge
 80037e2:	2300      	movge	r3, #0
 80037e4:	2201      	movlt	r2, #1
 80037e6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80037ea:	9303      	strlt	r3, [sp, #12]
 80037ec:	bfa8      	it	ge
 80037ee:	6033      	strge	r3, [r6, #0]
 80037f0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80037f4:	4b98      	ldr	r3, [pc, #608]	@ (8003a58 <_dtoa_r+0x2d0>)
 80037f6:	bfb8      	it	lt
 80037f8:	6032      	strlt	r2, [r6, #0]
 80037fa:	ea33 0308 	bics.w	r3, r3, r8
 80037fe:	d112      	bne.n	8003826 <_dtoa_r+0x9e>
 8003800:	f242 730f 	movw	r3, #9999	@ 0x270f
 8003804:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8003806:	6013      	str	r3, [r2, #0]
 8003808:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800380c:	4323      	orrs	r3, r4
 800380e:	f000 8550 	beq.w	80042b2 <_dtoa_r+0xb2a>
 8003812:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003814:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8003a5c <_dtoa_r+0x2d4>
 8003818:	2b00      	cmp	r3, #0
 800381a:	f000 8552 	beq.w	80042c2 <_dtoa_r+0xb3a>
 800381e:	f10a 0303 	add.w	r3, sl, #3
 8003822:	f000 bd4c 	b.w	80042be <_dtoa_r+0xb36>
 8003826:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800382a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800382e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003832:	2200      	movs	r2, #0
 8003834:	2300      	movs	r3, #0
 8003836:	f7fd f8b7 	bl	80009a8 <__aeabi_dcmpeq>
 800383a:	4607      	mov	r7, r0
 800383c:	b158      	cbz	r0, 8003856 <_dtoa_r+0xce>
 800383e:	2301      	movs	r3, #1
 8003840:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8003842:	6013      	str	r3, [r2, #0]
 8003844:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003846:	b113      	cbz	r3, 800384e <_dtoa_r+0xc6>
 8003848:	4b85      	ldr	r3, [pc, #532]	@ (8003a60 <_dtoa_r+0x2d8>)
 800384a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800384c:	6013      	str	r3, [r2, #0]
 800384e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8003a64 <_dtoa_r+0x2dc>
 8003852:	f000 bd36 	b.w	80042c2 <_dtoa_r+0xb3a>
 8003856:	ab14      	add	r3, sp, #80	@ 0x50
 8003858:	9301      	str	r3, [sp, #4]
 800385a:	ab15      	add	r3, sp, #84	@ 0x54
 800385c:	9300      	str	r3, [sp, #0]
 800385e:	4658      	mov	r0, fp
 8003860:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8003864:	f001 f97e 	bl	8004b64 <__d2b>
 8003868:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800386c:	4681      	mov	r9, r0
 800386e:	2e00      	cmp	r6, #0
 8003870:	d077      	beq.n	8003962 <_dtoa_r+0x1da>
 8003872:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003876:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003878:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800387c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003880:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003884:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003888:	9712      	str	r7, [sp, #72]	@ 0x48
 800388a:	4619      	mov	r1, r3
 800388c:	2200      	movs	r2, #0
 800388e:	4b76      	ldr	r3, [pc, #472]	@ (8003a68 <_dtoa_r+0x2e0>)
 8003890:	f7fc fc6a 	bl	8000168 <__aeabi_dsub>
 8003894:	a368      	add	r3, pc, #416	@ (adr r3, 8003a38 <_dtoa_r+0x2b0>)
 8003896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389a:	f7fc fe1d 	bl	80004d8 <__aeabi_dmul>
 800389e:	a368      	add	r3, pc, #416	@ (adr r3, 8003a40 <_dtoa_r+0x2b8>)
 80038a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a4:	f7fc fc62 	bl	800016c <__adddf3>
 80038a8:	4604      	mov	r4, r0
 80038aa:	4630      	mov	r0, r6
 80038ac:	460d      	mov	r5, r1
 80038ae:	f7fc fda9 	bl	8000404 <__aeabi_i2d>
 80038b2:	a365      	add	r3, pc, #404	@ (adr r3, 8003a48 <_dtoa_r+0x2c0>)
 80038b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b8:	f7fc fe0e 	bl	80004d8 <__aeabi_dmul>
 80038bc:	4602      	mov	r2, r0
 80038be:	460b      	mov	r3, r1
 80038c0:	4620      	mov	r0, r4
 80038c2:	4629      	mov	r1, r5
 80038c4:	f7fc fc52 	bl	800016c <__adddf3>
 80038c8:	4604      	mov	r4, r0
 80038ca:	460d      	mov	r5, r1
 80038cc:	f7fd f8b4 	bl	8000a38 <__aeabi_d2iz>
 80038d0:	2200      	movs	r2, #0
 80038d2:	4607      	mov	r7, r0
 80038d4:	2300      	movs	r3, #0
 80038d6:	4620      	mov	r0, r4
 80038d8:	4629      	mov	r1, r5
 80038da:	f7fd f86f 	bl	80009bc <__aeabi_dcmplt>
 80038de:	b140      	cbz	r0, 80038f2 <_dtoa_r+0x16a>
 80038e0:	4638      	mov	r0, r7
 80038e2:	f7fc fd8f 	bl	8000404 <__aeabi_i2d>
 80038e6:	4622      	mov	r2, r4
 80038e8:	462b      	mov	r3, r5
 80038ea:	f7fd f85d 	bl	80009a8 <__aeabi_dcmpeq>
 80038ee:	b900      	cbnz	r0, 80038f2 <_dtoa_r+0x16a>
 80038f0:	3f01      	subs	r7, #1
 80038f2:	2f16      	cmp	r7, #22
 80038f4:	d853      	bhi.n	800399e <_dtoa_r+0x216>
 80038f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80038fa:	4b5c      	ldr	r3, [pc, #368]	@ (8003a6c <_dtoa_r+0x2e4>)
 80038fc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003904:	f7fd f85a 	bl	80009bc <__aeabi_dcmplt>
 8003908:	2800      	cmp	r0, #0
 800390a:	d04a      	beq.n	80039a2 <_dtoa_r+0x21a>
 800390c:	2300      	movs	r3, #0
 800390e:	3f01      	subs	r7, #1
 8003910:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003912:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003914:	1b9b      	subs	r3, r3, r6
 8003916:	1e5a      	subs	r2, r3, #1
 8003918:	bf46      	itte	mi
 800391a:	f1c3 0801 	rsbmi	r8, r3, #1
 800391e:	2300      	movmi	r3, #0
 8003920:	f04f 0800 	movpl.w	r8, #0
 8003924:	9209      	str	r2, [sp, #36]	@ 0x24
 8003926:	bf48      	it	mi
 8003928:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800392a:	2f00      	cmp	r7, #0
 800392c:	db3b      	blt.n	80039a6 <_dtoa_r+0x21e>
 800392e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003930:	970e      	str	r7, [sp, #56]	@ 0x38
 8003932:	443b      	add	r3, r7
 8003934:	9309      	str	r3, [sp, #36]	@ 0x24
 8003936:	2300      	movs	r3, #0
 8003938:	930a      	str	r3, [sp, #40]	@ 0x28
 800393a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800393c:	2b09      	cmp	r3, #9
 800393e:	d866      	bhi.n	8003a0e <_dtoa_r+0x286>
 8003940:	2b05      	cmp	r3, #5
 8003942:	bfc4      	itt	gt
 8003944:	3b04      	subgt	r3, #4
 8003946:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8003948:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800394a:	bfc8      	it	gt
 800394c:	2400      	movgt	r4, #0
 800394e:	f1a3 0302 	sub.w	r3, r3, #2
 8003952:	bfd8      	it	le
 8003954:	2401      	movle	r4, #1
 8003956:	2b03      	cmp	r3, #3
 8003958:	d864      	bhi.n	8003a24 <_dtoa_r+0x29c>
 800395a:	e8df f003 	tbb	[pc, r3]
 800395e:	382b      	.short	0x382b
 8003960:	5636      	.short	0x5636
 8003962:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8003966:	441e      	add	r6, r3
 8003968:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800396c:	2b20      	cmp	r3, #32
 800396e:	bfc1      	itttt	gt
 8003970:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8003974:	fa08 f803 	lslgt.w	r8, r8, r3
 8003978:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800397c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8003980:	bfd6      	itet	le
 8003982:	f1c3 0320 	rsble	r3, r3, #32
 8003986:	ea48 0003 	orrgt.w	r0, r8, r3
 800398a:	fa04 f003 	lslle.w	r0, r4, r3
 800398e:	f7fc fd29 	bl	80003e4 <__aeabi_ui2d>
 8003992:	2201      	movs	r2, #1
 8003994:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8003998:	3e01      	subs	r6, #1
 800399a:	9212      	str	r2, [sp, #72]	@ 0x48
 800399c:	e775      	b.n	800388a <_dtoa_r+0x102>
 800399e:	2301      	movs	r3, #1
 80039a0:	e7b6      	b.n	8003910 <_dtoa_r+0x188>
 80039a2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80039a4:	e7b5      	b.n	8003912 <_dtoa_r+0x18a>
 80039a6:	427b      	negs	r3, r7
 80039a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80039aa:	2300      	movs	r3, #0
 80039ac:	eba8 0807 	sub.w	r8, r8, r7
 80039b0:	930e      	str	r3, [sp, #56]	@ 0x38
 80039b2:	e7c2      	b.n	800393a <_dtoa_r+0x1b2>
 80039b4:	2300      	movs	r3, #0
 80039b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80039b8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	dc35      	bgt.n	8003a2a <_dtoa_r+0x2a2>
 80039be:	2301      	movs	r3, #1
 80039c0:	461a      	mov	r2, r3
 80039c2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80039c6:	9221      	str	r2, [sp, #132]	@ 0x84
 80039c8:	e00b      	b.n	80039e2 <_dtoa_r+0x25a>
 80039ca:	2301      	movs	r3, #1
 80039cc:	e7f3      	b.n	80039b6 <_dtoa_r+0x22e>
 80039ce:	2300      	movs	r3, #0
 80039d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80039d2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80039d4:	18fb      	adds	r3, r7, r3
 80039d6:	9308      	str	r3, [sp, #32]
 80039d8:	3301      	adds	r3, #1
 80039da:	2b01      	cmp	r3, #1
 80039dc:	9307      	str	r3, [sp, #28]
 80039de:	bfb8      	it	lt
 80039e0:	2301      	movlt	r3, #1
 80039e2:	2100      	movs	r1, #0
 80039e4:	2204      	movs	r2, #4
 80039e6:	f8db 001c 	ldr.w	r0, [fp, #28]
 80039ea:	f102 0514 	add.w	r5, r2, #20
 80039ee:	429d      	cmp	r5, r3
 80039f0:	d91f      	bls.n	8003a32 <_dtoa_r+0x2aa>
 80039f2:	6041      	str	r1, [r0, #4]
 80039f4:	4658      	mov	r0, fp
 80039f6:	f000 fd8d 	bl	8004514 <_Balloc>
 80039fa:	4682      	mov	sl, r0
 80039fc:	2800      	cmp	r0, #0
 80039fe:	d139      	bne.n	8003a74 <_dtoa_r+0x2ec>
 8003a00:	4602      	mov	r2, r0
 8003a02:	f240 11af 	movw	r1, #431	@ 0x1af
 8003a06:	4b1a      	ldr	r3, [pc, #104]	@ (8003a70 <_dtoa_r+0x2e8>)
 8003a08:	e6d2      	b.n	80037b0 <_dtoa_r+0x28>
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e7e0      	b.n	80039d0 <_dtoa_r+0x248>
 8003a0e:	2401      	movs	r4, #1
 8003a10:	2300      	movs	r3, #0
 8003a12:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003a14:	9320      	str	r3, [sp, #128]	@ 0x80
 8003a16:	f04f 33ff 	mov.w	r3, #4294967295
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003a20:	2312      	movs	r3, #18
 8003a22:	e7d0      	b.n	80039c6 <_dtoa_r+0x23e>
 8003a24:	2301      	movs	r3, #1
 8003a26:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003a28:	e7f5      	b.n	8003a16 <_dtoa_r+0x28e>
 8003a2a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003a2c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003a30:	e7d7      	b.n	80039e2 <_dtoa_r+0x25a>
 8003a32:	3101      	adds	r1, #1
 8003a34:	0052      	lsls	r2, r2, #1
 8003a36:	e7d8      	b.n	80039ea <_dtoa_r+0x262>
 8003a38:	636f4361 	.word	0x636f4361
 8003a3c:	3fd287a7 	.word	0x3fd287a7
 8003a40:	8b60c8b3 	.word	0x8b60c8b3
 8003a44:	3fc68a28 	.word	0x3fc68a28
 8003a48:	509f79fb 	.word	0x509f79fb
 8003a4c:	3fd34413 	.word	0x3fd34413
 8003a50:	080057a9 	.word	0x080057a9
 8003a54:	080057c0 	.word	0x080057c0
 8003a58:	7ff00000 	.word	0x7ff00000
 8003a5c:	080057a5 	.word	0x080057a5
 8003a60:	08005779 	.word	0x08005779
 8003a64:	08005778 	.word	0x08005778
 8003a68:	3ff80000 	.word	0x3ff80000
 8003a6c:	080058b8 	.word	0x080058b8
 8003a70:	08005818 	.word	0x08005818
 8003a74:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003a78:	6018      	str	r0, [r3, #0]
 8003a7a:	9b07      	ldr	r3, [sp, #28]
 8003a7c:	2b0e      	cmp	r3, #14
 8003a7e:	f200 80a4 	bhi.w	8003bca <_dtoa_r+0x442>
 8003a82:	2c00      	cmp	r4, #0
 8003a84:	f000 80a1 	beq.w	8003bca <_dtoa_r+0x442>
 8003a88:	2f00      	cmp	r7, #0
 8003a8a:	dd33      	ble.n	8003af4 <_dtoa_r+0x36c>
 8003a8c:	4b86      	ldr	r3, [pc, #536]	@ (8003ca8 <_dtoa_r+0x520>)
 8003a8e:	f007 020f 	and.w	r2, r7, #15
 8003a92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003a96:	05f8      	lsls	r0, r7, #23
 8003a98:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003a9c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003aa0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8003aa4:	d516      	bpl.n	8003ad4 <_dtoa_r+0x34c>
 8003aa6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003aaa:	4b80      	ldr	r3, [pc, #512]	@ (8003cac <_dtoa_r+0x524>)
 8003aac:	2603      	movs	r6, #3
 8003aae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003ab2:	f7fc fe3b 	bl	800072c <__aeabi_ddiv>
 8003ab6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003aba:	f004 040f 	and.w	r4, r4, #15
 8003abe:	4d7b      	ldr	r5, [pc, #492]	@ (8003cac <_dtoa_r+0x524>)
 8003ac0:	b954      	cbnz	r4, 8003ad8 <_dtoa_r+0x350>
 8003ac2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003ac6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003aca:	f7fc fe2f 	bl	800072c <__aeabi_ddiv>
 8003ace:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003ad2:	e028      	b.n	8003b26 <_dtoa_r+0x39e>
 8003ad4:	2602      	movs	r6, #2
 8003ad6:	e7f2      	b.n	8003abe <_dtoa_r+0x336>
 8003ad8:	07e1      	lsls	r1, r4, #31
 8003ada:	d508      	bpl.n	8003aee <_dtoa_r+0x366>
 8003adc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003ae0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003ae4:	f7fc fcf8 	bl	80004d8 <__aeabi_dmul>
 8003ae8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003aec:	3601      	adds	r6, #1
 8003aee:	1064      	asrs	r4, r4, #1
 8003af0:	3508      	adds	r5, #8
 8003af2:	e7e5      	b.n	8003ac0 <_dtoa_r+0x338>
 8003af4:	f000 80d2 	beq.w	8003c9c <_dtoa_r+0x514>
 8003af8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003afc:	427c      	negs	r4, r7
 8003afe:	4b6a      	ldr	r3, [pc, #424]	@ (8003ca8 <_dtoa_r+0x520>)
 8003b00:	f004 020f 	and.w	r2, r4, #15
 8003b04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b0c:	f7fc fce4 	bl	80004d8 <__aeabi_dmul>
 8003b10:	2602      	movs	r6, #2
 8003b12:	2300      	movs	r3, #0
 8003b14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003b18:	4d64      	ldr	r5, [pc, #400]	@ (8003cac <_dtoa_r+0x524>)
 8003b1a:	1124      	asrs	r4, r4, #4
 8003b1c:	2c00      	cmp	r4, #0
 8003b1e:	f040 80b2 	bne.w	8003c86 <_dtoa_r+0x4fe>
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1d3      	bne.n	8003ace <_dtoa_r+0x346>
 8003b26:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8003b2a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f000 80b7 	beq.w	8003ca0 <_dtoa_r+0x518>
 8003b32:	2200      	movs	r2, #0
 8003b34:	4620      	mov	r0, r4
 8003b36:	4629      	mov	r1, r5
 8003b38:	4b5d      	ldr	r3, [pc, #372]	@ (8003cb0 <_dtoa_r+0x528>)
 8003b3a:	f7fc ff3f 	bl	80009bc <__aeabi_dcmplt>
 8003b3e:	2800      	cmp	r0, #0
 8003b40:	f000 80ae 	beq.w	8003ca0 <_dtoa_r+0x518>
 8003b44:	9b07      	ldr	r3, [sp, #28]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f000 80aa 	beq.w	8003ca0 <_dtoa_r+0x518>
 8003b4c:	9b08      	ldr	r3, [sp, #32]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	dd37      	ble.n	8003bc2 <_dtoa_r+0x43a>
 8003b52:	1e7b      	subs	r3, r7, #1
 8003b54:	4620      	mov	r0, r4
 8003b56:	9304      	str	r3, [sp, #16]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	4629      	mov	r1, r5
 8003b5c:	4b55      	ldr	r3, [pc, #340]	@ (8003cb4 <_dtoa_r+0x52c>)
 8003b5e:	f7fc fcbb 	bl	80004d8 <__aeabi_dmul>
 8003b62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003b66:	9c08      	ldr	r4, [sp, #32]
 8003b68:	3601      	adds	r6, #1
 8003b6a:	4630      	mov	r0, r6
 8003b6c:	f7fc fc4a 	bl	8000404 <__aeabi_i2d>
 8003b70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003b74:	f7fc fcb0 	bl	80004d8 <__aeabi_dmul>
 8003b78:	2200      	movs	r2, #0
 8003b7a:	4b4f      	ldr	r3, [pc, #316]	@ (8003cb8 <_dtoa_r+0x530>)
 8003b7c:	f7fc faf6 	bl	800016c <__adddf3>
 8003b80:	4605      	mov	r5, r0
 8003b82:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8003b86:	2c00      	cmp	r4, #0
 8003b88:	f040 809a 	bne.w	8003cc0 <_dtoa_r+0x538>
 8003b8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b90:	2200      	movs	r2, #0
 8003b92:	4b4a      	ldr	r3, [pc, #296]	@ (8003cbc <_dtoa_r+0x534>)
 8003b94:	f7fc fae8 	bl	8000168 <__aeabi_dsub>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003ba0:	462a      	mov	r2, r5
 8003ba2:	4633      	mov	r3, r6
 8003ba4:	f7fc ff28 	bl	80009f8 <__aeabi_dcmpgt>
 8003ba8:	2800      	cmp	r0, #0
 8003baa:	f040 828e 	bne.w	80040ca <_dtoa_r+0x942>
 8003bae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003bb2:	462a      	mov	r2, r5
 8003bb4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8003bb8:	f7fc ff00 	bl	80009bc <__aeabi_dcmplt>
 8003bbc:	2800      	cmp	r0, #0
 8003bbe:	f040 8127 	bne.w	8003e10 <_dtoa_r+0x688>
 8003bc2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8003bc6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8003bca:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f2c0 8163 	blt.w	8003e98 <_dtoa_r+0x710>
 8003bd2:	2f0e      	cmp	r7, #14
 8003bd4:	f300 8160 	bgt.w	8003e98 <_dtoa_r+0x710>
 8003bd8:	4b33      	ldr	r3, [pc, #204]	@ (8003ca8 <_dtoa_r+0x520>)
 8003bda:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003bde:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003be2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003be6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	da03      	bge.n	8003bf4 <_dtoa_r+0x46c>
 8003bec:	9b07      	ldr	r3, [sp, #28]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f340 8100 	ble.w	8003df4 <_dtoa_r+0x66c>
 8003bf4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8003bf8:	4656      	mov	r6, sl
 8003bfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003bfe:	4620      	mov	r0, r4
 8003c00:	4629      	mov	r1, r5
 8003c02:	f7fc fd93 	bl	800072c <__aeabi_ddiv>
 8003c06:	f7fc ff17 	bl	8000a38 <__aeabi_d2iz>
 8003c0a:	4680      	mov	r8, r0
 8003c0c:	f7fc fbfa 	bl	8000404 <__aeabi_i2d>
 8003c10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003c14:	f7fc fc60 	bl	80004d8 <__aeabi_dmul>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	4620      	mov	r0, r4
 8003c1e:	4629      	mov	r1, r5
 8003c20:	f7fc faa2 	bl	8000168 <__aeabi_dsub>
 8003c24:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8003c28:	9d07      	ldr	r5, [sp, #28]
 8003c2a:	f806 4b01 	strb.w	r4, [r6], #1
 8003c2e:	eba6 040a 	sub.w	r4, r6, sl
 8003c32:	42a5      	cmp	r5, r4
 8003c34:	4602      	mov	r2, r0
 8003c36:	460b      	mov	r3, r1
 8003c38:	f040 8116 	bne.w	8003e68 <_dtoa_r+0x6e0>
 8003c3c:	f7fc fa96 	bl	800016c <__adddf3>
 8003c40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003c44:	4604      	mov	r4, r0
 8003c46:	460d      	mov	r5, r1
 8003c48:	f7fc fed6 	bl	80009f8 <__aeabi_dcmpgt>
 8003c4c:	2800      	cmp	r0, #0
 8003c4e:	f040 80f8 	bne.w	8003e42 <_dtoa_r+0x6ba>
 8003c52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003c56:	4620      	mov	r0, r4
 8003c58:	4629      	mov	r1, r5
 8003c5a:	f7fc fea5 	bl	80009a8 <__aeabi_dcmpeq>
 8003c5e:	b118      	cbz	r0, 8003c68 <_dtoa_r+0x4e0>
 8003c60:	f018 0f01 	tst.w	r8, #1
 8003c64:	f040 80ed 	bne.w	8003e42 <_dtoa_r+0x6ba>
 8003c68:	4649      	mov	r1, r9
 8003c6a:	4658      	mov	r0, fp
 8003c6c:	f000 fc92 	bl	8004594 <_Bfree>
 8003c70:	2300      	movs	r3, #0
 8003c72:	7033      	strb	r3, [r6, #0]
 8003c74:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8003c76:	3701      	adds	r7, #1
 8003c78:	601f      	str	r7, [r3, #0]
 8003c7a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f000 8320 	beq.w	80042c2 <_dtoa_r+0xb3a>
 8003c82:	601e      	str	r6, [r3, #0]
 8003c84:	e31d      	b.n	80042c2 <_dtoa_r+0xb3a>
 8003c86:	07e2      	lsls	r2, r4, #31
 8003c88:	d505      	bpl.n	8003c96 <_dtoa_r+0x50e>
 8003c8a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003c8e:	f7fc fc23 	bl	80004d8 <__aeabi_dmul>
 8003c92:	2301      	movs	r3, #1
 8003c94:	3601      	adds	r6, #1
 8003c96:	1064      	asrs	r4, r4, #1
 8003c98:	3508      	adds	r5, #8
 8003c9a:	e73f      	b.n	8003b1c <_dtoa_r+0x394>
 8003c9c:	2602      	movs	r6, #2
 8003c9e:	e742      	b.n	8003b26 <_dtoa_r+0x39e>
 8003ca0:	9c07      	ldr	r4, [sp, #28]
 8003ca2:	9704      	str	r7, [sp, #16]
 8003ca4:	e761      	b.n	8003b6a <_dtoa_r+0x3e2>
 8003ca6:	bf00      	nop
 8003ca8:	080058b8 	.word	0x080058b8
 8003cac:	08005890 	.word	0x08005890
 8003cb0:	3ff00000 	.word	0x3ff00000
 8003cb4:	40240000 	.word	0x40240000
 8003cb8:	401c0000 	.word	0x401c0000
 8003cbc:	40140000 	.word	0x40140000
 8003cc0:	4b70      	ldr	r3, [pc, #448]	@ (8003e84 <_dtoa_r+0x6fc>)
 8003cc2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003cc4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003cc8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003ccc:	4454      	add	r4, sl
 8003cce:	2900      	cmp	r1, #0
 8003cd0:	d045      	beq.n	8003d5e <_dtoa_r+0x5d6>
 8003cd2:	2000      	movs	r0, #0
 8003cd4:	496c      	ldr	r1, [pc, #432]	@ (8003e88 <_dtoa_r+0x700>)
 8003cd6:	f7fc fd29 	bl	800072c <__aeabi_ddiv>
 8003cda:	4633      	mov	r3, r6
 8003cdc:	462a      	mov	r2, r5
 8003cde:	f7fc fa43 	bl	8000168 <__aeabi_dsub>
 8003ce2:	4656      	mov	r6, sl
 8003ce4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003ce8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003cec:	f7fc fea4 	bl	8000a38 <__aeabi_d2iz>
 8003cf0:	4605      	mov	r5, r0
 8003cf2:	f7fc fb87 	bl	8000404 <__aeabi_i2d>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003cfe:	f7fc fa33 	bl	8000168 <__aeabi_dsub>
 8003d02:	4602      	mov	r2, r0
 8003d04:	460b      	mov	r3, r1
 8003d06:	3530      	adds	r5, #48	@ 0x30
 8003d08:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003d0c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003d10:	f806 5b01 	strb.w	r5, [r6], #1
 8003d14:	f7fc fe52 	bl	80009bc <__aeabi_dcmplt>
 8003d18:	2800      	cmp	r0, #0
 8003d1a:	d163      	bne.n	8003de4 <_dtoa_r+0x65c>
 8003d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003d20:	2000      	movs	r0, #0
 8003d22:	495a      	ldr	r1, [pc, #360]	@ (8003e8c <_dtoa_r+0x704>)
 8003d24:	f7fc fa20 	bl	8000168 <__aeabi_dsub>
 8003d28:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003d2c:	f7fc fe46 	bl	80009bc <__aeabi_dcmplt>
 8003d30:	2800      	cmp	r0, #0
 8003d32:	f040 8087 	bne.w	8003e44 <_dtoa_r+0x6bc>
 8003d36:	42a6      	cmp	r6, r4
 8003d38:	f43f af43 	beq.w	8003bc2 <_dtoa_r+0x43a>
 8003d3c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003d40:	2200      	movs	r2, #0
 8003d42:	4b53      	ldr	r3, [pc, #332]	@ (8003e90 <_dtoa_r+0x708>)
 8003d44:	f7fc fbc8 	bl	80004d8 <__aeabi_dmul>
 8003d48:	2200      	movs	r2, #0
 8003d4a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003d4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d52:	4b4f      	ldr	r3, [pc, #316]	@ (8003e90 <_dtoa_r+0x708>)
 8003d54:	f7fc fbc0 	bl	80004d8 <__aeabi_dmul>
 8003d58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d5c:	e7c4      	b.n	8003ce8 <_dtoa_r+0x560>
 8003d5e:	4631      	mov	r1, r6
 8003d60:	4628      	mov	r0, r5
 8003d62:	f7fc fbb9 	bl	80004d8 <__aeabi_dmul>
 8003d66:	4656      	mov	r6, sl
 8003d68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003d6c:	9413      	str	r4, [sp, #76]	@ 0x4c
 8003d6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d72:	f7fc fe61 	bl	8000a38 <__aeabi_d2iz>
 8003d76:	4605      	mov	r5, r0
 8003d78:	f7fc fb44 	bl	8000404 <__aeabi_i2d>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	460b      	mov	r3, r1
 8003d80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d84:	f7fc f9f0 	bl	8000168 <__aeabi_dsub>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	3530      	adds	r5, #48	@ 0x30
 8003d8e:	f806 5b01 	strb.w	r5, [r6], #1
 8003d92:	42a6      	cmp	r6, r4
 8003d94:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003d98:	f04f 0200 	mov.w	r2, #0
 8003d9c:	d124      	bne.n	8003de8 <_dtoa_r+0x660>
 8003d9e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003da2:	4b39      	ldr	r3, [pc, #228]	@ (8003e88 <_dtoa_r+0x700>)
 8003da4:	f7fc f9e2 	bl	800016c <__adddf3>
 8003da8:	4602      	mov	r2, r0
 8003daa:	460b      	mov	r3, r1
 8003dac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003db0:	f7fc fe22 	bl	80009f8 <__aeabi_dcmpgt>
 8003db4:	2800      	cmp	r0, #0
 8003db6:	d145      	bne.n	8003e44 <_dtoa_r+0x6bc>
 8003db8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003dbc:	2000      	movs	r0, #0
 8003dbe:	4932      	ldr	r1, [pc, #200]	@ (8003e88 <_dtoa_r+0x700>)
 8003dc0:	f7fc f9d2 	bl	8000168 <__aeabi_dsub>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003dcc:	f7fc fdf6 	bl	80009bc <__aeabi_dcmplt>
 8003dd0:	2800      	cmp	r0, #0
 8003dd2:	f43f aef6 	beq.w	8003bc2 <_dtoa_r+0x43a>
 8003dd6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8003dd8:	1e73      	subs	r3, r6, #1
 8003dda:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003ddc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8003de0:	2b30      	cmp	r3, #48	@ 0x30
 8003de2:	d0f8      	beq.n	8003dd6 <_dtoa_r+0x64e>
 8003de4:	9f04      	ldr	r7, [sp, #16]
 8003de6:	e73f      	b.n	8003c68 <_dtoa_r+0x4e0>
 8003de8:	4b29      	ldr	r3, [pc, #164]	@ (8003e90 <_dtoa_r+0x708>)
 8003dea:	f7fc fb75 	bl	80004d8 <__aeabi_dmul>
 8003dee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003df2:	e7bc      	b.n	8003d6e <_dtoa_r+0x5e6>
 8003df4:	d10c      	bne.n	8003e10 <_dtoa_r+0x688>
 8003df6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	4b25      	ldr	r3, [pc, #148]	@ (8003e94 <_dtoa_r+0x70c>)
 8003dfe:	f7fc fb6b 	bl	80004d8 <__aeabi_dmul>
 8003e02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003e06:	f7fc fded 	bl	80009e4 <__aeabi_dcmpge>
 8003e0a:	2800      	cmp	r0, #0
 8003e0c:	f000 815b 	beq.w	80040c6 <_dtoa_r+0x93e>
 8003e10:	2400      	movs	r4, #0
 8003e12:	4625      	mov	r5, r4
 8003e14:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003e16:	4656      	mov	r6, sl
 8003e18:	43db      	mvns	r3, r3
 8003e1a:	9304      	str	r3, [sp, #16]
 8003e1c:	2700      	movs	r7, #0
 8003e1e:	4621      	mov	r1, r4
 8003e20:	4658      	mov	r0, fp
 8003e22:	f000 fbb7 	bl	8004594 <_Bfree>
 8003e26:	2d00      	cmp	r5, #0
 8003e28:	d0dc      	beq.n	8003de4 <_dtoa_r+0x65c>
 8003e2a:	b12f      	cbz	r7, 8003e38 <_dtoa_r+0x6b0>
 8003e2c:	42af      	cmp	r7, r5
 8003e2e:	d003      	beq.n	8003e38 <_dtoa_r+0x6b0>
 8003e30:	4639      	mov	r1, r7
 8003e32:	4658      	mov	r0, fp
 8003e34:	f000 fbae 	bl	8004594 <_Bfree>
 8003e38:	4629      	mov	r1, r5
 8003e3a:	4658      	mov	r0, fp
 8003e3c:	f000 fbaa 	bl	8004594 <_Bfree>
 8003e40:	e7d0      	b.n	8003de4 <_dtoa_r+0x65c>
 8003e42:	9704      	str	r7, [sp, #16]
 8003e44:	4633      	mov	r3, r6
 8003e46:	461e      	mov	r6, r3
 8003e48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003e4c:	2a39      	cmp	r2, #57	@ 0x39
 8003e4e:	d107      	bne.n	8003e60 <_dtoa_r+0x6d8>
 8003e50:	459a      	cmp	sl, r3
 8003e52:	d1f8      	bne.n	8003e46 <_dtoa_r+0x6be>
 8003e54:	9a04      	ldr	r2, [sp, #16]
 8003e56:	3201      	adds	r2, #1
 8003e58:	9204      	str	r2, [sp, #16]
 8003e5a:	2230      	movs	r2, #48	@ 0x30
 8003e5c:	f88a 2000 	strb.w	r2, [sl]
 8003e60:	781a      	ldrb	r2, [r3, #0]
 8003e62:	3201      	adds	r2, #1
 8003e64:	701a      	strb	r2, [r3, #0]
 8003e66:	e7bd      	b.n	8003de4 <_dtoa_r+0x65c>
 8003e68:	2200      	movs	r2, #0
 8003e6a:	4b09      	ldr	r3, [pc, #36]	@ (8003e90 <_dtoa_r+0x708>)
 8003e6c:	f7fc fb34 	bl	80004d8 <__aeabi_dmul>
 8003e70:	2200      	movs	r2, #0
 8003e72:	2300      	movs	r3, #0
 8003e74:	4604      	mov	r4, r0
 8003e76:	460d      	mov	r5, r1
 8003e78:	f7fc fd96 	bl	80009a8 <__aeabi_dcmpeq>
 8003e7c:	2800      	cmp	r0, #0
 8003e7e:	f43f aebc 	beq.w	8003bfa <_dtoa_r+0x472>
 8003e82:	e6f1      	b.n	8003c68 <_dtoa_r+0x4e0>
 8003e84:	080058b8 	.word	0x080058b8
 8003e88:	3fe00000 	.word	0x3fe00000
 8003e8c:	3ff00000 	.word	0x3ff00000
 8003e90:	40240000 	.word	0x40240000
 8003e94:	40140000 	.word	0x40140000
 8003e98:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8003e9a:	2a00      	cmp	r2, #0
 8003e9c:	f000 80db 	beq.w	8004056 <_dtoa_r+0x8ce>
 8003ea0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003ea2:	2a01      	cmp	r2, #1
 8003ea4:	f300 80bf 	bgt.w	8004026 <_dtoa_r+0x89e>
 8003ea8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003eaa:	2a00      	cmp	r2, #0
 8003eac:	f000 80b7 	beq.w	800401e <_dtoa_r+0x896>
 8003eb0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8003eb4:	4646      	mov	r6, r8
 8003eb6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8003eb8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003eba:	2101      	movs	r1, #1
 8003ebc:	441a      	add	r2, r3
 8003ebe:	4658      	mov	r0, fp
 8003ec0:	4498      	add	r8, r3
 8003ec2:	9209      	str	r2, [sp, #36]	@ 0x24
 8003ec4:	f000 fc1a 	bl	80046fc <__i2b>
 8003ec8:	4605      	mov	r5, r0
 8003eca:	b15e      	cbz	r6, 8003ee4 <_dtoa_r+0x75c>
 8003ecc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	dd08      	ble.n	8003ee4 <_dtoa_r+0x75c>
 8003ed2:	42b3      	cmp	r3, r6
 8003ed4:	bfa8      	it	ge
 8003ed6:	4633      	movge	r3, r6
 8003ed8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003eda:	eba8 0803 	sub.w	r8, r8, r3
 8003ede:	1af6      	subs	r6, r6, r3
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ee4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003ee6:	b1f3      	cbz	r3, 8003f26 <_dtoa_r+0x79e>
 8003ee8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f000 80b7 	beq.w	800405e <_dtoa_r+0x8d6>
 8003ef0:	b18c      	cbz	r4, 8003f16 <_dtoa_r+0x78e>
 8003ef2:	4629      	mov	r1, r5
 8003ef4:	4622      	mov	r2, r4
 8003ef6:	4658      	mov	r0, fp
 8003ef8:	f000 fcbe 	bl	8004878 <__pow5mult>
 8003efc:	464a      	mov	r2, r9
 8003efe:	4601      	mov	r1, r0
 8003f00:	4605      	mov	r5, r0
 8003f02:	4658      	mov	r0, fp
 8003f04:	f000 fc10 	bl	8004728 <__multiply>
 8003f08:	4649      	mov	r1, r9
 8003f0a:	9004      	str	r0, [sp, #16]
 8003f0c:	4658      	mov	r0, fp
 8003f0e:	f000 fb41 	bl	8004594 <_Bfree>
 8003f12:	9b04      	ldr	r3, [sp, #16]
 8003f14:	4699      	mov	r9, r3
 8003f16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003f18:	1b1a      	subs	r2, r3, r4
 8003f1a:	d004      	beq.n	8003f26 <_dtoa_r+0x79e>
 8003f1c:	4649      	mov	r1, r9
 8003f1e:	4658      	mov	r0, fp
 8003f20:	f000 fcaa 	bl	8004878 <__pow5mult>
 8003f24:	4681      	mov	r9, r0
 8003f26:	2101      	movs	r1, #1
 8003f28:	4658      	mov	r0, fp
 8003f2a:	f000 fbe7 	bl	80046fc <__i2b>
 8003f2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003f30:	4604      	mov	r4, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	f000 81c9 	beq.w	80042ca <_dtoa_r+0xb42>
 8003f38:	461a      	mov	r2, r3
 8003f3a:	4601      	mov	r1, r0
 8003f3c:	4658      	mov	r0, fp
 8003f3e:	f000 fc9b 	bl	8004878 <__pow5mult>
 8003f42:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003f44:	4604      	mov	r4, r0
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	f300 808f 	bgt.w	800406a <_dtoa_r+0x8e2>
 8003f4c:	9b02      	ldr	r3, [sp, #8]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f040 8087 	bne.w	8004062 <_dtoa_r+0x8da>
 8003f54:	9b03      	ldr	r3, [sp, #12]
 8003f56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f040 8083 	bne.w	8004066 <_dtoa_r+0x8de>
 8003f60:	9b03      	ldr	r3, [sp, #12]
 8003f62:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003f66:	0d1b      	lsrs	r3, r3, #20
 8003f68:	051b      	lsls	r3, r3, #20
 8003f6a:	b12b      	cbz	r3, 8003f78 <_dtoa_r+0x7f0>
 8003f6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f6e:	f108 0801 	add.w	r8, r8, #1
 8003f72:	3301      	adds	r3, #1
 8003f74:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f76:	2301      	movs	r3, #1
 8003f78:	930a      	str	r3, [sp, #40]	@ 0x28
 8003f7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 81aa 	beq.w	80042d6 <_dtoa_r+0xb4e>
 8003f82:	6923      	ldr	r3, [r4, #16]
 8003f84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003f88:	6918      	ldr	r0, [r3, #16]
 8003f8a:	f000 fb6b 	bl	8004664 <__hi0bits>
 8003f8e:	f1c0 0020 	rsb	r0, r0, #32
 8003f92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f94:	4418      	add	r0, r3
 8003f96:	f010 001f 	ands.w	r0, r0, #31
 8003f9a:	d071      	beq.n	8004080 <_dtoa_r+0x8f8>
 8003f9c:	f1c0 0320 	rsb	r3, r0, #32
 8003fa0:	2b04      	cmp	r3, #4
 8003fa2:	dd65      	ble.n	8004070 <_dtoa_r+0x8e8>
 8003fa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003fa6:	f1c0 001c 	rsb	r0, r0, #28
 8003faa:	4403      	add	r3, r0
 8003fac:	4480      	add	r8, r0
 8003fae:	4406      	add	r6, r0
 8003fb0:	9309      	str	r3, [sp, #36]	@ 0x24
 8003fb2:	f1b8 0f00 	cmp.w	r8, #0
 8003fb6:	dd05      	ble.n	8003fc4 <_dtoa_r+0x83c>
 8003fb8:	4649      	mov	r1, r9
 8003fba:	4642      	mov	r2, r8
 8003fbc:	4658      	mov	r0, fp
 8003fbe:	f000 fcb5 	bl	800492c <__lshift>
 8003fc2:	4681      	mov	r9, r0
 8003fc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	dd05      	ble.n	8003fd6 <_dtoa_r+0x84e>
 8003fca:	4621      	mov	r1, r4
 8003fcc:	461a      	mov	r2, r3
 8003fce:	4658      	mov	r0, fp
 8003fd0:	f000 fcac 	bl	800492c <__lshift>
 8003fd4:	4604      	mov	r4, r0
 8003fd6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d053      	beq.n	8004084 <_dtoa_r+0x8fc>
 8003fdc:	4621      	mov	r1, r4
 8003fde:	4648      	mov	r0, r9
 8003fe0:	f000 fd10 	bl	8004a04 <__mcmp>
 8003fe4:	2800      	cmp	r0, #0
 8003fe6:	da4d      	bge.n	8004084 <_dtoa_r+0x8fc>
 8003fe8:	1e7b      	subs	r3, r7, #1
 8003fea:	4649      	mov	r1, r9
 8003fec:	9304      	str	r3, [sp, #16]
 8003fee:	220a      	movs	r2, #10
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	4658      	mov	r0, fp
 8003ff4:	f000 faf0 	bl	80045d8 <__multadd>
 8003ff8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003ffa:	4681      	mov	r9, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f000 816c 	beq.w	80042da <_dtoa_r+0xb52>
 8004002:	2300      	movs	r3, #0
 8004004:	4629      	mov	r1, r5
 8004006:	220a      	movs	r2, #10
 8004008:	4658      	mov	r0, fp
 800400a:	f000 fae5 	bl	80045d8 <__multadd>
 800400e:	9b08      	ldr	r3, [sp, #32]
 8004010:	4605      	mov	r5, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	dc61      	bgt.n	80040da <_dtoa_r+0x952>
 8004016:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004018:	2b02      	cmp	r3, #2
 800401a:	dc3b      	bgt.n	8004094 <_dtoa_r+0x90c>
 800401c:	e05d      	b.n	80040da <_dtoa_r+0x952>
 800401e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004020:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004024:	e746      	b.n	8003eb4 <_dtoa_r+0x72c>
 8004026:	9b07      	ldr	r3, [sp, #28]
 8004028:	1e5c      	subs	r4, r3, #1
 800402a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800402c:	42a3      	cmp	r3, r4
 800402e:	bfbf      	itttt	lt
 8004030:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004032:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8004034:	1ae3      	sublt	r3, r4, r3
 8004036:	18d2      	addlt	r2, r2, r3
 8004038:	bfa8      	it	ge
 800403a:	1b1c      	subge	r4, r3, r4
 800403c:	9b07      	ldr	r3, [sp, #28]
 800403e:	bfbe      	ittt	lt
 8004040:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004042:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8004044:	2400      	movlt	r4, #0
 8004046:	2b00      	cmp	r3, #0
 8004048:	bfb5      	itete	lt
 800404a:	eba8 0603 	sublt.w	r6, r8, r3
 800404e:	4646      	movge	r6, r8
 8004050:	2300      	movlt	r3, #0
 8004052:	9b07      	ldrge	r3, [sp, #28]
 8004054:	e730      	b.n	8003eb8 <_dtoa_r+0x730>
 8004056:	4646      	mov	r6, r8
 8004058:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800405a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800405c:	e735      	b.n	8003eca <_dtoa_r+0x742>
 800405e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004060:	e75c      	b.n	8003f1c <_dtoa_r+0x794>
 8004062:	2300      	movs	r3, #0
 8004064:	e788      	b.n	8003f78 <_dtoa_r+0x7f0>
 8004066:	9b02      	ldr	r3, [sp, #8]
 8004068:	e786      	b.n	8003f78 <_dtoa_r+0x7f0>
 800406a:	2300      	movs	r3, #0
 800406c:	930a      	str	r3, [sp, #40]	@ 0x28
 800406e:	e788      	b.n	8003f82 <_dtoa_r+0x7fa>
 8004070:	d09f      	beq.n	8003fb2 <_dtoa_r+0x82a>
 8004072:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004074:	331c      	adds	r3, #28
 8004076:	441a      	add	r2, r3
 8004078:	4498      	add	r8, r3
 800407a:	441e      	add	r6, r3
 800407c:	9209      	str	r2, [sp, #36]	@ 0x24
 800407e:	e798      	b.n	8003fb2 <_dtoa_r+0x82a>
 8004080:	4603      	mov	r3, r0
 8004082:	e7f6      	b.n	8004072 <_dtoa_r+0x8ea>
 8004084:	9b07      	ldr	r3, [sp, #28]
 8004086:	9704      	str	r7, [sp, #16]
 8004088:	2b00      	cmp	r3, #0
 800408a:	dc20      	bgt.n	80040ce <_dtoa_r+0x946>
 800408c:	9308      	str	r3, [sp, #32]
 800408e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004090:	2b02      	cmp	r3, #2
 8004092:	dd1e      	ble.n	80040d2 <_dtoa_r+0x94a>
 8004094:	9b08      	ldr	r3, [sp, #32]
 8004096:	2b00      	cmp	r3, #0
 8004098:	f47f aebc 	bne.w	8003e14 <_dtoa_r+0x68c>
 800409c:	4621      	mov	r1, r4
 800409e:	2205      	movs	r2, #5
 80040a0:	4658      	mov	r0, fp
 80040a2:	f000 fa99 	bl	80045d8 <__multadd>
 80040a6:	4601      	mov	r1, r0
 80040a8:	4604      	mov	r4, r0
 80040aa:	4648      	mov	r0, r9
 80040ac:	f000 fcaa 	bl	8004a04 <__mcmp>
 80040b0:	2800      	cmp	r0, #0
 80040b2:	f77f aeaf 	ble.w	8003e14 <_dtoa_r+0x68c>
 80040b6:	2331      	movs	r3, #49	@ 0x31
 80040b8:	4656      	mov	r6, sl
 80040ba:	f806 3b01 	strb.w	r3, [r6], #1
 80040be:	9b04      	ldr	r3, [sp, #16]
 80040c0:	3301      	adds	r3, #1
 80040c2:	9304      	str	r3, [sp, #16]
 80040c4:	e6aa      	b.n	8003e1c <_dtoa_r+0x694>
 80040c6:	9c07      	ldr	r4, [sp, #28]
 80040c8:	9704      	str	r7, [sp, #16]
 80040ca:	4625      	mov	r5, r4
 80040cc:	e7f3      	b.n	80040b6 <_dtoa_r+0x92e>
 80040ce:	9b07      	ldr	r3, [sp, #28]
 80040d0:	9308      	str	r3, [sp, #32]
 80040d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f000 8104 	beq.w	80042e2 <_dtoa_r+0xb5a>
 80040da:	2e00      	cmp	r6, #0
 80040dc:	dd05      	ble.n	80040ea <_dtoa_r+0x962>
 80040de:	4629      	mov	r1, r5
 80040e0:	4632      	mov	r2, r6
 80040e2:	4658      	mov	r0, fp
 80040e4:	f000 fc22 	bl	800492c <__lshift>
 80040e8:	4605      	mov	r5, r0
 80040ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d05a      	beq.n	80041a6 <_dtoa_r+0xa1e>
 80040f0:	4658      	mov	r0, fp
 80040f2:	6869      	ldr	r1, [r5, #4]
 80040f4:	f000 fa0e 	bl	8004514 <_Balloc>
 80040f8:	4606      	mov	r6, r0
 80040fa:	b928      	cbnz	r0, 8004108 <_dtoa_r+0x980>
 80040fc:	4602      	mov	r2, r0
 80040fe:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004102:	4b83      	ldr	r3, [pc, #524]	@ (8004310 <_dtoa_r+0xb88>)
 8004104:	f7ff bb54 	b.w	80037b0 <_dtoa_r+0x28>
 8004108:	692a      	ldr	r2, [r5, #16]
 800410a:	f105 010c 	add.w	r1, r5, #12
 800410e:	3202      	adds	r2, #2
 8004110:	0092      	lsls	r2, r2, #2
 8004112:	300c      	adds	r0, #12
 8004114:	f000 ffa8 	bl	8005068 <memcpy>
 8004118:	2201      	movs	r2, #1
 800411a:	4631      	mov	r1, r6
 800411c:	4658      	mov	r0, fp
 800411e:	f000 fc05 	bl	800492c <__lshift>
 8004122:	462f      	mov	r7, r5
 8004124:	4605      	mov	r5, r0
 8004126:	f10a 0301 	add.w	r3, sl, #1
 800412a:	9307      	str	r3, [sp, #28]
 800412c:	9b08      	ldr	r3, [sp, #32]
 800412e:	4453      	add	r3, sl
 8004130:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004132:	9b02      	ldr	r3, [sp, #8]
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	930a      	str	r3, [sp, #40]	@ 0x28
 800413a:	9b07      	ldr	r3, [sp, #28]
 800413c:	4621      	mov	r1, r4
 800413e:	3b01      	subs	r3, #1
 8004140:	4648      	mov	r0, r9
 8004142:	9302      	str	r3, [sp, #8]
 8004144:	f7ff fa97 	bl	8003676 <quorem>
 8004148:	4639      	mov	r1, r7
 800414a:	9008      	str	r0, [sp, #32]
 800414c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004150:	4648      	mov	r0, r9
 8004152:	f000 fc57 	bl	8004a04 <__mcmp>
 8004156:	462a      	mov	r2, r5
 8004158:	9009      	str	r0, [sp, #36]	@ 0x24
 800415a:	4621      	mov	r1, r4
 800415c:	4658      	mov	r0, fp
 800415e:	f000 fc6d 	bl	8004a3c <__mdiff>
 8004162:	68c2      	ldr	r2, [r0, #12]
 8004164:	4606      	mov	r6, r0
 8004166:	bb02      	cbnz	r2, 80041aa <_dtoa_r+0xa22>
 8004168:	4601      	mov	r1, r0
 800416a:	4648      	mov	r0, r9
 800416c:	f000 fc4a 	bl	8004a04 <__mcmp>
 8004170:	4602      	mov	r2, r0
 8004172:	4631      	mov	r1, r6
 8004174:	4658      	mov	r0, fp
 8004176:	920c      	str	r2, [sp, #48]	@ 0x30
 8004178:	f000 fa0c 	bl	8004594 <_Bfree>
 800417c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800417e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004180:	9e07      	ldr	r6, [sp, #28]
 8004182:	ea43 0102 	orr.w	r1, r3, r2
 8004186:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004188:	4319      	orrs	r1, r3
 800418a:	d110      	bne.n	80041ae <_dtoa_r+0xa26>
 800418c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004190:	d029      	beq.n	80041e6 <_dtoa_r+0xa5e>
 8004192:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004194:	2b00      	cmp	r3, #0
 8004196:	dd02      	ble.n	800419e <_dtoa_r+0xa16>
 8004198:	9b08      	ldr	r3, [sp, #32]
 800419a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800419e:	9b02      	ldr	r3, [sp, #8]
 80041a0:	f883 8000 	strb.w	r8, [r3]
 80041a4:	e63b      	b.n	8003e1e <_dtoa_r+0x696>
 80041a6:	4628      	mov	r0, r5
 80041a8:	e7bb      	b.n	8004122 <_dtoa_r+0x99a>
 80041aa:	2201      	movs	r2, #1
 80041ac:	e7e1      	b.n	8004172 <_dtoa_r+0x9ea>
 80041ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	db04      	blt.n	80041be <_dtoa_r+0xa36>
 80041b4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80041b6:	430b      	orrs	r3, r1
 80041b8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80041ba:	430b      	orrs	r3, r1
 80041bc:	d120      	bne.n	8004200 <_dtoa_r+0xa78>
 80041be:	2a00      	cmp	r2, #0
 80041c0:	dded      	ble.n	800419e <_dtoa_r+0xa16>
 80041c2:	4649      	mov	r1, r9
 80041c4:	2201      	movs	r2, #1
 80041c6:	4658      	mov	r0, fp
 80041c8:	f000 fbb0 	bl	800492c <__lshift>
 80041cc:	4621      	mov	r1, r4
 80041ce:	4681      	mov	r9, r0
 80041d0:	f000 fc18 	bl	8004a04 <__mcmp>
 80041d4:	2800      	cmp	r0, #0
 80041d6:	dc03      	bgt.n	80041e0 <_dtoa_r+0xa58>
 80041d8:	d1e1      	bne.n	800419e <_dtoa_r+0xa16>
 80041da:	f018 0f01 	tst.w	r8, #1
 80041de:	d0de      	beq.n	800419e <_dtoa_r+0xa16>
 80041e0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80041e4:	d1d8      	bne.n	8004198 <_dtoa_r+0xa10>
 80041e6:	2339      	movs	r3, #57	@ 0x39
 80041e8:	9a02      	ldr	r2, [sp, #8]
 80041ea:	7013      	strb	r3, [r2, #0]
 80041ec:	4633      	mov	r3, r6
 80041ee:	461e      	mov	r6, r3
 80041f0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80041f4:	3b01      	subs	r3, #1
 80041f6:	2a39      	cmp	r2, #57	@ 0x39
 80041f8:	d052      	beq.n	80042a0 <_dtoa_r+0xb18>
 80041fa:	3201      	adds	r2, #1
 80041fc:	701a      	strb	r2, [r3, #0]
 80041fe:	e60e      	b.n	8003e1e <_dtoa_r+0x696>
 8004200:	2a00      	cmp	r2, #0
 8004202:	dd07      	ble.n	8004214 <_dtoa_r+0xa8c>
 8004204:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004208:	d0ed      	beq.n	80041e6 <_dtoa_r+0xa5e>
 800420a:	9a02      	ldr	r2, [sp, #8]
 800420c:	f108 0301 	add.w	r3, r8, #1
 8004210:	7013      	strb	r3, [r2, #0]
 8004212:	e604      	b.n	8003e1e <_dtoa_r+0x696>
 8004214:	9b07      	ldr	r3, [sp, #28]
 8004216:	9a07      	ldr	r2, [sp, #28]
 8004218:	f803 8c01 	strb.w	r8, [r3, #-1]
 800421c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800421e:	4293      	cmp	r3, r2
 8004220:	d028      	beq.n	8004274 <_dtoa_r+0xaec>
 8004222:	4649      	mov	r1, r9
 8004224:	2300      	movs	r3, #0
 8004226:	220a      	movs	r2, #10
 8004228:	4658      	mov	r0, fp
 800422a:	f000 f9d5 	bl	80045d8 <__multadd>
 800422e:	42af      	cmp	r7, r5
 8004230:	4681      	mov	r9, r0
 8004232:	f04f 0300 	mov.w	r3, #0
 8004236:	f04f 020a 	mov.w	r2, #10
 800423a:	4639      	mov	r1, r7
 800423c:	4658      	mov	r0, fp
 800423e:	d107      	bne.n	8004250 <_dtoa_r+0xac8>
 8004240:	f000 f9ca 	bl	80045d8 <__multadd>
 8004244:	4607      	mov	r7, r0
 8004246:	4605      	mov	r5, r0
 8004248:	9b07      	ldr	r3, [sp, #28]
 800424a:	3301      	adds	r3, #1
 800424c:	9307      	str	r3, [sp, #28]
 800424e:	e774      	b.n	800413a <_dtoa_r+0x9b2>
 8004250:	f000 f9c2 	bl	80045d8 <__multadd>
 8004254:	4629      	mov	r1, r5
 8004256:	4607      	mov	r7, r0
 8004258:	2300      	movs	r3, #0
 800425a:	220a      	movs	r2, #10
 800425c:	4658      	mov	r0, fp
 800425e:	f000 f9bb 	bl	80045d8 <__multadd>
 8004262:	4605      	mov	r5, r0
 8004264:	e7f0      	b.n	8004248 <_dtoa_r+0xac0>
 8004266:	9b08      	ldr	r3, [sp, #32]
 8004268:	2700      	movs	r7, #0
 800426a:	2b00      	cmp	r3, #0
 800426c:	bfcc      	ite	gt
 800426e:	461e      	movgt	r6, r3
 8004270:	2601      	movle	r6, #1
 8004272:	4456      	add	r6, sl
 8004274:	4649      	mov	r1, r9
 8004276:	2201      	movs	r2, #1
 8004278:	4658      	mov	r0, fp
 800427a:	f000 fb57 	bl	800492c <__lshift>
 800427e:	4621      	mov	r1, r4
 8004280:	4681      	mov	r9, r0
 8004282:	f000 fbbf 	bl	8004a04 <__mcmp>
 8004286:	2800      	cmp	r0, #0
 8004288:	dcb0      	bgt.n	80041ec <_dtoa_r+0xa64>
 800428a:	d102      	bne.n	8004292 <_dtoa_r+0xb0a>
 800428c:	f018 0f01 	tst.w	r8, #1
 8004290:	d1ac      	bne.n	80041ec <_dtoa_r+0xa64>
 8004292:	4633      	mov	r3, r6
 8004294:	461e      	mov	r6, r3
 8004296:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800429a:	2a30      	cmp	r2, #48	@ 0x30
 800429c:	d0fa      	beq.n	8004294 <_dtoa_r+0xb0c>
 800429e:	e5be      	b.n	8003e1e <_dtoa_r+0x696>
 80042a0:	459a      	cmp	sl, r3
 80042a2:	d1a4      	bne.n	80041ee <_dtoa_r+0xa66>
 80042a4:	9b04      	ldr	r3, [sp, #16]
 80042a6:	3301      	adds	r3, #1
 80042a8:	9304      	str	r3, [sp, #16]
 80042aa:	2331      	movs	r3, #49	@ 0x31
 80042ac:	f88a 3000 	strb.w	r3, [sl]
 80042b0:	e5b5      	b.n	8003e1e <_dtoa_r+0x696>
 80042b2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80042b4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8004314 <_dtoa_r+0xb8c>
 80042b8:	b11b      	cbz	r3, 80042c2 <_dtoa_r+0xb3a>
 80042ba:	f10a 0308 	add.w	r3, sl, #8
 80042be:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80042c0:	6013      	str	r3, [r2, #0]
 80042c2:	4650      	mov	r0, sl
 80042c4:	b017      	add	sp, #92	@ 0x5c
 80042c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042ca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	f77f ae3d 	ble.w	8003f4c <_dtoa_r+0x7c4>
 80042d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80042d4:	930a      	str	r3, [sp, #40]	@ 0x28
 80042d6:	2001      	movs	r0, #1
 80042d8:	e65b      	b.n	8003f92 <_dtoa_r+0x80a>
 80042da:	9b08      	ldr	r3, [sp, #32]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f77f aed6 	ble.w	800408e <_dtoa_r+0x906>
 80042e2:	4656      	mov	r6, sl
 80042e4:	4621      	mov	r1, r4
 80042e6:	4648      	mov	r0, r9
 80042e8:	f7ff f9c5 	bl	8003676 <quorem>
 80042ec:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80042f0:	9b08      	ldr	r3, [sp, #32]
 80042f2:	f806 8b01 	strb.w	r8, [r6], #1
 80042f6:	eba6 020a 	sub.w	r2, r6, sl
 80042fa:	4293      	cmp	r3, r2
 80042fc:	ddb3      	ble.n	8004266 <_dtoa_r+0xade>
 80042fe:	4649      	mov	r1, r9
 8004300:	2300      	movs	r3, #0
 8004302:	220a      	movs	r2, #10
 8004304:	4658      	mov	r0, fp
 8004306:	f000 f967 	bl	80045d8 <__multadd>
 800430a:	4681      	mov	r9, r0
 800430c:	e7ea      	b.n	80042e4 <_dtoa_r+0xb5c>
 800430e:	bf00      	nop
 8004310:	08005818 	.word	0x08005818
 8004314:	0800579c 	.word	0x0800579c

08004318 <_free_r>:
 8004318:	b538      	push	{r3, r4, r5, lr}
 800431a:	4605      	mov	r5, r0
 800431c:	2900      	cmp	r1, #0
 800431e:	d040      	beq.n	80043a2 <_free_r+0x8a>
 8004320:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004324:	1f0c      	subs	r4, r1, #4
 8004326:	2b00      	cmp	r3, #0
 8004328:	bfb8      	it	lt
 800432a:	18e4      	addlt	r4, r4, r3
 800432c:	f000 f8e6 	bl	80044fc <__malloc_lock>
 8004330:	4a1c      	ldr	r2, [pc, #112]	@ (80043a4 <_free_r+0x8c>)
 8004332:	6813      	ldr	r3, [r2, #0]
 8004334:	b933      	cbnz	r3, 8004344 <_free_r+0x2c>
 8004336:	6063      	str	r3, [r4, #4]
 8004338:	6014      	str	r4, [r2, #0]
 800433a:	4628      	mov	r0, r5
 800433c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004340:	f000 b8e2 	b.w	8004508 <__malloc_unlock>
 8004344:	42a3      	cmp	r3, r4
 8004346:	d908      	bls.n	800435a <_free_r+0x42>
 8004348:	6820      	ldr	r0, [r4, #0]
 800434a:	1821      	adds	r1, r4, r0
 800434c:	428b      	cmp	r3, r1
 800434e:	bf01      	itttt	eq
 8004350:	6819      	ldreq	r1, [r3, #0]
 8004352:	685b      	ldreq	r3, [r3, #4]
 8004354:	1809      	addeq	r1, r1, r0
 8004356:	6021      	streq	r1, [r4, #0]
 8004358:	e7ed      	b.n	8004336 <_free_r+0x1e>
 800435a:	461a      	mov	r2, r3
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	b10b      	cbz	r3, 8004364 <_free_r+0x4c>
 8004360:	42a3      	cmp	r3, r4
 8004362:	d9fa      	bls.n	800435a <_free_r+0x42>
 8004364:	6811      	ldr	r1, [r2, #0]
 8004366:	1850      	adds	r0, r2, r1
 8004368:	42a0      	cmp	r0, r4
 800436a:	d10b      	bne.n	8004384 <_free_r+0x6c>
 800436c:	6820      	ldr	r0, [r4, #0]
 800436e:	4401      	add	r1, r0
 8004370:	1850      	adds	r0, r2, r1
 8004372:	4283      	cmp	r3, r0
 8004374:	6011      	str	r1, [r2, #0]
 8004376:	d1e0      	bne.n	800433a <_free_r+0x22>
 8004378:	6818      	ldr	r0, [r3, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	4408      	add	r0, r1
 800437e:	6010      	str	r0, [r2, #0]
 8004380:	6053      	str	r3, [r2, #4]
 8004382:	e7da      	b.n	800433a <_free_r+0x22>
 8004384:	d902      	bls.n	800438c <_free_r+0x74>
 8004386:	230c      	movs	r3, #12
 8004388:	602b      	str	r3, [r5, #0]
 800438a:	e7d6      	b.n	800433a <_free_r+0x22>
 800438c:	6820      	ldr	r0, [r4, #0]
 800438e:	1821      	adds	r1, r4, r0
 8004390:	428b      	cmp	r3, r1
 8004392:	bf01      	itttt	eq
 8004394:	6819      	ldreq	r1, [r3, #0]
 8004396:	685b      	ldreq	r3, [r3, #4]
 8004398:	1809      	addeq	r1, r1, r0
 800439a:	6021      	streq	r1, [r4, #0]
 800439c:	6063      	str	r3, [r4, #4]
 800439e:	6054      	str	r4, [r2, #4]
 80043a0:	e7cb      	b.n	800433a <_free_r+0x22>
 80043a2:	bd38      	pop	{r3, r4, r5, pc}
 80043a4:	200003dc 	.word	0x200003dc

080043a8 <malloc>:
 80043a8:	4b02      	ldr	r3, [pc, #8]	@ (80043b4 <malloc+0xc>)
 80043aa:	4601      	mov	r1, r0
 80043ac:	6818      	ldr	r0, [r3, #0]
 80043ae:	f000 b825 	b.w	80043fc <_malloc_r>
 80043b2:	bf00      	nop
 80043b4:	20000018 	.word	0x20000018

080043b8 <sbrk_aligned>:
 80043b8:	b570      	push	{r4, r5, r6, lr}
 80043ba:	4e0f      	ldr	r6, [pc, #60]	@ (80043f8 <sbrk_aligned+0x40>)
 80043bc:	460c      	mov	r4, r1
 80043be:	6831      	ldr	r1, [r6, #0]
 80043c0:	4605      	mov	r5, r0
 80043c2:	b911      	cbnz	r1, 80043ca <sbrk_aligned+0x12>
 80043c4:	f000 fe40 	bl	8005048 <_sbrk_r>
 80043c8:	6030      	str	r0, [r6, #0]
 80043ca:	4621      	mov	r1, r4
 80043cc:	4628      	mov	r0, r5
 80043ce:	f000 fe3b 	bl	8005048 <_sbrk_r>
 80043d2:	1c43      	adds	r3, r0, #1
 80043d4:	d103      	bne.n	80043de <sbrk_aligned+0x26>
 80043d6:	f04f 34ff 	mov.w	r4, #4294967295
 80043da:	4620      	mov	r0, r4
 80043dc:	bd70      	pop	{r4, r5, r6, pc}
 80043de:	1cc4      	adds	r4, r0, #3
 80043e0:	f024 0403 	bic.w	r4, r4, #3
 80043e4:	42a0      	cmp	r0, r4
 80043e6:	d0f8      	beq.n	80043da <sbrk_aligned+0x22>
 80043e8:	1a21      	subs	r1, r4, r0
 80043ea:	4628      	mov	r0, r5
 80043ec:	f000 fe2c 	bl	8005048 <_sbrk_r>
 80043f0:	3001      	adds	r0, #1
 80043f2:	d1f2      	bne.n	80043da <sbrk_aligned+0x22>
 80043f4:	e7ef      	b.n	80043d6 <sbrk_aligned+0x1e>
 80043f6:	bf00      	nop
 80043f8:	200003d8 	.word	0x200003d8

080043fc <_malloc_r>:
 80043fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004400:	1ccd      	adds	r5, r1, #3
 8004402:	f025 0503 	bic.w	r5, r5, #3
 8004406:	3508      	adds	r5, #8
 8004408:	2d0c      	cmp	r5, #12
 800440a:	bf38      	it	cc
 800440c:	250c      	movcc	r5, #12
 800440e:	2d00      	cmp	r5, #0
 8004410:	4606      	mov	r6, r0
 8004412:	db01      	blt.n	8004418 <_malloc_r+0x1c>
 8004414:	42a9      	cmp	r1, r5
 8004416:	d904      	bls.n	8004422 <_malloc_r+0x26>
 8004418:	230c      	movs	r3, #12
 800441a:	6033      	str	r3, [r6, #0]
 800441c:	2000      	movs	r0, #0
 800441e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004422:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80044f8 <_malloc_r+0xfc>
 8004426:	f000 f869 	bl	80044fc <__malloc_lock>
 800442a:	f8d8 3000 	ldr.w	r3, [r8]
 800442e:	461c      	mov	r4, r3
 8004430:	bb44      	cbnz	r4, 8004484 <_malloc_r+0x88>
 8004432:	4629      	mov	r1, r5
 8004434:	4630      	mov	r0, r6
 8004436:	f7ff ffbf 	bl	80043b8 <sbrk_aligned>
 800443a:	1c43      	adds	r3, r0, #1
 800443c:	4604      	mov	r4, r0
 800443e:	d158      	bne.n	80044f2 <_malloc_r+0xf6>
 8004440:	f8d8 4000 	ldr.w	r4, [r8]
 8004444:	4627      	mov	r7, r4
 8004446:	2f00      	cmp	r7, #0
 8004448:	d143      	bne.n	80044d2 <_malloc_r+0xd6>
 800444a:	2c00      	cmp	r4, #0
 800444c:	d04b      	beq.n	80044e6 <_malloc_r+0xea>
 800444e:	6823      	ldr	r3, [r4, #0]
 8004450:	4639      	mov	r1, r7
 8004452:	4630      	mov	r0, r6
 8004454:	eb04 0903 	add.w	r9, r4, r3
 8004458:	f000 fdf6 	bl	8005048 <_sbrk_r>
 800445c:	4581      	cmp	r9, r0
 800445e:	d142      	bne.n	80044e6 <_malloc_r+0xea>
 8004460:	6821      	ldr	r1, [r4, #0]
 8004462:	4630      	mov	r0, r6
 8004464:	1a6d      	subs	r5, r5, r1
 8004466:	4629      	mov	r1, r5
 8004468:	f7ff ffa6 	bl	80043b8 <sbrk_aligned>
 800446c:	3001      	adds	r0, #1
 800446e:	d03a      	beq.n	80044e6 <_malloc_r+0xea>
 8004470:	6823      	ldr	r3, [r4, #0]
 8004472:	442b      	add	r3, r5
 8004474:	6023      	str	r3, [r4, #0]
 8004476:	f8d8 3000 	ldr.w	r3, [r8]
 800447a:	685a      	ldr	r2, [r3, #4]
 800447c:	bb62      	cbnz	r2, 80044d8 <_malloc_r+0xdc>
 800447e:	f8c8 7000 	str.w	r7, [r8]
 8004482:	e00f      	b.n	80044a4 <_malloc_r+0xa8>
 8004484:	6822      	ldr	r2, [r4, #0]
 8004486:	1b52      	subs	r2, r2, r5
 8004488:	d420      	bmi.n	80044cc <_malloc_r+0xd0>
 800448a:	2a0b      	cmp	r2, #11
 800448c:	d917      	bls.n	80044be <_malloc_r+0xc2>
 800448e:	1961      	adds	r1, r4, r5
 8004490:	42a3      	cmp	r3, r4
 8004492:	6025      	str	r5, [r4, #0]
 8004494:	bf18      	it	ne
 8004496:	6059      	strne	r1, [r3, #4]
 8004498:	6863      	ldr	r3, [r4, #4]
 800449a:	bf08      	it	eq
 800449c:	f8c8 1000 	streq.w	r1, [r8]
 80044a0:	5162      	str	r2, [r4, r5]
 80044a2:	604b      	str	r3, [r1, #4]
 80044a4:	4630      	mov	r0, r6
 80044a6:	f000 f82f 	bl	8004508 <__malloc_unlock>
 80044aa:	f104 000b 	add.w	r0, r4, #11
 80044ae:	1d23      	adds	r3, r4, #4
 80044b0:	f020 0007 	bic.w	r0, r0, #7
 80044b4:	1ac2      	subs	r2, r0, r3
 80044b6:	bf1c      	itt	ne
 80044b8:	1a1b      	subne	r3, r3, r0
 80044ba:	50a3      	strne	r3, [r4, r2]
 80044bc:	e7af      	b.n	800441e <_malloc_r+0x22>
 80044be:	6862      	ldr	r2, [r4, #4]
 80044c0:	42a3      	cmp	r3, r4
 80044c2:	bf0c      	ite	eq
 80044c4:	f8c8 2000 	streq.w	r2, [r8]
 80044c8:	605a      	strne	r2, [r3, #4]
 80044ca:	e7eb      	b.n	80044a4 <_malloc_r+0xa8>
 80044cc:	4623      	mov	r3, r4
 80044ce:	6864      	ldr	r4, [r4, #4]
 80044d0:	e7ae      	b.n	8004430 <_malloc_r+0x34>
 80044d2:	463c      	mov	r4, r7
 80044d4:	687f      	ldr	r7, [r7, #4]
 80044d6:	e7b6      	b.n	8004446 <_malloc_r+0x4a>
 80044d8:	461a      	mov	r2, r3
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	42a3      	cmp	r3, r4
 80044de:	d1fb      	bne.n	80044d8 <_malloc_r+0xdc>
 80044e0:	2300      	movs	r3, #0
 80044e2:	6053      	str	r3, [r2, #4]
 80044e4:	e7de      	b.n	80044a4 <_malloc_r+0xa8>
 80044e6:	230c      	movs	r3, #12
 80044e8:	4630      	mov	r0, r6
 80044ea:	6033      	str	r3, [r6, #0]
 80044ec:	f000 f80c 	bl	8004508 <__malloc_unlock>
 80044f0:	e794      	b.n	800441c <_malloc_r+0x20>
 80044f2:	6005      	str	r5, [r0, #0]
 80044f4:	e7d6      	b.n	80044a4 <_malloc_r+0xa8>
 80044f6:	bf00      	nop
 80044f8:	200003dc 	.word	0x200003dc

080044fc <__malloc_lock>:
 80044fc:	4801      	ldr	r0, [pc, #4]	@ (8004504 <__malloc_lock+0x8>)
 80044fe:	f7ff b8aa 	b.w	8003656 <__retarget_lock_acquire_recursive>
 8004502:	bf00      	nop
 8004504:	200003d4 	.word	0x200003d4

08004508 <__malloc_unlock>:
 8004508:	4801      	ldr	r0, [pc, #4]	@ (8004510 <__malloc_unlock+0x8>)
 800450a:	f7ff b8a5 	b.w	8003658 <__retarget_lock_release_recursive>
 800450e:	bf00      	nop
 8004510:	200003d4 	.word	0x200003d4

08004514 <_Balloc>:
 8004514:	b570      	push	{r4, r5, r6, lr}
 8004516:	69c6      	ldr	r6, [r0, #28]
 8004518:	4604      	mov	r4, r0
 800451a:	460d      	mov	r5, r1
 800451c:	b976      	cbnz	r6, 800453c <_Balloc+0x28>
 800451e:	2010      	movs	r0, #16
 8004520:	f7ff ff42 	bl	80043a8 <malloc>
 8004524:	4602      	mov	r2, r0
 8004526:	61e0      	str	r0, [r4, #28]
 8004528:	b920      	cbnz	r0, 8004534 <_Balloc+0x20>
 800452a:	216b      	movs	r1, #107	@ 0x6b
 800452c:	4b17      	ldr	r3, [pc, #92]	@ (800458c <_Balloc+0x78>)
 800452e:	4818      	ldr	r0, [pc, #96]	@ (8004590 <_Balloc+0x7c>)
 8004530:	f000 fda8 	bl	8005084 <__assert_func>
 8004534:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004538:	6006      	str	r6, [r0, #0]
 800453a:	60c6      	str	r6, [r0, #12]
 800453c:	69e6      	ldr	r6, [r4, #28]
 800453e:	68f3      	ldr	r3, [r6, #12]
 8004540:	b183      	cbz	r3, 8004564 <_Balloc+0x50>
 8004542:	69e3      	ldr	r3, [r4, #28]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800454a:	b9b8      	cbnz	r0, 800457c <_Balloc+0x68>
 800454c:	2101      	movs	r1, #1
 800454e:	fa01 f605 	lsl.w	r6, r1, r5
 8004552:	1d72      	adds	r2, r6, #5
 8004554:	4620      	mov	r0, r4
 8004556:	0092      	lsls	r2, r2, #2
 8004558:	f000 fdb2 	bl	80050c0 <_calloc_r>
 800455c:	b160      	cbz	r0, 8004578 <_Balloc+0x64>
 800455e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004562:	e00e      	b.n	8004582 <_Balloc+0x6e>
 8004564:	2221      	movs	r2, #33	@ 0x21
 8004566:	2104      	movs	r1, #4
 8004568:	4620      	mov	r0, r4
 800456a:	f000 fda9 	bl	80050c0 <_calloc_r>
 800456e:	69e3      	ldr	r3, [r4, #28]
 8004570:	60f0      	str	r0, [r6, #12]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1e4      	bne.n	8004542 <_Balloc+0x2e>
 8004578:	2000      	movs	r0, #0
 800457a:	bd70      	pop	{r4, r5, r6, pc}
 800457c:	6802      	ldr	r2, [r0, #0]
 800457e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004582:	2300      	movs	r3, #0
 8004584:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004588:	e7f7      	b.n	800457a <_Balloc+0x66>
 800458a:	bf00      	nop
 800458c:	080057a9 	.word	0x080057a9
 8004590:	08005829 	.word	0x08005829

08004594 <_Bfree>:
 8004594:	b570      	push	{r4, r5, r6, lr}
 8004596:	69c6      	ldr	r6, [r0, #28]
 8004598:	4605      	mov	r5, r0
 800459a:	460c      	mov	r4, r1
 800459c:	b976      	cbnz	r6, 80045bc <_Bfree+0x28>
 800459e:	2010      	movs	r0, #16
 80045a0:	f7ff ff02 	bl	80043a8 <malloc>
 80045a4:	4602      	mov	r2, r0
 80045a6:	61e8      	str	r0, [r5, #28]
 80045a8:	b920      	cbnz	r0, 80045b4 <_Bfree+0x20>
 80045aa:	218f      	movs	r1, #143	@ 0x8f
 80045ac:	4b08      	ldr	r3, [pc, #32]	@ (80045d0 <_Bfree+0x3c>)
 80045ae:	4809      	ldr	r0, [pc, #36]	@ (80045d4 <_Bfree+0x40>)
 80045b0:	f000 fd68 	bl	8005084 <__assert_func>
 80045b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80045b8:	6006      	str	r6, [r0, #0]
 80045ba:	60c6      	str	r6, [r0, #12]
 80045bc:	b13c      	cbz	r4, 80045ce <_Bfree+0x3a>
 80045be:	69eb      	ldr	r3, [r5, #28]
 80045c0:	6862      	ldr	r2, [r4, #4]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80045c8:	6021      	str	r1, [r4, #0]
 80045ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80045ce:	bd70      	pop	{r4, r5, r6, pc}
 80045d0:	080057a9 	.word	0x080057a9
 80045d4:	08005829 	.word	0x08005829

080045d8 <__multadd>:
 80045d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045dc:	4607      	mov	r7, r0
 80045de:	460c      	mov	r4, r1
 80045e0:	461e      	mov	r6, r3
 80045e2:	2000      	movs	r0, #0
 80045e4:	690d      	ldr	r5, [r1, #16]
 80045e6:	f101 0c14 	add.w	ip, r1, #20
 80045ea:	f8dc 3000 	ldr.w	r3, [ip]
 80045ee:	3001      	adds	r0, #1
 80045f0:	b299      	uxth	r1, r3
 80045f2:	fb02 6101 	mla	r1, r2, r1, r6
 80045f6:	0c1e      	lsrs	r6, r3, #16
 80045f8:	0c0b      	lsrs	r3, r1, #16
 80045fa:	fb02 3306 	mla	r3, r2, r6, r3
 80045fe:	b289      	uxth	r1, r1
 8004600:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004604:	4285      	cmp	r5, r0
 8004606:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800460a:	f84c 1b04 	str.w	r1, [ip], #4
 800460e:	dcec      	bgt.n	80045ea <__multadd+0x12>
 8004610:	b30e      	cbz	r6, 8004656 <__multadd+0x7e>
 8004612:	68a3      	ldr	r3, [r4, #8]
 8004614:	42ab      	cmp	r3, r5
 8004616:	dc19      	bgt.n	800464c <__multadd+0x74>
 8004618:	6861      	ldr	r1, [r4, #4]
 800461a:	4638      	mov	r0, r7
 800461c:	3101      	adds	r1, #1
 800461e:	f7ff ff79 	bl	8004514 <_Balloc>
 8004622:	4680      	mov	r8, r0
 8004624:	b928      	cbnz	r0, 8004632 <__multadd+0x5a>
 8004626:	4602      	mov	r2, r0
 8004628:	21ba      	movs	r1, #186	@ 0xba
 800462a:	4b0c      	ldr	r3, [pc, #48]	@ (800465c <__multadd+0x84>)
 800462c:	480c      	ldr	r0, [pc, #48]	@ (8004660 <__multadd+0x88>)
 800462e:	f000 fd29 	bl	8005084 <__assert_func>
 8004632:	6922      	ldr	r2, [r4, #16]
 8004634:	f104 010c 	add.w	r1, r4, #12
 8004638:	3202      	adds	r2, #2
 800463a:	0092      	lsls	r2, r2, #2
 800463c:	300c      	adds	r0, #12
 800463e:	f000 fd13 	bl	8005068 <memcpy>
 8004642:	4621      	mov	r1, r4
 8004644:	4638      	mov	r0, r7
 8004646:	f7ff ffa5 	bl	8004594 <_Bfree>
 800464a:	4644      	mov	r4, r8
 800464c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004650:	3501      	adds	r5, #1
 8004652:	615e      	str	r6, [r3, #20]
 8004654:	6125      	str	r5, [r4, #16]
 8004656:	4620      	mov	r0, r4
 8004658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800465c:	08005818 	.word	0x08005818
 8004660:	08005829 	.word	0x08005829

08004664 <__hi0bits>:
 8004664:	4603      	mov	r3, r0
 8004666:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800466a:	bf3a      	itte	cc
 800466c:	0403      	lslcc	r3, r0, #16
 800466e:	2010      	movcc	r0, #16
 8004670:	2000      	movcs	r0, #0
 8004672:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004676:	bf3c      	itt	cc
 8004678:	021b      	lslcc	r3, r3, #8
 800467a:	3008      	addcc	r0, #8
 800467c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004680:	bf3c      	itt	cc
 8004682:	011b      	lslcc	r3, r3, #4
 8004684:	3004      	addcc	r0, #4
 8004686:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800468a:	bf3c      	itt	cc
 800468c:	009b      	lslcc	r3, r3, #2
 800468e:	3002      	addcc	r0, #2
 8004690:	2b00      	cmp	r3, #0
 8004692:	db05      	blt.n	80046a0 <__hi0bits+0x3c>
 8004694:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004698:	f100 0001 	add.w	r0, r0, #1
 800469c:	bf08      	it	eq
 800469e:	2020      	moveq	r0, #32
 80046a0:	4770      	bx	lr

080046a2 <__lo0bits>:
 80046a2:	6803      	ldr	r3, [r0, #0]
 80046a4:	4602      	mov	r2, r0
 80046a6:	f013 0007 	ands.w	r0, r3, #7
 80046aa:	d00b      	beq.n	80046c4 <__lo0bits+0x22>
 80046ac:	07d9      	lsls	r1, r3, #31
 80046ae:	d421      	bmi.n	80046f4 <__lo0bits+0x52>
 80046b0:	0798      	lsls	r0, r3, #30
 80046b2:	bf49      	itett	mi
 80046b4:	085b      	lsrmi	r3, r3, #1
 80046b6:	089b      	lsrpl	r3, r3, #2
 80046b8:	2001      	movmi	r0, #1
 80046ba:	6013      	strmi	r3, [r2, #0]
 80046bc:	bf5c      	itt	pl
 80046be:	2002      	movpl	r0, #2
 80046c0:	6013      	strpl	r3, [r2, #0]
 80046c2:	4770      	bx	lr
 80046c4:	b299      	uxth	r1, r3
 80046c6:	b909      	cbnz	r1, 80046cc <__lo0bits+0x2a>
 80046c8:	2010      	movs	r0, #16
 80046ca:	0c1b      	lsrs	r3, r3, #16
 80046cc:	b2d9      	uxtb	r1, r3
 80046ce:	b909      	cbnz	r1, 80046d4 <__lo0bits+0x32>
 80046d0:	3008      	adds	r0, #8
 80046d2:	0a1b      	lsrs	r3, r3, #8
 80046d4:	0719      	lsls	r1, r3, #28
 80046d6:	bf04      	itt	eq
 80046d8:	091b      	lsreq	r3, r3, #4
 80046da:	3004      	addeq	r0, #4
 80046dc:	0799      	lsls	r1, r3, #30
 80046de:	bf04      	itt	eq
 80046e0:	089b      	lsreq	r3, r3, #2
 80046e2:	3002      	addeq	r0, #2
 80046e4:	07d9      	lsls	r1, r3, #31
 80046e6:	d403      	bmi.n	80046f0 <__lo0bits+0x4e>
 80046e8:	085b      	lsrs	r3, r3, #1
 80046ea:	f100 0001 	add.w	r0, r0, #1
 80046ee:	d003      	beq.n	80046f8 <__lo0bits+0x56>
 80046f0:	6013      	str	r3, [r2, #0]
 80046f2:	4770      	bx	lr
 80046f4:	2000      	movs	r0, #0
 80046f6:	4770      	bx	lr
 80046f8:	2020      	movs	r0, #32
 80046fa:	4770      	bx	lr

080046fc <__i2b>:
 80046fc:	b510      	push	{r4, lr}
 80046fe:	460c      	mov	r4, r1
 8004700:	2101      	movs	r1, #1
 8004702:	f7ff ff07 	bl	8004514 <_Balloc>
 8004706:	4602      	mov	r2, r0
 8004708:	b928      	cbnz	r0, 8004716 <__i2b+0x1a>
 800470a:	f240 1145 	movw	r1, #325	@ 0x145
 800470e:	4b04      	ldr	r3, [pc, #16]	@ (8004720 <__i2b+0x24>)
 8004710:	4804      	ldr	r0, [pc, #16]	@ (8004724 <__i2b+0x28>)
 8004712:	f000 fcb7 	bl	8005084 <__assert_func>
 8004716:	2301      	movs	r3, #1
 8004718:	6144      	str	r4, [r0, #20]
 800471a:	6103      	str	r3, [r0, #16]
 800471c:	bd10      	pop	{r4, pc}
 800471e:	bf00      	nop
 8004720:	08005818 	.word	0x08005818
 8004724:	08005829 	.word	0x08005829

08004728 <__multiply>:
 8004728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800472c:	4614      	mov	r4, r2
 800472e:	690a      	ldr	r2, [r1, #16]
 8004730:	6923      	ldr	r3, [r4, #16]
 8004732:	460f      	mov	r7, r1
 8004734:	429a      	cmp	r2, r3
 8004736:	bfa2      	ittt	ge
 8004738:	4623      	movge	r3, r4
 800473a:	460c      	movge	r4, r1
 800473c:	461f      	movge	r7, r3
 800473e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004742:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8004746:	68a3      	ldr	r3, [r4, #8]
 8004748:	6861      	ldr	r1, [r4, #4]
 800474a:	eb0a 0609 	add.w	r6, sl, r9
 800474e:	42b3      	cmp	r3, r6
 8004750:	b085      	sub	sp, #20
 8004752:	bfb8      	it	lt
 8004754:	3101      	addlt	r1, #1
 8004756:	f7ff fedd 	bl	8004514 <_Balloc>
 800475a:	b930      	cbnz	r0, 800476a <__multiply+0x42>
 800475c:	4602      	mov	r2, r0
 800475e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004762:	4b43      	ldr	r3, [pc, #268]	@ (8004870 <__multiply+0x148>)
 8004764:	4843      	ldr	r0, [pc, #268]	@ (8004874 <__multiply+0x14c>)
 8004766:	f000 fc8d 	bl	8005084 <__assert_func>
 800476a:	f100 0514 	add.w	r5, r0, #20
 800476e:	462b      	mov	r3, r5
 8004770:	2200      	movs	r2, #0
 8004772:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004776:	4543      	cmp	r3, r8
 8004778:	d321      	bcc.n	80047be <__multiply+0x96>
 800477a:	f107 0114 	add.w	r1, r7, #20
 800477e:	f104 0214 	add.w	r2, r4, #20
 8004782:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8004786:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800478a:	9302      	str	r3, [sp, #8]
 800478c:	1b13      	subs	r3, r2, r4
 800478e:	3b15      	subs	r3, #21
 8004790:	f023 0303 	bic.w	r3, r3, #3
 8004794:	3304      	adds	r3, #4
 8004796:	f104 0715 	add.w	r7, r4, #21
 800479a:	42ba      	cmp	r2, r7
 800479c:	bf38      	it	cc
 800479e:	2304      	movcc	r3, #4
 80047a0:	9301      	str	r3, [sp, #4]
 80047a2:	9b02      	ldr	r3, [sp, #8]
 80047a4:	9103      	str	r1, [sp, #12]
 80047a6:	428b      	cmp	r3, r1
 80047a8:	d80c      	bhi.n	80047c4 <__multiply+0x9c>
 80047aa:	2e00      	cmp	r6, #0
 80047ac:	dd03      	ble.n	80047b6 <__multiply+0x8e>
 80047ae:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d05a      	beq.n	800486c <__multiply+0x144>
 80047b6:	6106      	str	r6, [r0, #16]
 80047b8:	b005      	add	sp, #20
 80047ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047be:	f843 2b04 	str.w	r2, [r3], #4
 80047c2:	e7d8      	b.n	8004776 <__multiply+0x4e>
 80047c4:	f8b1 a000 	ldrh.w	sl, [r1]
 80047c8:	f1ba 0f00 	cmp.w	sl, #0
 80047cc:	d023      	beq.n	8004816 <__multiply+0xee>
 80047ce:	46a9      	mov	r9, r5
 80047d0:	f04f 0c00 	mov.w	ip, #0
 80047d4:	f104 0e14 	add.w	lr, r4, #20
 80047d8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80047dc:	f8d9 3000 	ldr.w	r3, [r9]
 80047e0:	fa1f fb87 	uxth.w	fp, r7
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	fb0a 330b 	mla	r3, sl, fp, r3
 80047ea:	4463      	add	r3, ip
 80047ec:	f8d9 c000 	ldr.w	ip, [r9]
 80047f0:	0c3f      	lsrs	r7, r7, #16
 80047f2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80047f6:	fb0a c707 	mla	r7, sl, r7, ip
 80047fa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80047fe:	b29b      	uxth	r3, r3
 8004800:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004804:	4572      	cmp	r2, lr
 8004806:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800480a:	f849 3b04 	str.w	r3, [r9], #4
 800480e:	d8e3      	bhi.n	80047d8 <__multiply+0xb0>
 8004810:	9b01      	ldr	r3, [sp, #4]
 8004812:	f845 c003 	str.w	ip, [r5, r3]
 8004816:	9b03      	ldr	r3, [sp, #12]
 8004818:	3104      	adds	r1, #4
 800481a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800481e:	f1b9 0f00 	cmp.w	r9, #0
 8004822:	d021      	beq.n	8004868 <__multiply+0x140>
 8004824:	46ae      	mov	lr, r5
 8004826:	f04f 0a00 	mov.w	sl, #0
 800482a:	682b      	ldr	r3, [r5, #0]
 800482c:	f104 0c14 	add.w	ip, r4, #20
 8004830:	f8bc b000 	ldrh.w	fp, [ip]
 8004834:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8004838:	b29b      	uxth	r3, r3
 800483a:	fb09 770b 	mla	r7, r9, fp, r7
 800483e:	4457      	add	r7, sl
 8004840:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004844:	f84e 3b04 	str.w	r3, [lr], #4
 8004848:	f85c 3b04 	ldr.w	r3, [ip], #4
 800484c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004850:	f8be 3000 	ldrh.w	r3, [lr]
 8004854:	4562      	cmp	r2, ip
 8004856:	fb09 330a 	mla	r3, r9, sl, r3
 800485a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800485e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004862:	d8e5      	bhi.n	8004830 <__multiply+0x108>
 8004864:	9f01      	ldr	r7, [sp, #4]
 8004866:	51eb      	str	r3, [r5, r7]
 8004868:	3504      	adds	r5, #4
 800486a:	e79a      	b.n	80047a2 <__multiply+0x7a>
 800486c:	3e01      	subs	r6, #1
 800486e:	e79c      	b.n	80047aa <__multiply+0x82>
 8004870:	08005818 	.word	0x08005818
 8004874:	08005829 	.word	0x08005829

08004878 <__pow5mult>:
 8004878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800487c:	4615      	mov	r5, r2
 800487e:	f012 0203 	ands.w	r2, r2, #3
 8004882:	4607      	mov	r7, r0
 8004884:	460e      	mov	r6, r1
 8004886:	d007      	beq.n	8004898 <__pow5mult+0x20>
 8004888:	4c25      	ldr	r4, [pc, #148]	@ (8004920 <__pow5mult+0xa8>)
 800488a:	3a01      	subs	r2, #1
 800488c:	2300      	movs	r3, #0
 800488e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004892:	f7ff fea1 	bl	80045d8 <__multadd>
 8004896:	4606      	mov	r6, r0
 8004898:	10ad      	asrs	r5, r5, #2
 800489a:	d03d      	beq.n	8004918 <__pow5mult+0xa0>
 800489c:	69fc      	ldr	r4, [r7, #28]
 800489e:	b97c      	cbnz	r4, 80048c0 <__pow5mult+0x48>
 80048a0:	2010      	movs	r0, #16
 80048a2:	f7ff fd81 	bl	80043a8 <malloc>
 80048a6:	4602      	mov	r2, r0
 80048a8:	61f8      	str	r0, [r7, #28]
 80048aa:	b928      	cbnz	r0, 80048b8 <__pow5mult+0x40>
 80048ac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80048b0:	4b1c      	ldr	r3, [pc, #112]	@ (8004924 <__pow5mult+0xac>)
 80048b2:	481d      	ldr	r0, [pc, #116]	@ (8004928 <__pow5mult+0xb0>)
 80048b4:	f000 fbe6 	bl	8005084 <__assert_func>
 80048b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80048bc:	6004      	str	r4, [r0, #0]
 80048be:	60c4      	str	r4, [r0, #12]
 80048c0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80048c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80048c8:	b94c      	cbnz	r4, 80048de <__pow5mult+0x66>
 80048ca:	f240 2171 	movw	r1, #625	@ 0x271
 80048ce:	4638      	mov	r0, r7
 80048d0:	f7ff ff14 	bl	80046fc <__i2b>
 80048d4:	2300      	movs	r3, #0
 80048d6:	4604      	mov	r4, r0
 80048d8:	f8c8 0008 	str.w	r0, [r8, #8]
 80048dc:	6003      	str	r3, [r0, #0]
 80048de:	f04f 0900 	mov.w	r9, #0
 80048e2:	07eb      	lsls	r3, r5, #31
 80048e4:	d50a      	bpl.n	80048fc <__pow5mult+0x84>
 80048e6:	4631      	mov	r1, r6
 80048e8:	4622      	mov	r2, r4
 80048ea:	4638      	mov	r0, r7
 80048ec:	f7ff ff1c 	bl	8004728 <__multiply>
 80048f0:	4680      	mov	r8, r0
 80048f2:	4631      	mov	r1, r6
 80048f4:	4638      	mov	r0, r7
 80048f6:	f7ff fe4d 	bl	8004594 <_Bfree>
 80048fa:	4646      	mov	r6, r8
 80048fc:	106d      	asrs	r5, r5, #1
 80048fe:	d00b      	beq.n	8004918 <__pow5mult+0xa0>
 8004900:	6820      	ldr	r0, [r4, #0]
 8004902:	b938      	cbnz	r0, 8004914 <__pow5mult+0x9c>
 8004904:	4622      	mov	r2, r4
 8004906:	4621      	mov	r1, r4
 8004908:	4638      	mov	r0, r7
 800490a:	f7ff ff0d 	bl	8004728 <__multiply>
 800490e:	6020      	str	r0, [r4, #0]
 8004910:	f8c0 9000 	str.w	r9, [r0]
 8004914:	4604      	mov	r4, r0
 8004916:	e7e4      	b.n	80048e2 <__pow5mult+0x6a>
 8004918:	4630      	mov	r0, r6
 800491a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800491e:	bf00      	nop
 8004920:	08005884 	.word	0x08005884
 8004924:	080057a9 	.word	0x080057a9
 8004928:	08005829 	.word	0x08005829

0800492c <__lshift>:
 800492c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004930:	460c      	mov	r4, r1
 8004932:	4607      	mov	r7, r0
 8004934:	4691      	mov	r9, r2
 8004936:	6923      	ldr	r3, [r4, #16]
 8004938:	6849      	ldr	r1, [r1, #4]
 800493a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800493e:	68a3      	ldr	r3, [r4, #8]
 8004940:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004944:	f108 0601 	add.w	r6, r8, #1
 8004948:	42b3      	cmp	r3, r6
 800494a:	db0b      	blt.n	8004964 <__lshift+0x38>
 800494c:	4638      	mov	r0, r7
 800494e:	f7ff fde1 	bl	8004514 <_Balloc>
 8004952:	4605      	mov	r5, r0
 8004954:	b948      	cbnz	r0, 800496a <__lshift+0x3e>
 8004956:	4602      	mov	r2, r0
 8004958:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800495c:	4b27      	ldr	r3, [pc, #156]	@ (80049fc <__lshift+0xd0>)
 800495e:	4828      	ldr	r0, [pc, #160]	@ (8004a00 <__lshift+0xd4>)
 8004960:	f000 fb90 	bl	8005084 <__assert_func>
 8004964:	3101      	adds	r1, #1
 8004966:	005b      	lsls	r3, r3, #1
 8004968:	e7ee      	b.n	8004948 <__lshift+0x1c>
 800496a:	2300      	movs	r3, #0
 800496c:	f100 0114 	add.w	r1, r0, #20
 8004970:	f100 0210 	add.w	r2, r0, #16
 8004974:	4618      	mov	r0, r3
 8004976:	4553      	cmp	r3, sl
 8004978:	db33      	blt.n	80049e2 <__lshift+0xb6>
 800497a:	6920      	ldr	r0, [r4, #16]
 800497c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004980:	f104 0314 	add.w	r3, r4, #20
 8004984:	f019 091f 	ands.w	r9, r9, #31
 8004988:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800498c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004990:	d02b      	beq.n	80049ea <__lshift+0xbe>
 8004992:	468a      	mov	sl, r1
 8004994:	2200      	movs	r2, #0
 8004996:	f1c9 0e20 	rsb	lr, r9, #32
 800499a:	6818      	ldr	r0, [r3, #0]
 800499c:	fa00 f009 	lsl.w	r0, r0, r9
 80049a0:	4310      	orrs	r0, r2
 80049a2:	f84a 0b04 	str.w	r0, [sl], #4
 80049a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80049aa:	459c      	cmp	ip, r3
 80049ac:	fa22 f20e 	lsr.w	r2, r2, lr
 80049b0:	d8f3      	bhi.n	800499a <__lshift+0x6e>
 80049b2:	ebac 0304 	sub.w	r3, ip, r4
 80049b6:	3b15      	subs	r3, #21
 80049b8:	f023 0303 	bic.w	r3, r3, #3
 80049bc:	3304      	adds	r3, #4
 80049be:	f104 0015 	add.w	r0, r4, #21
 80049c2:	4584      	cmp	ip, r0
 80049c4:	bf38      	it	cc
 80049c6:	2304      	movcc	r3, #4
 80049c8:	50ca      	str	r2, [r1, r3]
 80049ca:	b10a      	cbz	r2, 80049d0 <__lshift+0xa4>
 80049cc:	f108 0602 	add.w	r6, r8, #2
 80049d0:	3e01      	subs	r6, #1
 80049d2:	4638      	mov	r0, r7
 80049d4:	4621      	mov	r1, r4
 80049d6:	612e      	str	r6, [r5, #16]
 80049d8:	f7ff fddc 	bl	8004594 <_Bfree>
 80049dc:	4628      	mov	r0, r5
 80049de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80049e6:	3301      	adds	r3, #1
 80049e8:	e7c5      	b.n	8004976 <__lshift+0x4a>
 80049ea:	3904      	subs	r1, #4
 80049ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80049f0:	459c      	cmp	ip, r3
 80049f2:	f841 2f04 	str.w	r2, [r1, #4]!
 80049f6:	d8f9      	bhi.n	80049ec <__lshift+0xc0>
 80049f8:	e7ea      	b.n	80049d0 <__lshift+0xa4>
 80049fa:	bf00      	nop
 80049fc:	08005818 	.word	0x08005818
 8004a00:	08005829 	.word	0x08005829

08004a04 <__mcmp>:
 8004a04:	4603      	mov	r3, r0
 8004a06:	690a      	ldr	r2, [r1, #16]
 8004a08:	6900      	ldr	r0, [r0, #16]
 8004a0a:	b530      	push	{r4, r5, lr}
 8004a0c:	1a80      	subs	r0, r0, r2
 8004a0e:	d10e      	bne.n	8004a2e <__mcmp+0x2a>
 8004a10:	3314      	adds	r3, #20
 8004a12:	3114      	adds	r1, #20
 8004a14:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004a18:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004a1c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004a20:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004a24:	4295      	cmp	r5, r2
 8004a26:	d003      	beq.n	8004a30 <__mcmp+0x2c>
 8004a28:	d205      	bcs.n	8004a36 <__mcmp+0x32>
 8004a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8004a2e:	bd30      	pop	{r4, r5, pc}
 8004a30:	42a3      	cmp	r3, r4
 8004a32:	d3f3      	bcc.n	8004a1c <__mcmp+0x18>
 8004a34:	e7fb      	b.n	8004a2e <__mcmp+0x2a>
 8004a36:	2001      	movs	r0, #1
 8004a38:	e7f9      	b.n	8004a2e <__mcmp+0x2a>
	...

08004a3c <__mdiff>:
 8004a3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a40:	4689      	mov	r9, r1
 8004a42:	4606      	mov	r6, r0
 8004a44:	4611      	mov	r1, r2
 8004a46:	4648      	mov	r0, r9
 8004a48:	4614      	mov	r4, r2
 8004a4a:	f7ff ffdb 	bl	8004a04 <__mcmp>
 8004a4e:	1e05      	subs	r5, r0, #0
 8004a50:	d112      	bne.n	8004a78 <__mdiff+0x3c>
 8004a52:	4629      	mov	r1, r5
 8004a54:	4630      	mov	r0, r6
 8004a56:	f7ff fd5d 	bl	8004514 <_Balloc>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	b928      	cbnz	r0, 8004a6a <__mdiff+0x2e>
 8004a5e:	f240 2137 	movw	r1, #567	@ 0x237
 8004a62:	4b3e      	ldr	r3, [pc, #248]	@ (8004b5c <__mdiff+0x120>)
 8004a64:	483e      	ldr	r0, [pc, #248]	@ (8004b60 <__mdiff+0x124>)
 8004a66:	f000 fb0d 	bl	8005084 <__assert_func>
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004a70:	4610      	mov	r0, r2
 8004a72:	b003      	add	sp, #12
 8004a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a78:	bfbc      	itt	lt
 8004a7a:	464b      	movlt	r3, r9
 8004a7c:	46a1      	movlt	r9, r4
 8004a7e:	4630      	mov	r0, r6
 8004a80:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004a84:	bfba      	itte	lt
 8004a86:	461c      	movlt	r4, r3
 8004a88:	2501      	movlt	r5, #1
 8004a8a:	2500      	movge	r5, #0
 8004a8c:	f7ff fd42 	bl	8004514 <_Balloc>
 8004a90:	4602      	mov	r2, r0
 8004a92:	b918      	cbnz	r0, 8004a9c <__mdiff+0x60>
 8004a94:	f240 2145 	movw	r1, #581	@ 0x245
 8004a98:	4b30      	ldr	r3, [pc, #192]	@ (8004b5c <__mdiff+0x120>)
 8004a9a:	e7e3      	b.n	8004a64 <__mdiff+0x28>
 8004a9c:	f100 0b14 	add.w	fp, r0, #20
 8004aa0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004aa4:	f109 0310 	add.w	r3, r9, #16
 8004aa8:	60c5      	str	r5, [r0, #12]
 8004aaa:	f04f 0c00 	mov.w	ip, #0
 8004aae:	f109 0514 	add.w	r5, r9, #20
 8004ab2:	46d9      	mov	r9, fp
 8004ab4:	6926      	ldr	r6, [r4, #16]
 8004ab6:	f104 0e14 	add.w	lr, r4, #20
 8004aba:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8004abe:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8004ac2:	9301      	str	r3, [sp, #4]
 8004ac4:	9b01      	ldr	r3, [sp, #4]
 8004ac6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8004aca:	f853 af04 	ldr.w	sl, [r3, #4]!
 8004ace:	b281      	uxth	r1, r0
 8004ad0:	9301      	str	r3, [sp, #4]
 8004ad2:	fa1f f38a 	uxth.w	r3, sl
 8004ad6:	1a5b      	subs	r3, r3, r1
 8004ad8:	0c00      	lsrs	r0, r0, #16
 8004ada:	4463      	add	r3, ip
 8004adc:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8004ae0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004aea:	4576      	cmp	r6, lr
 8004aec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004af0:	f849 3b04 	str.w	r3, [r9], #4
 8004af4:	d8e6      	bhi.n	8004ac4 <__mdiff+0x88>
 8004af6:	1b33      	subs	r3, r6, r4
 8004af8:	3b15      	subs	r3, #21
 8004afa:	f023 0303 	bic.w	r3, r3, #3
 8004afe:	3415      	adds	r4, #21
 8004b00:	3304      	adds	r3, #4
 8004b02:	42a6      	cmp	r6, r4
 8004b04:	bf38      	it	cc
 8004b06:	2304      	movcc	r3, #4
 8004b08:	441d      	add	r5, r3
 8004b0a:	445b      	add	r3, fp
 8004b0c:	461e      	mov	r6, r3
 8004b0e:	462c      	mov	r4, r5
 8004b10:	4544      	cmp	r4, r8
 8004b12:	d30e      	bcc.n	8004b32 <__mdiff+0xf6>
 8004b14:	f108 0103 	add.w	r1, r8, #3
 8004b18:	1b49      	subs	r1, r1, r5
 8004b1a:	f021 0103 	bic.w	r1, r1, #3
 8004b1e:	3d03      	subs	r5, #3
 8004b20:	45a8      	cmp	r8, r5
 8004b22:	bf38      	it	cc
 8004b24:	2100      	movcc	r1, #0
 8004b26:	440b      	add	r3, r1
 8004b28:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004b2c:	b199      	cbz	r1, 8004b56 <__mdiff+0x11a>
 8004b2e:	6117      	str	r7, [r2, #16]
 8004b30:	e79e      	b.n	8004a70 <__mdiff+0x34>
 8004b32:	46e6      	mov	lr, ip
 8004b34:	f854 1b04 	ldr.w	r1, [r4], #4
 8004b38:	fa1f fc81 	uxth.w	ip, r1
 8004b3c:	44f4      	add	ip, lr
 8004b3e:	0c08      	lsrs	r0, r1, #16
 8004b40:	4471      	add	r1, lr
 8004b42:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8004b46:	b289      	uxth	r1, r1
 8004b48:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004b4c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004b50:	f846 1b04 	str.w	r1, [r6], #4
 8004b54:	e7dc      	b.n	8004b10 <__mdiff+0xd4>
 8004b56:	3f01      	subs	r7, #1
 8004b58:	e7e6      	b.n	8004b28 <__mdiff+0xec>
 8004b5a:	bf00      	nop
 8004b5c:	08005818 	.word	0x08005818
 8004b60:	08005829 	.word	0x08005829

08004b64 <__d2b>:
 8004b64:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8004b68:	2101      	movs	r1, #1
 8004b6a:	4690      	mov	r8, r2
 8004b6c:	4699      	mov	r9, r3
 8004b6e:	9e08      	ldr	r6, [sp, #32]
 8004b70:	f7ff fcd0 	bl	8004514 <_Balloc>
 8004b74:	4604      	mov	r4, r0
 8004b76:	b930      	cbnz	r0, 8004b86 <__d2b+0x22>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	f240 310f 	movw	r1, #783	@ 0x30f
 8004b7e:	4b23      	ldr	r3, [pc, #140]	@ (8004c0c <__d2b+0xa8>)
 8004b80:	4823      	ldr	r0, [pc, #140]	@ (8004c10 <__d2b+0xac>)
 8004b82:	f000 fa7f 	bl	8005084 <__assert_func>
 8004b86:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004b8a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004b8e:	b10d      	cbz	r5, 8004b94 <__d2b+0x30>
 8004b90:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b94:	9301      	str	r3, [sp, #4]
 8004b96:	f1b8 0300 	subs.w	r3, r8, #0
 8004b9a:	d024      	beq.n	8004be6 <__d2b+0x82>
 8004b9c:	4668      	mov	r0, sp
 8004b9e:	9300      	str	r3, [sp, #0]
 8004ba0:	f7ff fd7f 	bl	80046a2 <__lo0bits>
 8004ba4:	e9dd 1200 	ldrd	r1, r2, [sp]
 8004ba8:	b1d8      	cbz	r0, 8004be2 <__d2b+0x7e>
 8004baa:	f1c0 0320 	rsb	r3, r0, #32
 8004bae:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb2:	430b      	orrs	r3, r1
 8004bb4:	40c2      	lsrs	r2, r0
 8004bb6:	6163      	str	r3, [r4, #20]
 8004bb8:	9201      	str	r2, [sp, #4]
 8004bba:	9b01      	ldr	r3, [sp, #4]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	bf0c      	ite	eq
 8004bc0:	2201      	moveq	r2, #1
 8004bc2:	2202      	movne	r2, #2
 8004bc4:	61a3      	str	r3, [r4, #24]
 8004bc6:	6122      	str	r2, [r4, #16]
 8004bc8:	b1ad      	cbz	r5, 8004bf6 <__d2b+0x92>
 8004bca:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8004bce:	4405      	add	r5, r0
 8004bd0:	6035      	str	r5, [r6, #0]
 8004bd2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8004bd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004bd8:	6018      	str	r0, [r3, #0]
 8004bda:	4620      	mov	r0, r4
 8004bdc:	b002      	add	sp, #8
 8004bde:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8004be2:	6161      	str	r1, [r4, #20]
 8004be4:	e7e9      	b.n	8004bba <__d2b+0x56>
 8004be6:	a801      	add	r0, sp, #4
 8004be8:	f7ff fd5b 	bl	80046a2 <__lo0bits>
 8004bec:	9b01      	ldr	r3, [sp, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	6163      	str	r3, [r4, #20]
 8004bf2:	3020      	adds	r0, #32
 8004bf4:	e7e7      	b.n	8004bc6 <__d2b+0x62>
 8004bf6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8004bfa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004bfe:	6030      	str	r0, [r6, #0]
 8004c00:	6918      	ldr	r0, [r3, #16]
 8004c02:	f7ff fd2f 	bl	8004664 <__hi0bits>
 8004c06:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004c0a:	e7e4      	b.n	8004bd6 <__d2b+0x72>
 8004c0c:	08005818 	.word	0x08005818
 8004c10:	08005829 	.word	0x08005829

08004c14 <__ssputs_r>:
 8004c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c18:	461f      	mov	r7, r3
 8004c1a:	688e      	ldr	r6, [r1, #8]
 8004c1c:	4682      	mov	sl, r0
 8004c1e:	42be      	cmp	r6, r7
 8004c20:	460c      	mov	r4, r1
 8004c22:	4690      	mov	r8, r2
 8004c24:	680b      	ldr	r3, [r1, #0]
 8004c26:	d82d      	bhi.n	8004c84 <__ssputs_r+0x70>
 8004c28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004c2c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004c30:	d026      	beq.n	8004c80 <__ssputs_r+0x6c>
 8004c32:	6965      	ldr	r5, [r4, #20]
 8004c34:	6909      	ldr	r1, [r1, #16]
 8004c36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c3a:	eba3 0901 	sub.w	r9, r3, r1
 8004c3e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c42:	1c7b      	adds	r3, r7, #1
 8004c44:	444b      	add	r3, r9
 8004c46:	106d      	asrs	r5, r5, #1
 8004c48:	429d      	cmp	r5, r3
 8004c4a:	bf38      	it	cc
 8004c4c:	461d      	movcc	r5, r3
 8004c4e:	0553      	lsls	r3, r2, #21
 8004c50:	d527      	bpl.n	8004ca2 <__ssputs_r+0x8e>
 8004c52:	4629      	mov	r1, r5
 8004c54:	f7ff fbd2 	bl	80043fc <_malloc_r>
 8004c58:	4606      	mov	r6, r0
 8004c5a:	b360      	cbz	r0, 8004cb6 <__ssputs_r+0xa2>
 8004c5c:	464a      	mov	r2, r9
 8004c5e:	6921      	ldr	r1, [r4, #16]
 8004c60:	f000 fa02 	bl	8005068 <memcpy>
 8004c64:	89a3      	ldrh	r3, [r4, #12]
 8004c66:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004c6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c6e:	81a3      	strh	r3, [r4, #12]
 8004c70:	6126      	str	r6, [r4, #16]
 8004c72:	444e      	add	r6, r9
 8004c74:	6026      	str	r6, [r4, #0]
 8004c76:	463e      	mov	r6, r7
 8004c78:	6165      	str	r5, [r4, #20]
 8004c7a:	eba5 0509 	sub.w	r5, r5, r9
 8004c7e:	60a5      	str	r5, [r4, #8]
 8004c80:	42be      	cmp	r6, r7
 8004c82:	d900      	bls.n	8004c86 <__ssputs_r+0x72>
 8004c84:	463e      	mov	r6, r7
 8004c86:	4632      	mov	r2, r6
 8004c88:	4641      	mov	r1, r8
 8004c8a:	6820      	ldr	r0, [r4, #0]
 8004c8c:	f000 f9c2 	bl	8005014 <memmove>
 8004c90:	2000      	movs	r0, #0
 8004c92:	68a3      	ldr	r3, [r4, #8]
 8004c94:	1b9b      	subs	r3, r3, r6
 8004c96:	60a3      	str	r3, [r4, #8]
 8004c98:	6823      	ldr	r3, [r4, #0]
 8004c9a:	4433      	add	r3, r6
 8004c9c:	6023      	str	r3, [r4, #0]
 8004c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ca2:	462a      	mov	r2, r5
 8004ca4:	f000 fa32 	bl	800510c <_realloc_r>
 8004ca8:	4606      	mov	r6, r0
 8004caa:	2800      	cmp	r0, #0
 8004cac:	d1e0      	bne.n	8004c70 <__ssputs_r+0x5c>
 8004cae:	4650      	mov	r0, sl
 8004cb0:	6921      	ldr	r1, [r4, #16]
 8004cb2:	f7ff fb31 	bl	8004318 <_free_r>
 8004cb6:	230c      	movs	r3, #12
 8004cb8:	f8ca 3000 	str.w	r3, [sl]
 8004cbc:	89a3      	ldrh	r3, [r4, #12]
 8004cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8004cc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cc6:	81a3      	strh	r3, [r4, #12]
 8004cc8:	e7e9      	b.n	8004c9e <__ssputs_r+0x8a>
	...

08004ccc <_svfiprintf_r>:
 8004ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cd0:	4698      	mov	r8, r3
 8004cd2:	898b      	ldrh	r3, [r1, #12]
 8004cd4:	4607      	mov	r7, r0
 8004cd6:	061b      	lsls	r3, r3, #24
 8004cd8:	460d      	mov	r5, r1
 8004cda:	4614      	mov	r4, r2
 8004cdc:	b09d      	sub	sp, #116	@ 0x74
 8004cde:	d510      	bpl.n	8004d02 <_svfiprintf_r+0x36>
 8004ce0:	690b      	ldr	r3, [r1, #16]
 8004ce2:	b973      	cbnz	r3, 8004d02 <_svfiprintf_r+0x36>
 8004ce4:	2140      	movs	r1, #64	@ 0x40
 8004ce6:	f7ff fb89 	bl	80043fc <_malloc_r>
 8004cea:	6028      	str	r0, [r5, #0]
 8004cec:	6128      	str	r0, [r5, #16]
 8004cee:	b930      	cbnz	r0, 8004cfe <_svfiprintf_r+0x32>
 8004cf0:	230c      	movs	r3, #12
 8004cf2:	603b      	str	r3, [r7, #0]
 8004cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cf8:	b01d      	add	sp, #116	@ 0x74
 8004cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cfe:	2340      	movs	r3, #64	@ 0x40
 8004d00:	616b      	str	r3, [r5, #20]
 8004d02:	2300      	movs	r3, #0
 8004d04:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d06:	2320      	movs	r3, #32
 8004d08:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004d0c:	2330      	movs	r3, #48	@ 0x30
 8004d0e:	f04f 0901 	mov.w	r9, #1
 8004d12:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d16:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004eb0 <_svfiprintf_r+0x1e4>
 8004d1a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004d1e:	4623      	mov	r3, r4
 8004d20:	469a      	mov	sl, r3
 8004d22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d26:	b10a      	cbz	r2, 8004d2c <_svfiprintf_r+0x60>
 8004d28:	2a25      	cmp	r2, #37	@ 0x25
 8004d2a:	d1f9      	bne.n	8004d20 <_svfiprintf_r+0x54>
 8004d2c:	ebba 0b04 	subs.w	fp, sl, r4
 8004d30:	d00b      	beq.n	8004d4a <_svfiprintf_r+0x7e>
 8004d32:	465b      	mov	r3, fp
 8004d34:	4622      	mov	r2, r4
 8004d36:	4629      	mov	r1, r5
 8004d38:	4638      	mov	r0, r7
 8004d3a:	f7ff ff6b 	bl	8004c14 <__ssputs_r>
 8004d3e:	3001      	adds	r0, #1
 8004d40:	f000 80a7 	beq.w	8004e92 <_svfiprintf_r+0x1c6>
 8004d44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d46:	445a      	add	r2, fp
 8004d48:	9209      	str	r2, [sp, #36]	@ 0x24
 8004d4a:	f89a 3000 	ldrb.w	r3, [sl]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	f000 809f 	beq.w	8004e92 <_svfiprintf_r+0x1c6>
 8004d54:	2300      	movs	r3, #0
 8004d56:	f04f 32ff 	mov.w	r2, #4294967295
 8004d5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d5e:	f10a 0a01 	add.w	sl, sl, #1
 8004d62:	9304      	str	r3, [sp, #16]
 8004d64:	9307      	str	r3, [sp, #28]
 8004d66:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004d6a:	931a      	str	r3, [sp, #104]	@ 0x68
 8004d6c:	4654      	mov	r4, sl
 8004d6e:	2205      	movs	r2, #5
 8004d70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d74:	484e      	ldr	r0, [pc, #312]	@ (8004eb0 <_svfiprintf_r+0x1e4>)
 8004d76:	f7fe fc70 	bl	800365a <memchr>
 8004d7a:	9a04      	ldr	r2, [sp, #16]
 8004d7c:	b9d8      	cbnz	r0, 8004db6 <_svfiprintf_r+0xea>
 8004d7e:	06d0      	lsls	r0, r2, #27
 8004d80:	bf44      	itt	mi
 8004d82:	2320      	movmi	r3, #32
 8004d84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d88:	0711      	lsls	r1, r2, #28
 8004d8a:	bf44      	itt	mi
 8004d8c:	232b      	movmi	r3, #43	@ 0x2b
 8004d8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d92:	f89a 3000 	ldrb.w	r3, [sl]
 8004d96:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d98:	d015      	beq.n	8004dc6 <_svfiprintf_r+0xfa>
 8004d9a:	4654      	mov	r4, sl
 8004d9c:	2000      	movs	r0, #0
 8004d9e:	f04f 0c0a 	mov.w	ip, #10
 8004da2:	9a07      	ldr	r2, [sp, #28]
 8004da4:	4621      	mov	r1, r4
 8004da6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004daa:	3b30      	subs	r3, #48	@ 0x30
 8004dac:	2b09      	cmp	r3, #9
 8004dae:	d94b      	bls.n	8004e48 <_svfiprintf_r+0x17c>
 8004db0:	b1b0      	cbz	r0, 8004de0 <_svfiprintf_r+0x114>
 8004db2:	9207      	str	r2, [sp, #28]
 8004db4:	e014      	b.n	8004de0 <_svfiprintf_r+0x114>
 8004db6:	eba0 0308 	sub.w	r3, r0, r8
 8004dba:	fa09 f303 	lsl.w	r3, r9, r3
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	46a2      	mov	sl, r4
 8004dc2:	9304      	str	r3, [sp, #16]
 8004dc4:	e7d2      	b.n	8004d6c <_svfiprintf_r+0xa0>
 8004dc6:	9b03      	ldr	r3, [sp, #12]
 8004dc8:	1d19      	adds	r1, r3, #4
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	9103      	str	r1, [sp, #12]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	bfbb      	ittet	lt
 8004dd2:	425b      	neglt	r3, r3
 8004dd4:	f042 0202 	orrlt.w	r2, r2, #2
 8004dd8:	9307      	strge	r3, [sp, #28]
 8004dda:	9307      	strlt	r3, [sp, #28]
 8004ddc:	bfb8      	it	lt
 8004dde:	9204      	strlt	r2, [sp, #16]
 8004de0:	7823      	ldrb	r3, [r4, #0]
 8004de2:	2b2e      	cmp	r3, #46	@ 0x2e
 8004de4:	d10a      	bne.n	8004dfc <_svfiprintf_r+0x130>
 8004de6:	7863      	ldrb	r3, [r4, #1]
 8004de8:	2b2a      	cmp	r3, #42	@ 0x2a
 8004dea:	d132      	bne.n	8004e52 <_svfiprintf_r+0x186>
 8004dec:	9b03      	ldr	r3, [sp, #12]
 8004dee:	3402      	adds	r4, #2
 8004df0:	1d1a      	adds	r2, r3, #4
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	9203      	str	r2, [sp, #12]
 8004df6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004dfa:	9305      	str	r3, [sp, #20]
 8004dfc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004eb4 <_svfiprintf_r+0x1e8>
 8004e00:	2203      	movs	r2, #3
 8004e02:	4650      	mov	r0, sl
 8004e04:	7821      	ldrb	r1, [r4, #0]
 8004e06:	f7fe fc28 	bl	800365a <memchr>
 8004e0a:	b138      	cbz	r0, 8004e1c <_svfiprintf_r+0x150>
 8004e0c:	2240      	movs	r2, #64	@ 0x40
 8004e0e:	9b04      	ldr	r3, [sp, #16]
 8004e10:	eba0 000a 	sub.w	r0, r0, sl
 8004e14:	4082      	lsls	r2, r0
 8004e16:	4313      	orrs	r3, r2
 8004e18:	3401      	adds	r4, #1
 8004e1a:	9304      	str	r3, [sp, #16]
 8004e1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e20:	2206      	movs	r2, #6
 8004e22:	4825      	ldr	r0, [pc, #148]	@ (8004eb8 <_svfiprintf_r+0x1ec>)
 8004e24:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004e28:	f7fe fc17 	bl	800365a <memchr>
 8004e2c:	2800      	cmp	r0, #0
 8004e2e:	d036      	beq.n	8004e9e <_svfiprintf_r+0x1d2>
 8004e30:	4b22      	ldr	r3, [pc, #136]	@ (8004ebc <_svfiprintf_r+0x1f0>)
 8004e32:	bb1b      	cbnz	r3, 8004e7c <_svfiprintf_r+0x1b0>
 8004e34:	9b03      	ldr	r3, [sp, #12]
 8004e36:	3307      	adds	r3, #7
 8004e38:	f023 0307 	bic.w	r3, r3, #7
 8004e3c:	3308      	adds	r3, #8
 8004e3e:	9303      	str	r3, [sp, #12]
 8004e40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e42:	4433      	add	r3, r6
 8004e44:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e46:	e76a      	b.n	8004d1e <_svfiprintf_r+0x52>
 8004e48:	460c      	mov	r4, r1
 8004e4a:	2001      	movs	r0, #1
 8004e4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e50:	e7a8      	b.n	8004da4 <_svfiprintf_r+0xd8>
 8004e52:	2300      	movs	r3, #0
 8004e54:	f04f 0c0a 	mov.w	ip, #10
 8004e58:	4619      	mov	r1, r3
 8004e5a:	3401      	adds	r4, #1
 8004e5c:	9305      	str	r3, [sp, #20]
 8004e5e:	4620      	mov	r0, r4
 8004e60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e64:	3a30      	subs	r2, #48	@ 0x30
 8004e66:	2a09      	cmp	r2, #9
 8004e68:	d903      	bls.n	8004e72 <_svfiprintf_r+0x1a6>
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d0c6      	beq.n	8004dfc <_svfiprintf_r+0x130>
 8004e6e:	9105      	str	r1, [sp, #20]
 8004e70:	e7c4      	b.n	8004dfc <_svfiprintf_r+0x130>
 8004e72:	4604      	mov	r4, r0
 8004e74:	2301      	movs	r3, #1
 8004e76:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e7a:	e7f0      	b.n	8004e5e <_svfiprintf_r+0x192>
 8004e7c:	ab03      	add	r3, sp, #12
 8004e7e:	9300      	str	r3, [sp, #0]
 8004e80:	462a      	mov	r2, r5
 8004e82:	4638      	mov	r0, r7
 8004e84:	4b0e      	ldr	r3, [pc, #56]	@ (8004ec0 <_svfiprintf_r+0x1f4>)
 8004e86:	a904      	add	r1, sp, #16
 8004e88:	f7fd fe84 	bl	8002b94 <_printf_float>
 8004e8c:	1c42      	adds	r2, r0, #1
 8004e8e:	4606      	mov	r6, r0
 8004e90:	d1d6      	bne.n	8004e40 <_svfiprintf_r+0x174>
 8004e92:	89ab      	ldrh	r3, [r5, #12]
 8004e94:	065b      	lsls	r3, r3, #25
 8004e96:	f53f af2d 	bmi.w	8004cf4 <_svfiprintf_r+0x28>
 8004e9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004e9c:	e72c      	b.n	8004cf8 <_svfiprintf_r+0x2c>
 8004e9e:	ab03      	add	r3, sp, #12
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	462a      	mov	r2, r5
 8004ea4:	4638      	mov	r0, r7
 8004ea6:	4b06      	ldr	r3, [pc, #24]	@ (8004ec0 <_svfiprintf_r+0x1f4>)
 8004ea8:	a904      	add	r1, sp, #16
 8004eaa:	f7fe f911 	bl	80030d0 <_printf_i>
 8004eae:	e7ed      	b.n	8004e8c <_svfiprintf_r+0x1c0>
 8004eb0:	08005980 	.word	0x08005980
 8004eb4:	08005986 	.word	0x08005986
 8004eb8:	0800598a 	.word	0x0800598a
 8004ebc:	08002b95 	.word	0x08002b95
 8004ec0:	08004c15 	.word	0x08004c15

08004ec4 <__sflush_r>:
 8004ec4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eca:	0716      	lsls	r6, r2, #28
 8004ecc:	4605      	mov	r5, r0
 8004ece:	460c      	mov	r4, r1
 8004ed0:	d454      	bmi.n	8004f7c <__sflush_r+0xb8>
 8004ed2:	684b      	ldr	r3, [r1, #4]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	dc02      	bgt.n	8004ede <__sflush_r+0x1a>
 8004ed8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	dd48      	ble.n	8004f70 <__sflush_r+0xac>
 8004ede:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004ee0:	2e00      	cmp	r6, #0
 8004ee2:	d045      	beq.n	8004f70 <__sflush_r+0xac>
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004eea:	682f      	ldr	r7, [r5, #0]
 8004eec:	6a21      	ldr	r1, [r4, #32]
 8004eee:	602b      	str	r3, [r5, #0]
 8004ef0:	d030      	beq.n	8004f54 <__sflush_r+0x90>
 8004ef2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004ef4:	89a3      	ldrh	r3, [r4, #12]
 8004ef6:	0759      	lsls	r1, r3, #29
 8004ef8:	d505      	bpl.n	8004f06 <__sflush_r+0x42>
 8004efa:	6863      	ldr	r3, [r4, #4]
 8004efc:	1ad2      	subs	r2, r2, r3
 8004efe:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004f00:	b10b      	cbz	r3, 8004f06 <__sflush_r+0x42>
 8004f02:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004f04:	1ad2      	subs	r2, r2, r3
 8004f06:	2300      	movs	r3, #0
 8004f08:	4628      	mov	r0, r5
 8004f0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004f0c:	6a21      	ldr	r1, [r4, #32]
 8004f0e:	47b0      	blx	r6
 8004f10:	1c43      	adds	r3, r0, #1
 8004f12:	89a3      	ldrh	r3, [r4, #12]
 8004f14:	d106      	bne.n	8004f24 <__sflush_r+0x60>
 8004f16:	6829      	ldr	r1, [r5, #0]
 8004f18:	291d      	cmp	r1, #29
 8004f1a:	d82b      	bhi.n	8004f74 <__sflush_r+0xb0>
 8004f1c:	4a28      	ldr	r2, [pc, #160]	@ (8004fc0 <__sflush_r+0xfc>)
 8004f1e:	410a      	asrs	r2, r1
 8004f20:	07d6      	lsls	r6, r2, #31
 8004f22:	d427      	bmi.n	8004f74 <__sflush_r+0xb0>
 8004f24:	2200      	movs	r2, #0
 8004f26:	6062      	str	r2, [r4, #4]
 8004f28:	6922      	ldr	r2, [r4, #16]
 8004f2a:	04d9      	lsls	r1, r3, #19
 8004f2c:	6022      	str	r2, [r4, #0]
 8004f2e:	d504      	bpl.n	8004f3a <__sflush_r+0x76>
 8004f30:	1c42      	adds	r2, r0, #1
 8004f32:	d101      	bne.n	8004f38 <__sflush_r+0x74>
 8004f34:	682b      	ldr	r3, [r5, #0]
 8004f36:	b903      	cbnz	r3, 8004f3a <__sflush_r+0x76>
 8004f38:	6560      	str	r0, [r4, #84]	@ 0x54
 8004f3a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004f3c:	602f      	str	r7, [r5, #0]
 8004f3e:	b1b9      	cbz	r1, 8004f70 <__sflush_r+0xac>
 8004f40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004f44:	4299      	cmp	r1, r3
 8004f46:	d002      	beq.n	8004f4e <__sflush_r+0x8a>
 8004f48:	4628      	mov	r0, r5
 8004f4a:	f7ff f9e5 	bl	8004318 <_free_r>
 8004f4e:	2300      	movs	r3, #0
 8004f50:	6363      	str	r3, [r4, #52]	@ 0x34
 8004f52:	e00d      	b.n	8004f70 <__sflush_r+0xac>
 8004f54:	2301      	movs	r3, #1
 8004f56:	4628      	mov	r0, r5
 8004f58:	47b0      	blx	r6
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	1c50      	adds	r0, r2, #1
 8004f5e:	d1c9      	bne.n	8004ef4 <__sflush_r+0x30>
 8004f60:	682b      	ldr	r3, [r5, #0]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d0c6      	beq.n	8004ef4 <__sflush_r+0x30>
 8004f66:	2b1d      	cmp	r3, #29
 8004f68:	d001      	beq.n	8004f6e <__sflush_r+0xaa>
 8004f6a:	2b16      	cmp	r3, #22
 8004f6c:	d11d      	bne.n	8004faa <__sflush_r+0xe6>
 8004f6e:	602f      	str	r7, [r5, #0]
 8004f70:	2000      	movs	r0, #0
 8004f72:	e021      	b.n	8004fb8 <__sflush_r+0xf4>
 8004f74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f78:	b21b      	sxth	r3, r3
 8004f7a:	e01a      	b.n	8004fb2 <__sflush_r+0xee>
 8004f7c:	690f      	ldr	r7, [r1, #16]
 8004f7e:	2f00      	cmp	r7, #0
 8004f80:	d0f6      	beq.n	8004f70 <__sflush_r+0xac>
 8004f82:	0793      	lsls	r3, r2, #30
 8004f84:	bf18      	it	ne
 8004f86:	2300      	movne	r3, #0
 8004f88:	680e      	ldr	r6, [r1, #0]
 8004f8a:	bf08      	it	eq
 8004f8c:	694b      	ldreq	r3, [r1, #20]
 8004f8e:	1bf6      	subs	r6, r6, r7
 8004f90:	600f      	str	r7, [r1, #0]
 8004f92:	608b      	str	r3, [r1, #8]
 8004f94:	2e00      	cmp	r6, #0
 8004f96:	ddeb      	ble.n	8004f70 <__sflush_r+0xac>
 8004f98:	4633      	mov	r3, r6
 8004f9a:	463a      	mov	r2, r7
 8004f9c:	4628      	mov	r0, r5
 8004f9e:	6a21      	ldr	r1, [r4, #32]
 8004fa0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004fa4:	47e0      	blx	ip
 8004fa6:	2800      	cmp	r0, #0
 8004fa8:	dc07      	bgt.n	8004fba <__sflush_r+0xf6>
 8004faa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8004fb6:	81a3      	strh	r3, [r4, #12]
 8004fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fba:	4407      	add	r7, r0
 8004fbc:	1a36      	subs	r6, r6, r0
 8004fbe:	e7e9      	b.n	8004f94 <__sflush_r+0xd0>
 8004fc0:	dfbffffe 	.word	0xdfbffffe

08004fc4 <_fflush_r>:
 8004fc4:	b538      	push	{r3, r4, r5, lr}
 8004fc6:	690b      	ldr	r3, [r1, #16]
 8004fc8:	4605      	mov	r5, r0
 8004fca:	460c      	mov	r4, r1
 8004fcc:	b913      	cbnz	r3, 8004fd4 <_fflush_r+0x10>
 8004fce:	2500      	movs	r5, #0
 8004fd0:	4628      	mov	r0, r5
 8004fd2:	bd38      	pop	{r3, r4, r5, pc}
 8004fd4:	b118      	cbz	r0, 8004fde <_fflush_r+0x1a>
 8004fd6:	6a03      	ldr	r3, [r0, #32]
 8004fd8:	b90b      	cbnz	r3, 8004fde <_fflush_r+0x1a>
 8004fda:	f7fe fa25 	bl	8003428 <__sinit>
 8004fde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d0f3      	beq.n	8004fce <_fflush_r+0xa>
 8004fe6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004fe8:	07d0      	lsls	r0, r2, #31
 8004fea:	d404      	bmi.n	8004ff6 <_fflush_r+0x32>
 8004fec:	0599      	lsls	r1, r3, #22
 8004fee:	d402      	bmi.n	8004ff6 <_fflush_r+0x32>
 8004ff0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ff2:	f7fe fb30 	bl	8003656 <__retarget_lock_acquire_recursive>
 8004ff6:	4628      	mov	r0, r5
 8004ff8:	4621      	mov	r1, r4
 8004ffa:	f7ff ff63 	bl	8004ec4 <__sflush_r>
 8004ffe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005000:	4605      	mov	r5, r0
 8005002:	07da      	lsls	r2, r3, #31
 8005004:	d4e4      	bmi.n	8004fd0 <_fflush_r+0xc>
 8005006:	89a3      	ldrh	r3, [r4, #12]
 8005008:	059b      	lsls	r3, r3, #22
 800500a:	d4e1      	bmi.n	8004fd0 <_fflush_r+0xc>
 800500c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800500e:	f7fe fb23 	bl	8003658 <__retarget_lock_release_recursive>
 8005012:	e7dd      	b.n	8004fd0 <_fflush_r+0xc>

08005014 <memmove>:
 8005014:	4288      	cmp	r0, r1
 8005016:	b510      	push	{r4, lr}
 8005018:	eb01 0402 	add.w	r4, r1, r2
 800501c:	d902      	bls.n	8005024 <memmove+0x10>
 800501e:	4284      	cmp	r4, r0
 8005020:	4623      	mov	r3, r4
 8005022:	d807      	bhi.n	8005034 <memmove+0x20>
 8005024:	1e43      	subs	r3, r0, #1
 8005026:	42a1      	cmp	r1, r4
 8005028:	d008      	beq.n	800503c <memmove+0x28>
 800502a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800502e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005032:	e7f8      	b.n	8005026 <memmove+0x12>
 8005034:	4601      	mov	r1, r0
 8005036:	4402      	add	r2, r0
 8005038:	428a      	cmp	r2, r1
 800503a:	d100      	bne.n	800503e <memmove+0x2a>
 800503c:	bd10      	pop	{r4, pc}
 800503e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005042:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005046:	e7f7      	b.n	8005038 <memmove+0x24>

08005048 <_sbrk_r>:
 8005048:	b538      	push	{r3, r4, r5, lr}
 800504a:	2300      	movs	r3, #0
 800504c:	4d05      	ldr	r5, [pc, #20]	@ (8005064 <_sbrk_r+0x1c>)
 800504e:	4604      	mov	r4, r0
 8005050:	4608      	mov	r0, r1
 8005052:	602b      	str	r3, [r5, #0]
 8005054:	f7fc f80a 	bl	800106c <_sbrk>
 8005058:	1c43      	adds	r3, r0, #1
 800505a:	d102      	bne.n	8005062 <_sbrk_r+0x1a>
 800505c:	682b      	ldr	r3, [r5, #0]
 800505e:	b103      	cbz	r3, 8005062 <_sbrk_r+0x1a>
 8005060:	6023      	str	r3, [r4, #0]
 8005062:	bd38      	pop	{r3, r4, r5, pc}
 8005064:	200003d0 	.word	0x200003d0

08005068 <memcpy>:
 8005068:	440a      	add	r2, r1
 800506a:	4291      	cmp	r1, r2
 800506c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005070:	d100      	bne.n	8005074 <memcpy+0xc>
 8005072:	4770      	bx	lr
 8005074:	b510      	push	{r4, lr}
 8005076:	f811 4b01 	ldrb.w	r4, [r1], #1
 800507a:	4291      	cmp	r1, r2
 800507c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005080:	d1f9      	bne.n	8005076 <memcpy+0xe>
 8005082:	bd10      	pop	{r4, pc}

08005084 <__assert_func>:
 8005084:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005086:	4614      	mov	r4, r2
 8005088:	461a      	mov	r2, r3
 800508a:	4b09      	ldr	r3, [pc, #36]	@ (80050b0 <__assert_func+0x2c>)
 800508c:	4605      	mov	r5, r0
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68d8      	ldr	r0, [r3, #12]
 8005092:	b954      	cbnz	r4, 80050aa <__assert_func+0x26>
 8005094:	4b07      	ldr	r3, [pc, #28]	@ (80050b4 <__assert_func+0x30>)
 8005096:	461c      	mov	r4, r3
 8005098:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800509c:	9100      	str	r1, [sp, #0]
 800509e:	462b      	mov	r3, r5
 80050a0:	4905      	ldr	r1, [pc, #20]	@ (80050b8 <__assert_func+0x34>)
 80050a2:	f000 f86f 	bl	8005184 <fiprintf>
 80050a6:	f000 f87f 	bl	80051a8 <abort>
 80050aa:	4b04      	ldr	r3, [pc, #16]	@ (80050bc <__assert_func+0x38>)
 80050ac:	e7f4      	b.n	8005098 <__assert_func+0x14>
 80050ae:	bf00      	nop
 80050b0:	20000018 	.word	0x20000018
 80050b4:	080059d6 	.word	0x080059d6
 80050b8:	080059a8 	.word	0x080059a8
 80050bc:	0800599b 	.word	0x0800599b

080050c0 <_calloc_r>:
 80050c0:	b570      	push	{r4, r5, r6, lr}
 80050c2:	fba1 5402 	umull	r5, r4, r1, r2
 80050c6:	b93c      	cbnz	r4, 80050d8 <_calloc_r+0x18>
 80050c8:	4629      	mov	r1, r5
 80050ca:	f7ff f997 	bl	80043fc <_malloc_r>
 80050ce:	4606      	mov	r6, r0
 80050d0:	b928      	cbnz	r0, 80050de <_calloc_r+0x1e>
 80050d2:	2600      	movs	r6, #0
 80050d4:	4630      	mov	r0, r6
 80050d6:	bd70      	pop	{r4, r5, r6, pc}
 80050d8:	220c      	movs	r2, #12
 80050da:	6002      	str	r2, [r0, #0]
 80050dc:	e7f9      	b.n	80050d2 <_calloc_r+0x12>
 80050de:	462a      	mov	r2, r5
 80050e0:	4621      	mov	r1, r4
 80050e2:	f7fe fa3a 	bl	800355a <memset>
 80050e6:	e7f5      	b.n	80050d4 <_calloc_r+0x14>

080050e8 <__ascii_mbtowc>:
 80050e8:	b082      	sub	sp, #8
 80050ea:	b901      	cbnz	r1, 80050ee <__ascii_mbtowc+0x6>
 80050ec:	a901      	add	r1, sp, #4
 80050ee:	b142      	cbz	r2, 8005102 <__ascii_mbtowc+0x1a>
 80050f0:	b14b      	cbz	r3, 8005106 <__ascii_mbtowc+0x1e>
 80050f2:	7813      	ldrb	r3, [r2, #0]
 80050f4:	600b      	str	r3, [r1, #0]
 80050f6:	7812      	ldrb	r2, [r2, #0]
 80050f8:	1e10      	subs	r0, r2, #0
 80050fa:	bf18      	it	ne
 80050fc:	2001      	movne	r0, #1
 80050fe:	b002      	add	sp, #8
 8005100:	4770      	bx	lr
 8005102:	4610      	mov	r0, r2
 8005104:	e7fb      	b.n	80050fe <__ascii_mbtowc+0x16>
 8005106:	f06f 0001 	mvn.w	r0, #1
 800510a:	e7f8      	b.n	80050fe <__ascii_mbtowc+0x16>

0800510c <_realloc_r>:
 800510c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005110:	4680      	mov	r8, r0
 8005112:	4615      	mov	r5, r2
 8005114:	460c      	mov	r4, r1
 8005116:	b921      	cbnz	r1, 8005122 <_realloc_r+0x16>
 8005118:	4611      	mov	r1, r2
 800511a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800511e:	f7ff b96d 	b.w	80043fc <_malloc_r>
 8005122:	b92a      	cbnz	r2, 8005130 <_realloc_r+0x24>
 8005124:	f7ff f8f8 	bl	8004318 <_free_r>
 8005128:	2400      	movs	r4, #0
 800512a:	4620      	mov	r0, r4
 800512c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005130:	f000 f841 	bl	80051b6 <_malloc_usable_size_r>
 8005134:	4285      	cmp	r5, r0
 8005136:	4606      	mov	r6, r0
 8005138:	d802      	bhi.n	8005140 <_realloc_r+0x34>
 800513a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800513e:	d8f4      	bhi.n	800512a <_realloc_r+0x1e>
 8005140:	4629      	mov	r1, r5
 8005142:	4640      	mov	r0, r8
 8005144:	f7ff f95a 	bl	80043fc <_malloc_r>
 8005148:	4607      	mov	r7, r0
 800514a:	2800      	cmp	r0, #0
 800514c:	d0ec      	beq.n	8005128 <_realloc_r+0x1c>
 800514e:	42b5      	cmp	r5, r6
 8005150:	462a      	mov	r2, r5
 8005152:	4621      	mov	r1, r4
 8005154:	bf28      	it	cs
 8005156:	4632      	movcs	r2, r6
 8005158:	f7ff ff86 	bl	8005068 <memcpy>
 800515c:	4621      	mov	r1, r4
 800515e:	4640      	mov	r0, r8
 8005160:	f7ff f8da 	bl	8004318 <_free_r>
 8005164:	463c      	mov	r4, r7
 8005166:	e7e0      	b.n	800512a <_realloc_r+0x1e>

08005168 <__ascii_wctomb>:
 8005168:	4603      	mov	r3, r0
 800516a:	4608      	mov	r0, r1
 800516c:	b141      	cbz	r1, 8005180 <__ascii_wctomb+0x18>
 800516e:	2aff      	cmp	r2, #255	@ 0xff
 8005170:	d904      	bls.n	800517c <__ascii_wctomb+0x14>
 8005172:	228a      	movs	r2, #138	@ 0x8a
 8005174:	f04f 30ff 	mov.w	r0, #4294967295
 8005178:	601a      	str	r2, [r3, #0]
 800517a:	4770      	bx	lr
 800517c:	2001      	movs	r0, #1
 800517e:	700a      	strb	r2, [r1, #0]
 8005180:	4770      	bx	lr
	...

08005184 <fiprintf>:
 8005184:	b40e      	push	{r1, r2, r3}
 8005186:	b503      	push	{r0, r1, lr}
 8005188:	4601      	mov	r1, r0
 800518a:	ab03      	add	r3, sp, #12
 800518c:	4805      	ldr	r0, [pc, #20]	@ (80051a4 <fiprintf+0x20>)
 800518e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005192:	6800      	ldr	r0, [r0, #0]
 8005194:	9301      	str	r3, [sp, #4]
 8005196:	f000 f83d 	bl	8005214 <_vfiprintf_r>
 800519a:	b002      	add	sp, #8
 800519c:	f85d eb04 	ldr.w	lr, [sp], #4
 80051a0:	b003      	add	sp, #12
 80051a2:	4770      	bx	lr
 80051a4:	20000018 	.word	0x20000018

080051a8 <abort>:
 80051a8:	2006      	movs	r0, #6
 80051aa:	b508      	push	{r3, lr}
 80051ac:	f000 fa06 	bl	80055bc <raise>
 80051b0:	2001      	movs	r0, #1
 80051b2:	f7fb fee6 	bl	8000f82 <_exit>

080051b6 <_malloc_usable_size_r>:
 80051b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051ba:	1f18      	subs	r0, r3, #4
 80051bc:	2b00      	cmp	r3, #0
 80051be:	bfbc      	itt	lt
 80051c0:	580b      	ldrlt	r3, [r1, r0]
 80051c2:	18c0      	addlt	r0, r0, r3
 80051c4:	4770      	bx	lr

080051c6 <__sfputc_r>:
 80051c6:	6893      	ldr	r3, [r2, #8]
 80051c8:	b410      	push	{r4}
 80051ca:	3b01      	subs	r3, #1
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	6093      	str	r3, [r2, #8]
 80051d0:	da07      	bge.n	80051e2 <__sfputc_r+0x1c>
 80051d2:	6994      	ldr	r4, [r2, #24]
 80051d4:	42a3      	cmp	r3, r4
 80051d6:	db01      	blt.n	80051dc <__sfputc_r+0x16>
 80051d8:	290a      	cmp	r1, #10
 80051da:	d102      	bne.n	80051e2 <__sfputc_r+0x1c>
 80051dc:	bc10      	pop	{r4}
 80051de:	f000 b931 	b.w	8005444 <__swbuf_r>
 80051e2:	6813      	ldr	r3, [r2, #0]
 80051e4:	1c58      	adds	r0, r3, #1
 80051e6:	6010      	str	r0, [r2, #0]
 80051e8:	7019      	strb	r1, [r3, #0]
 80051ea:	4608      	mov	r0, r1
 80051ec:	bc10      	pop	{r4}
 80051ee:	4770      	bx	lr

080051f0 <__sfputs_r>:
 80051f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051f2:	4606      	mov	r6, r0
 80051f4:	460f      	mov	r7, r1
 80051f6:	4614      	mov	r4, r2
 80051f8:	18d5      	adds	r5, r2, r3
 80051fa:	42ac      	cmp	r4, r5
 80051fc:	d101      	bne.n	8005202 <__sfputs_r+0x12>
 80051fe:	2000      	movs	r0, #0
 8005200:	e007      	b.n	8005212 <__sfputs_r+0x22>
 8005202:	463a      	mov	r2, r7
 8005204:	4630      	mov	r0, r6
 8005206:	f814 1b01 	ldrb.w	r1, [r4], #1
 800520a:	f7ff ffdc 	bl	80051c6 <__sfputc_r>
 800520e:	1c43      	adds	r3, r0, #1
 8005210:	d1f3      	bne.n	80051fa <__sfputs_r+0xa>
 8005212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005214 <_vfiprintf_r>:
 8005214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005218:	460d      	mov	r5, r1
 800521a:	4614      	mov	r4, r2
 800521c:	4698      	mov	r8, r3
 800521e:	4606      	mov	r6, r0
 8005220:	b09d      	sub	sp, #116	@ 0x74
 8005222:	b118      	cbz	r0, 800522c <_vfiprintf_r+0x18>
 8005224:	6a03      	ldr	r3, [r0, #32]
 8005226:	b90b      	cbnz	r3, 800522c <_vfiprintf_r+0x18>
 8005228:	f7fe f8fe 	bl	8003428 <__sinit>
 800522c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800522e:	07d9      	lsls	r1, r3, #31
 8005230:	d405      	bmi.n	800523e <_vfiprintf_r+0x2a>
 8005232:	89ab      	ldrh	r3, [r5, #12]
 8005234:	059a      	lsls	r2, r3, #22
 8005236:	d402      	bmi.n	800523e <_vfiprintf_r+0x2a>
 8005238:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800523a:	f7fe fa0c 	bl	8003656 <__retarget_lock_acquire_recursive>
 800523e:	89ab      	ldrh	r3, [r5, #12]
 8005240:	071b      	lsls	r3, r3, #28
 8005242:	d501      	bpl.n	8005248 <_vfiprintf_r+0x34>
 8005244:	692b      	ldr	r3, [r5, #16]
 8005246:	b99b      	cbnz	r3, 8005270 <_vfiprintf_r+0x5c>
 8005248:	4629      	mov	r1, r5
 800524a:	4630      	mov	r0, r6
 800524c:	f000 f938 	bl	80054c0 <__swsetup_r>
 8005250:	b170      	cbz	r0, 8005270 <_vfiprintf_r+0x5c>
 8005252:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005254:	07dc      	lsls	r4, r3, #31
 8005256:	d504      	bpl.n	8005262 <_vfiprintf_r+0x4e>
 8005258:	f04f 30ff 	mov.w	r0, #4294967295
 800525c:	b01d      	add	sp, #116	@ 0x74
 800525e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005262:	89ab      	ldrh	r3, [r5, #12]
 8005264:	0598      	lsls	r0, r3, #22
 8005266:	d4f7      	bmi.n	8005258 <_vfiprintf_r+0x44>
 8005268:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800526a:	f7fe f9f5 	bl	8003658 <__retarget_lock_release_recursive>
 800526e:	e7f3      	b.n	8005258 <_vfiprintf_r+0x44>
 8005270:	2300      	movs	r3, #0
 8005272:	9309      	str	r3, [sp, #36]	@ 0x24
 8005274:	2320      	movs	r3, #32
 8005276:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800527a:	2330      	movs	r3, #48	@ 0x30
 800527c:	f04f 0901 	mov.w	r9, #1
 8005280:	f8cd 800c 	str.w	r8, [sp, #12]
 8005284:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005430 <_vfiprintf_r+0x21c>
 8005288:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800528c:	4623      	mov	r3, r4
 800528e:	469a      	mov	sl, r3
 8005290:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005294:	b10a      	cbz	r2, 800529a <_vfiprintf_r+0x86>
 8005296:	2a25      	cmp	r2, #37	@ 0x25
 8005298:	d1f9      	bne.n	800528e <_vfiprintf_r+0x7a>
 800529a:	ebba 0b04 	subs.w	fp, sl, r4
 800529e:	d00b      	beq.n	80052b8 <_vfiprintf_r+0xa4>
 80052a0:	465b      	mov	r3, fp
 80052a2:	4622      	mov	r2, r4
 80052a4:	4629      	mov	r1, r5
 80052a6:	4630      	mov	r0, r6
 80052a8:	f7ff ffa2 	bl	80051f0 <__sfputs_r>
 80052ac:	3001      	adds	r0, #1
 80052ae:	f000 80a7 	beq.w	8005400 <_vfiprintf_r+0x1ec>
 80052b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80052b4:	445a      	add	r2, fp
 80052b6:	9209      	str	r2, [sp, #36]	@ 0x24
 80052b8:	f89a 3000 	ldrb.w	r3, [sl]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	f000 809f 	beq.w	8005400 <_vfiprintf_r+0x1ec>
 80052c2:	2300      	movs	r3, #0
 80052c4:	f04f 32ff 	mov.w	r2, #4294967295
 80052c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052cc:	f10a 0a01 	add.w	sl, sl, #1
 80052d0:	9304      	str	r3, [sp, #16]
 80052d2:	9307      	str	r3, [sp, #28]
 80052d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80052d8:	931a      	str	r3, [sp, #104]	@ 0x68
 80052da:	4654      	mov	r4, sl
 80052dc:	2205      	movs	r2, #5
 80052de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052e2:	4853      	ldr	r0, [pc, #332]	@ (8005430 <_vfiprintf_r+0x21c>)
 80052e4:	f7fe f9b9 	bl	800365a <memchr>
 80052e8:	9a04      	ldr	r2, [sp, #16]
 80052ea:	b9d8      	cbnz	r0, 8005324 <_vfiprintf_r+0x110>
 80052ec:	06d1      	lsls	r1, r2, #27
 80052ee:	bf44      	itt	mi
 80052f0:	2320      	movmi	r3, #32
 80052f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80052f6:	0713      	lsls	r3, r2, #28
 80052f8:	bf44      	itt	mi
 80052fa:	232b      	movmi	r3, #43	@ 0x2b
 80052fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005300:	f89a 3000 	ldrb.w	r3, [sl]
 8005304:	2b2a      	cmp	r3, #42	@ 0x2a
 8005306:	d015      	beq.n	8005334 <_vfiprintf_r+0x120>
 8005308:	4654      	mov	r4, sl
 800530a:	2000      	movs	r0, #0
 800530c:	f04f 0c0a 	mov.w	ip, #10
 8005310:	9a07      	ldr	r2, [sp, #28]
 8005312:	4621      	mov	r1, r4
 8005314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005318:	3b30      	subs	r3, #48	@ 0x30
 800531a:	2b09      	cmp	r3, #9
 800531c:	d94b      	bls.n	80053b6 <_vfiprintf_r+0x1a2>
 800531e:	b1b0      	cbz	r0, 800534e <_vfiprintf_r+0x13a>
 8005320:	9207      	str	r2, [sp, #28]
 8005322:	e014      	b.n	800534e <_vfiprintf_r+0x13a>
 8005324:	eba0 0308 	sub.w	r3, r0, r8
 8005328:	fa09 f303 	lsl.w	r3, r9, r3
 800532c:	4313      	orrs	r3, r2
 800532e:	46a2      	mov	sl, r4
 8005330:	9304      	str	r3, [sp, #16]
 8005332:	e7d2      	b.n	80052da <_vfiprintf_r+0xc6>
 8005334:	9b03      	ldr	r3, [sp, #12]
 8005336:	1d19      	adds	r1, r3, #4
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	9103      	str	r1, [sp, #12]
 800533c:	2b00      	cmp	r3, #0
 800533e:	bfbb      	ittet	lt
 8005340:	425b      	neglt	r3, r3
 8005342:	f042 0202 	orrlt.w	r2, r2, #2
 8005346:	9307      	strge	r3, [sp, #28]
 8005348:	9307      	strlt	r3, [sp, #28]
 800534a:	bfb8      	it	lt
 800534c:	9204      	strlt	r2, [sp, #16]
 800534e:	7823      	ldrb	r3, [r4, #0]
 8005350:	2b2e      	cmp	r3, #46	@ 0x2e
 8005352:	d10a      	bne.n	800536a <_vfiprintf_r+0x156>
 8005354:	7863      	ldrb	r3, [r4, #1]
 8005356:	2b2a      	cmp	r3, #42	@ 0x2a
 8005358:	d132      	bne.n	80053c0 <_vfiprintf_r+0x1ac>
 800535a:	9b03      	ldr	r3, [sp, #12]
 800535c:	3402      	adds	r4, #2
 800535e:	1d1a      	adds	r2, r3, #4
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	9203      	str	r2, [sp, #12]
 8005364:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005368:	9305      	str	r3, [sp, #20]
 800536a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005434 <_vfiprintf_r+0x220>
 800536e:	2203      	movs	r2, #3
 8005370:	4650      	mov	r0, sl
 8005372:	7821      	ldrb	r1, [r4, #0]
 8005374:	f7fe f971 	bl	800365a <memchr>
 8005378:	b138      	cbz	r0, 800538a <_vfiprintf_r+0x176>
 800537a:	2240      	movs	r2, #64	@ 0x40
 800537c:	9b04      	ldr	r3, [sp, #16]
 800537e:	eba0 000a 	sub.w	r0, r0, sl
 8005382:	4082      	lsls	r2, r0
 8005384:	4313      	orrs	r3, r2
 8005386:	3401      	adds	r4, #1
 8005388:	9304      	str	r3, [sp, #16]
 800538a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800538e:	2206      	movs	r2, #6
 8005390:	4829      	ldr	r0, [pc, #164]	@ (8005438 <_vfiprintf_r+0x224>)
 8005392:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005396:	f7fe f960 	bl	800365a <memchr>
 800539a:	2800      	cmp	r0, #0
 800539c:	d03f      	beq.n	800541e <_vfiprintf_r+0x20a>
 800539e:	4b27      	ldr	r3, [pc, #156]	@ (800543c <_vfiprintf_r+0x228>)
 80053a0:	bb1b      	cbnz	r3, 80053ea <_vfiprintf_r+0x1d6>
 80053a2:	9b03      	ldr	r3, [sp, #12]
 80053a4:	3307      	adds	r3, #7
 80053a6:	f023 0307 	bic.w	r3, r3, #7
 80053aa:	3308      	adds	r3, #8
 80053ac:	9303      	str	r3, [sp, #12]
 80053ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053b0:	443b      	add	r3, r7
 80053b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80053b4:	e76a      	b.n	800528c <_vfiprintf_r+0x78>
 80053b6:	460c      	mov	r4, r1
 80053b8:	2001      	movs	r0, #1
 80053ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80053be:	e7a8      	b.n	8005312 <_vfiprintf_r+0xfe>
 80053c0:	2300      	movs	r3, #0
 80053c2:	f04f 0c0a 	mov.w	ip, #10
 80053c6:	4619      	mov	r1, r3
 80053c8:	3401      	adds	r4, #1
 80053ca:	9305      	str	r3, [sp, #20]
 80053cc:	4620      	mov	r0, r4
 80053ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053d2:	3a30      	subs	r2, #48	@ 0x30
 80053d4:	2a09      	cmp	r2, #9
 80053d6:	d903      	bls.n	80053e0 <_vfiprintf_r+0x1cc>
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d0c6      	beq.n	800536a <_vfiprintf_r+0x156>
 80053dc:	9105      	str	r1, [sp, #20]
 80053de:	e7c4      	b.n	800536a <_vfiprintf_r+0x156>
 80053e0:	4604      	mov	r4, r0
 80053e2:	2301      	movs	r3, #1
 80053e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80053e8:	e7f0      	b.n	80053cc <_vfiprintf_r+0x1b8>
 80053ea:	ab03      	add	r3, sp, #12
 80053ec:	9300      	str	r3, [sp, #0]
 80053ee:	462a      	mov	r2, r5
 80053f0:	4630      	mov	r0, r6
 80053f2:	4b13      	ldr	r3, [pc, #76]	@ (8005440 <_vfiprintf_r+0x22c>)
 80053f4:	a904      	add	r1, sp, #16
 80053f6:	f7fd fbcd 	bl	8002b94 <_printf_float>
 80053fa:	4607      	mov	r7, r0
 80053fc:	1c78      	adds	r0, r7, #1
 80053fe:	d1d6      	bne.n	80053ae <_vfiprintf_r+0x19a>
 8005400:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005402:	07d9      	lsls	r1, r3, #31
 8005404:	d405      	bmi.n	8005412 <_vfiprintf_r+0x1fe>
 8005406:	89ab      	ldrh	r3, [r5, #12]
 8005408:	059a      	lsls	r2, r3, #22
 800540a:	d402      	bmi.n	8005412 <_vfiprintf_r+0x1fe>
 800540c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800540e:	f7fe f923 	bl	8003658 <__retarget_lock_release_recursive>
 8005412:	89ab      	ldrh	r3, [r5, #12]
 8005414:	065b      	lsls	r3, r3, #25
 8005416:	f53f af1f 	bmi.w	8005258 <_vfiprintf_r+0x44>
 800541a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800541c:	e71e      	b.n	800525c <_vfiprintf_r+0x48>
 800541e:	ab03      	add	r3, sp, #12
 8005420:	9300      	str	r3, [sp, #0]
 8005422:	462a      	mov	r2, r5
 8005424:	4630      	mov	r0, r6
 8005426:	4b06      	ldr	r3, [pc, #24]	@ (8005440 <_vfiprintf_r+0x22c>)
 8005428:	a904      	add	r1, sp, #16
 800542a:	f7fd fe51 	bl	80030d0 <_printf_i>
 800542e:	e7e4      	b.n	80053fa <_vfiprintf_r+0x1e6>
 8005430:	08005980 	.word	0x08005980
 8005434:	08005986 	.word	0x08005986
 8005438:	0800598a 	.word	0x0800598a
 800543c:	08002b95 	.word	0x08002b95
 8005440:	080051f1 	.word	0x080051f1

08005444 <__swbuf_r>:
 8005444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005446:	460e      	mov	r6, r1
 8005448:	4614      	mov	r4, r2
 800544a:	4605      	mov	r5, r0
 800544c:	b118      	cbz	r0, 8005456 <__swbuf_r+0x12>
 800544e:	6a03      	ldr	r3, [r0, #32]
 8005450:	b90b      	cbnz	r3, 8005456 <__swbuf_r+0x12>
 8005452:	f7fd ffe9 	bl	8003428 <__sinit>
 8005456:	69a3      	ldr	r3, [r4, #24]
 8005458:	60a3      	str	r3, [r4, #8]
 800545a:	89a3      	ldrh	r3, [r4, #12]
 800545c:	071a      	lsls	r2, r3, #28
 800545e:	d501      	bpl.n	8005464 <__swbuf_r+0x20>
 8005460:	6923      	ldr	r3, [r4, #16]
 8005462:	b943      	cbnz	r3, 8005476 <__swbuf_r+0x32>
 8005464:	4621      	mov	r1, r4
 8005466:	4628      	mov	r0, r5
 8005468:	f000 f82a 	bl	80054c0 <__swsetup_r>
 800546c:	b118      	cbz	r0, 8005476 <__swbuf_r+0x32>
 800546e:	f04f 37ff 	mov.w	r7, #4294967295
 8005472:	4638      	mov	r0, r7
 8005474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005476:	6823      	ldr	r3, [r4, #0]
 8005478:	6922      	ldr	r2, [r4, #16]
 800547a:	b2f6      	uxtb	r6, r6
 800547c:	1a98      	subs	r0, r3, r2
 800547e:	6963      	ldr	r3, [r4, #20]
 8005480:	4637      	mov	r7, r6
 8005482:	4283      	cmp	r3, r0
 8005484:	dc05      	bgt.n	8005492 <__swbuf_r+0x4e>
 8005486:	4621      	mov	r1, r4
 8005488:	4628      	mov	r0, r5
 800548a:	f7ff fd9b 	bl	8004fc4 <_fflush_r>
 800548e:	2800      	cmp	r0, #0
 8005490:	d1ed      	bne.n	800546e <__swbuf_r+0x2a>
 8005492:	68a3      	ldr	r3, [r4, #8]
 8005494:	3b01      	subs	r3, #1
 8005496:	60a3      	str	r3, [r4, #8]
 8005498:	6823      	ldr	r3, [r4, #0]
 800549a:	1c5a      	adds	r2, r3, #1
 800549c:	6022      	str	r2, [r4, #0]
 800549e:	701e      	strb	r6, [r3, #0]
 80054a0:	6962      	ldr	r2, [r4, #20]
 80054a2:	1c43      	adds	r3, r0, #1
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d004      	beq.n	80054b2 <__swbuf_r+0x6e>
 80054a8:	89a3      	ldrh	r3, [r4, #12]
 80054aa:	07db      	lsls	r3, r3, #31
 80054ac:	d5e1      	bpl.n	8005472 <__swbuf_r+0x2e>
 80054ae:	2e0a      	cmp	r6, #10
 80054b0:	d1df      	bne.n	8005472 <__swbuf_r+0x2e>
 80054b2:	4621      	mov	r1, r4
 80054b4:	4628      	mov	r0, r5
 80054b6:	f7ff fd85 	bl	8004fc4 <_fflush_r>
 80054ba:	2800      	cmp	r0, #0
 80054bc:	d0d9      	beq.n	8005472 <__swbuf_r+0x2e>
 80054be:	e7d6      	b.n	800546e <__swbuf_r+0x2a>

080054c0 <__swsetup_r>:
 80054c0:	b538      	push	{r3, r4, r5, lr}
 80054c2:	4b29      	ldr	r3, [pc, #164]	@ (8005568 <__swsetup_r+0xa8>)
 80054c4:	4605      	mov	r5, r0
 80054c6:	6818      	ldr	r0, [r3, #0]
 80054c8:	460c      	mov	r4, r1
 80054ca:	b118      	cbz	r0, 80054d4 <__swsetup_r+0x14>
 80054cc:	6a03      	ldr	r3, [r0, #32]
 80054ce:	b90b      	cbnz	r3, 80054d4 <__swsetup_r+0x14>
 80054d0:	f7fd ffaa 	bl	8003428 <__sinit>
 80054d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054d8:	0719      	lsls	r1, r3, #28
 80054da:	d422      	bmi.n	8005522 <__swsetup_r+0x62>
 80054dc:	06da      	lsls	r2, r3, #27
 80054de:	d407      	bmi.n	80054f0 <__swsetup_r+0x30>
 80054e0:	2209      	movs	r2, #9
 80054e2:	602a      	str	r2, [r5, #0]
 80054e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054e8:	f04f 30ff 	mov.w	r0, #4294967295
 80054ec:	81a3      	strh	r3, [r4, #12]
 80054ee:	e033      	b.n	8005558 <__swsetup_r+0x98>
 80054f0:	0758      	lsls	r0, r3, #29
 80054f2:	d512      	bpl.n	800551a <__swsetup_r+0x5a>
 80054f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80054f6:	b141      	cbz	r1, 800550a <__swsetup_r+0x4a>
 80054f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80054fc:	4299      	cmp	r1, r3
 80054fe:	d002      	beq.n	8005506 <__swsetup_r+0x46>
 8005500:	4628      	mov	r0, r5
 8005502:	f7fe ff09 	bl	8004318 <_free_r>
 8005506:	2300      	movs	r3, #0
 8005508:	6363      	str	r3, [r4, #52]	@ 0x34
 800550a:	89a3      	ldrh	r3, [r4, #12]
 800550c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005510:	81a3      	strh	r3, [r4, #12]
 8005512:	2300      	movs	r3, #0
 8005514:	6063      	str	r3, [r4, #4]
 8005516:	6923      	ldr	r3, [r4, #16]
 8005518:	6023      	str	r3, [r4, #0]
 800551a:	89a3      	ldrh	r3, [r4, #12]
 800551c:	f043 0308 	orr.w	r3, r3, #8
 8005520:	81a3      	strh	r3, [r4, #12]
 8005522:	6923      	ldr	r3, [r4, #16]
 8005524:	b94b      	cbnz	r3, 800553a <__swsetup_r+0x7a>
 8005526:	89a3      	ldrh	r3, [r4, #12]
 8005528:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800552c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005530:	d003      	beq.n	800553a <__swsetup_r+0x7a>
 8005532:	4621      	mov	r1, r4
 8005534:	4628      	mov	r0, r5
 8005536:	f000 f882 	bl	800563e <__smakebuf_r>
 800553a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800553e:	f013 0201 	ands.w	r2, r3, #1
 8005542:	d00a      	beq.n	800555a <__swsetup_r+0x9a>
 8005544:	2200      	movs	r2, #0
 8005546:	60a2      	str	r2, [r4, #8]
 8005548:	6962      	ldr	r2, [r4, #20]
 800554a:	4252      	negs	r2, r2
 800554c:	61a2      	str	r2, [r4, #24]
 800554e:	6922      	ldr	r2, [r4, #16]
 8005550:	b942      	cbnz	r2, 8005564 <__swsetup_r+0xa4>
 8005552:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005556:	d1c5      	bne.n	80054e4 <__swsetup_r+0x24>
 8005558:	bd38      	pop	{r3, r4, r5, pc}
 800555a:	0799      	lsls	r1, r3, #30
 800555c:	bf58      	it	pl
 800555e:	6962      	ldrpl	r2, [r4, #20]
 8005560:	60a2      	str	r2, [r4, #8]
 8005562:	e7f4      	b.n	800554e <__swsetup_r+0x8e>
 8005564:	2000      	movs	r0, #0
 8005566:	e7f7      	b.n	8005558 <__swsetup_r+0x98>
 8005568:	20000018 	.word	0x20000018

0800556c <_raise_r>:
 800556c:	291f      	cmp	r1, #31
 800556e:	b538      	push	{r3, r4, r5, lr}
 8005570:	4605      	mov	r5, r0
 8005572:	460c      	mov	r4, r1
 8005574:	d904      	bls.n	8005580 <_raise_r+0x14>
 8005576:	2316      	movs	r3, #22
 8005578:	6003      	str	r3, [r0, #0]
 800557a:	f04f 30ff 	mov.w	r0, #4294967295
 800557e:	bd38      	pop	{r3, r4, r5, pc}
 8005580:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005582:	b112      	cbz	r2, 800558a <_raise_r+0x1e>
 8005584:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005588:	b94b      	cbnz	r3, 800559e <_raise_r+0x32>
 800558a:	4628      	mov	r0, r5
 800558c:	f000 f830 	bl	80055f0 <_getpid_r>
 8005590:	4622      	mov	r2, r4
 8005592:	4601      	mov	r1, r0
 8005594:	4628      	mov	r0, r5
 8005596:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800559a:	f000 b817 	b.w	80055cc <_kill_r>
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d00a      	beq.n	80055b8 <_raise_r+0x4c>
 80055a2:	1c59      	adds	r1, r3, #1
 80055a4:	d103      	bne.n	80055ae <_raise_r+0x42>
 80055a6:	2316      	movs	r3, #22
 80055a8:	6003      	str	r3, [r0, #0]
 80055aa:	2001      	movs	r0, #1
 80055ac:	e7e7      	b.n	800557e <_raise_r+0x12>
 80055ae:	2100      	movs	r1, #0
 80055b0:	4620      	mov	r0, r4
 80055b2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80055b6:	4798      	blx	r3
 80055b8:	2000      	movs	r0, #0
 80055ba:	e7e0      	b.n	800557e <_raise_r+0x12>

080055bc <raise>:
 80055bc:	4b02      	ldr	r3, [pc, #8]	@ (80055c8 <raise+0xc>)
 80055be:	4601      	mov	r1, r0
 80055c0:	6818      	ldr	r0, [r3, #0]
 80055c2:	f7ff bfd3 	b.w	800556c <_raise_r>
 80055c6:	bf00      	nop
 80055c8:	20000018 	.word	0x20000018

080055cc <_kill_r>:
 80055cc:	b538      	push	{r3, r4, r5, lr}
 80055ce:	2300      	movs	r3, #0
 80055d0:	4d06      	ldr	r5, [pc, #24]	@ (80055ec <_kill_r+0x20>)
 80055d2:	4604      	mov	r4, r0
 80055d4:	4608      	mov	r0, r1
 80055d6:	4611      	mov	r1, r2
 80055d8:	602b      	str	r3, [r5, #0]
 80055da:	f7fb fcc2 	bl	8000f62 <_kill>
 80055de:	1c43      	adds	r3, r0, #1
 80055e0:	d102      	bne.n	80055e8 <_kill_r+0x1c>
 80055e2:	682b      	ldr	r3, [r5, #0]
 80055e4:	b103      	cbz	r3, 80055e8 <_kill_r+0x1c>
 80055e6:	6023      	str	r3, [r4, #0]
 80055e8:	bd38      	pop	{r3, r4, r5, pc}
 80055ea:	bf00      	nop
 80055ec:	200003d0 	.word	0x200003d0

080055f0 <_getpid_r>:
 80055f0:	f7fb bcb0 	b.w	8000f54 <_getpid>

080055f4 <__swhatbuf_r>:
 80055f4:	b570      	push	{r4, r5, r6, lr}
 80055f6:	460c      	mov	r4, r1
 80055f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055fc:	4615      	mov	r5, r2
 80055fe:	2900      	cmp	r1, #0
 8005600:	461e      	mov	r6, r3
 8005602:	b096      	sub	sp, #88	@ 0x58
 8005604:	da0c      	bge.n	8005620 <__swhatbuf_r+0x2c>
 8005606:	89a3      	ldrh	r3, [r4, #12]
 8005608:	2100      	movs	r1, #0
 800560a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800560e:	bf14      	ite	ne
 8005610:	2340      	movne	r3, #64	@ 0x40
 8005612:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005616:	2000      	movs	r0, #0
 8005618:	6031      	str	r1, [r6, #0]
 800561a:	602b      	str	r3, [r5, #0]
 800561c:	b016      	add	sp, #88	@ 0x58
 800561e:	bd70      	pop	{r4, r5, r6, pc}
 8005620:	466a      	mov	r2, sp
 8005622:	f000 f849 	bl	80056b8 <_fstat_r>
 8005626:	2800      	cmp	r0, #0
 8005628:	dbed      	blt.n	8005606 <__swhatbuf_r+0x12>
 800562a:	9901      	ldr	r1, [sp, #4]
 800562c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005630:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005634:	4259      	negs	r1, r3
 8005636:	4159      	adcs	r1, r3
 8005638:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800563c:	e7eb      	b.n	8005616 <__swhatbuf_r+0x22>

0800563e <__smakebuf_r>:
 800563e:	898b      	ldrh	r3, [r1, #12]
 8005640:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005642:	079d      	lsls	r5, r3, #30
 8005644:	4606      	mov	r6, r0
 8005646:	460c      	mov	r4, r1
 8005648:	d507      	bpl.n	800565a <__smakebuf_r+0x1c>
 800564a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800564e:	6023      	str	r3, [r4, #0]
 8005650:	6123      	str	r3, [r4, #16]
 8005652:	2301      	movs	r3, #1
 8005654:	6163      	str	r3, [r4, #20]
 8005656:	b003      	add	sp, #12
 8005658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800565a:	466a      	mov	r2, sp
 800565c:	ab01      	add	r3, sp, #4
 800565e:	f7ff ffc9 	bl	80055f4 <__swhatbuf_r>
 8005662:	9f00      	ldr	r7, [sp, #0]
 8005664:	4605      	mov	r5, r0
 8005666:	4639      	mov	r1, r7
 8005668:	4630      	mov	r0, r6
 800566a:	f7fe fec7 	bl	80043fc <_malloc_r>
 800566e:	b948      	cbnz	r0, 8005684 <__smakebuf_r+0x46>
 8005670:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005674:	059a      	lsls	r2, r3, #22
 8005676:	d4ee      	bmi.n	8005656 <__smakebuf_r+0x18>
 8005678:	f023 0303 	bic.w	r3, r3, #3
 800567c:	f043 0302 	orr.w	r3, r3, #2
 8005680:	81a3      	strh	r3, [r4, #12]
 8005682:	e7e2      	b.n	800564a <__smakebuf_r+0xc>
 8005684:	89a3      	ldrh	r3, [r4, #12]
 8005686:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800568a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800568e:	81a3      	strh	r3, [r4, #12]
 8005690:	9b01      	ldr	r3, [sp, #4]
 8005692:	6020      	str	r0, [r4, #0]
 8005694:	b15b      	cbz	r3, 80056ae <__smakebuf_r+0x70>
 8005696:	4630      	mov	r0, r6
 8005698:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800569c:	f000 f81e 	bl	80056dc <_isatty_r>
 80056a0:	b128      	cbz	r0, 80056ae <__smakebuf_r+0x70>
 80056a2:	89a3      	ldrh	r3, [r4, #12]
 80056a4:	f023 0303 	bic.w	r3, r3, #3
 80056a8:	f043 0301 	orr.w	r3, r3, #1
 80056ac:	81a3      	strh	r3, [r4, #12]
 80056ae:	89a3      	ldrh	r3, [r4, #12]
 80056b0:	431d      	orrs	r5, r3
 80056b2:	81a5      	strh	r5, [r4, #12]
 80056b4:	e7cf      	b.n	8005656 <__smakebuf_r+0x18>
	...

080056b8 <_fstat_r>:
 80056b8:	b538      	push	{r3, r4, r5, lr}
 80056ba:	2300      	movs	r3, #0
 80056bc:	4d06      	ldr	r5, [pc, #24]	@ (80056d8 <_fstat_r+0x20>)
 80056be:	4604      	mov	r4, r0
 80056c0:	4608      	mov	r0, r1
 80056c2:	4611      	mov	r1, r2
 80056c4:	602b      	str	r3, [r5, #0]
 80056c6:	f7fb fcab 	bl	8001020 <_fstat>
 80056ca:	1c43      	adds	r3, r0, #1
 80056cc:	d102      	bne.n	80056d4 <_fstat_r+0x1c>
 80056ce:	682b      	ldr	r3, [r5, #0]
 80056d0:	b103      	cbz	r3, 80056d4 <_fstat_r+0x1c>
 80056d2:	6023      	str	r3, [r4, #0]
 80056d4:	bd38      	pop	{r3, r4, r5, pc}
 80056d6:	bf00      	nop
 80056d8:	200003d0 	.word	0x200003d0

080056dc <_isatty_r>:
 80056dc:	b538      	push	{r3, r4, r5, lr}
 80056de:	2300      	movs	r3, #0
 80056e0:	4d05      	ldr	r5, [pc, #20]	@ (80056f8 <_isatty_r+0x1c>)
 80056e2:	4604      	mov	r4, r0
 80056e4:	4608      	mov	r0, r1
 80056e6:	602b      	str	r3, [r5, #0]
 80056e8:	f7fb fca9 	bl	800103e <_isatty>
 80056ec:	1c43      	adds	r3, r0, #1
 80056ee:	d102      	bne.n	80056f6 <_isatty_r+0x1a>
 80056f0:	682b      	ldr	r3, [r5, #0]
 80056f2:	b103      	cbz	r3, 80056f6 <_isatty_r+0x1a>
 80056f4:	6023      	str	r3, [r4, #0]
 80056f6:	bd38      	pop	{r3, r4, r5, pc}
 80056f8:	200003d0 	.word	0x200003d0

080056fc <_init>:
 80056fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056fe:	bf00      	nop
 8005700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005702:	bc08      	pop	{r3}
 8005704:	469e      	mov	lr, r3
 8005706:	4770      	bx	lr

08005708 <_fini>:
 8005708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800570a:	bf00      	nop
 800570c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800570e:	bc08      	pop	{r3}
 8005710:	469e      	mov	lr, r3
 8005712:	4770      	bx	lr
